Proxima = {}
Proxima.net = {}
Proxima.utils = {}
Proxima.utils.message = {}
Proxima.globals = {}
Proxima.exploit = {}

Proxima.net.interface = "wlan0"
Proxima.net.maxACKRate = 300000
Proxima.net.router = null
Proxima.net.networkMap = []
Proxima.net.networkKey = null
Proxima.net.targetNetwork = null

Proxima.globals.initMode = "remote"
Proxima.globals.metaxploit = null
Proxima.globals.crypto = null
Proxima.globals.myPC = null

Proxima.globals.cryptoLocations = [
    "/lib/crypto.so",
    "/home/guest/crypto.so"
]

Proxima.globals.metaxploitLocations = [
    "/lib/metaxploit.so",
    "/home/guest/metaxploit.so"
]

Proxima.globals.uploadTo = "/home/guest/"
Proxima.globals.uploadFrom = home_dir + "/Upload/"

Proxima.exploit.injectionPassword = "919665"

Proxima.exploit.router = null
Proxima.exploit.targetIP = null

Proxima.exploit.targetPort = null
Proxima.exploit.targetPorts = []

Proxima.exploit.targetLibrary = null
Proxima.exploit.targetLibraries = []

Proxima.exploit.targetExploit = null
Proxima.exploit.targetExploits = []

Proxima.exploit.portID = 1
Proxima.exploit.libraryID = 1
Proxima.exploit.exploitID = 1
Proxima.exploit.totalExploits = 0

Proxima.net.checkConnection = function ()
    if Proxima.globals.myPC.is_network_active then
        return true
    else
        return false
    end if
end function

Proxima.net.startMonitoring = function ()
    print(Proxima.utils.message.info("Starting " + "<b>" + self.interface + "</b>"))
    airmonResult = Proxima.globals.crypto.airmon("start", self.interface)
    if typeof(airmonResult) == "string" then 
        exit(Proxima.utils.message.error("Can't start monitoring on <b>" + self.interface + "</b>"))
    end if
end function

Proxima.net.setAutoTarget = function ()
    getNetworks = Proxima.globals.myPC.wifi_networks(self.interface)
    if getNetworks == null then exit("Unable to fetch network list...")

    for network in getNetworks
        network = network.split(" ")
        bssid = network[0]
        essid = network[2]
        strength = network[1][:-1].to_int
        self.networkMap.push({"essid": essid, "bssid": bssid, "strength": strength})
    end for
    
    self.targetNetwork = self.networkMap.sort("strength")[self.networkMap.len - 1]
end function

Proxima.net.startSniffing = function ()
    requiredACKs = ceil(self.maxACKRate / self.targetNetwork.strength)
    print(Proxima.utils.message.progress("Sniffing ACKs... (approx. " + requiredACKs + ")"))
    print("+------------------------------------+")
    getACKs = Proxima.globals.crypto.aireplay(self.targetNetwork.bssid, self.targetNetwork.essid, requiredACKs)

    if typeof(getACKs) == "string" then exit(Proxima.utils.message.error(getACKs))

    airmonResult = Proxima.globals.crypto.airmon("stop", self.interface)
    if typeof(airmonResult) == "string" then exit(Proxima.utils.message.error("Unable to stop monitoring on <b>" + self.interface + "</b>"))

    print(Proxima.utils.message.info("Monitoring stopped"))
    print("+------------------------------------+")
end function

Proxima.net.crackKey = function ()
    capFile = Proxima.globals.myPC.File(home_dir + "/file.cap")

    if not capFile then exit(Proxima.utils.message.error("<b>file.cap</b> is missing"))

    if not capFile.has_permission("r") or not capFile.has_permission("w") then exit(Proxima.utils.message.error("Insufficient permission to open <b>file.cap</b> for reading."))

    if capFile then
        self.networkKey = Proxima.globals.crypto.aircrack(capFile.path)
        if self.networkKey == null then exit(Proxima.utils.message.error("Could not crack key. Please try again later..."))
        print(Proxima.utils.message.success("Network key cracked! [<b>" + self.networkKey + "</b>]"))
        capFile.delete
    end if
end function

Proxima.net.connectNetwork = function ()
    print(Proxima.utils.message.progress("Connecting to <b>" + self.targetNetwork.essid + "</b>..."))
    connectionStatus = Proxima.globals.myPC.connect_wifi(self.interface, self.targetNetwork.bssid, self.targetNetwork.essid, self.networkKey)
    if not connectionStatus == 1 then exit(Proxima.utils.message.error("Connection failed. Please try again later..."))
    exit(Proxima.utils.message.success("Connection successfull! You are <b>online</b>!"))
end function

Proxima.exploit.setTargetIP = function (targetIP)
    self.targetIP = targetIP
end function

Proxima.exploit.setTargetPort = function (targetPort)
    self.targetPort = targetPort
end function

Proxima.exploit.setTargetLibrary = function (targetLibrary)
    self.targetLibrary = targetLibrary
end function

Proxima.exploit.setTargetExploit = function (targetExploit)
    self.targetExploit = targetExploit
end function

Proxima.exploit.checkTargetIP = function ()
    if self.targetIP != null then
        self.router = get_router(self.targetIP)
        if self.router != null and is_lan_ip(self.targetIP) != 1 then
            return true
        else
            self.router = null
            self.targetIP = null
            return false
        end if
    else
        return false
    end if
end function

Proxima.exploit.checkPorts = function ()
    if self.checkTargetIP() then
        scannedPorts = used_ports(self.router)
        if scannedPorts.len == 0 or scannedPorts == null then
            return false
        else
            self.portID = 1
            self.targetPorts = []
            for scannedPort in scannedPorts
                portNumber = scannedPort.port_number
                portState = "open"
                if is_closed(scannedPort) then portState = "closed"
                portInfo = self.router.port_info(scannedPort).split(" ")
                portService = portInfo[0]
                portVersion = portInfo[1]
                portIP = scannedPort.get_lan_ip
                self.targetPorts.push({ "id": self.portID, "port_number": portNumber, "state": portState, "service": portService, "version": portVersion, "lan_ip": portIP, "public_ip": self.targetIP  })
                self.portID = self.portID + 1
            end for
            return true
        end if
    else
        return false
    end if
end function

Proxima.exploit.parseScanEntries = function (scanResult, libraryDump, targetPort=null, targetLibrary=null)
    for entry in scanResult
        scanAddress = scan_address(Proxima.globals.metaxploit, libraryDump, entry)
        segments = split(scanAddress, "Unsafe check: ")[1:]
        exploits = []

        for segment in segments
            labelStart = indexOf(segment, "<b>")
            labelEnd = indexOf(segment, "</b>")
            push(exploits, segment[labelStart + 3: labelEnd])
        end for

        for exploit in exploits
            if Proxima.globals.initMode == "remote" then
                self.targetExploits.push({ "id": self.exploitID, "ip": self.targetIP, "port_number": targetPort.port_number, "memAddr": entry, "unsecZone": exploit })
            else if Proxima.globals.initMode == "local" then
                self.targetExploits.push({ "id": self.exploitID, "lib_name": libraryDump.lib_name, "version": libraryDump.version, "path": targetLibrary.path, "memAddr": entry, "unsecZone": exploit })
            end if
            self.totalExploits = self.totalExploits + 1
            self.exploitID = self.exploitID + 1
        end for
    end for
end function

Proxima.exploit.dumpPort = function (targetPort)
    if targetPort.state == "open" then
        if self.targetIP != targetPort.public_ip then self.targetIP = targetPort.public_ip
        netSession = Proxima.globals.metaxploit.net_use(self.targetIP, targetPort.port_number)
        if netSession != null then
            libraryDump = netSession.dump_lib
            print(Proxima.utils.message.info("Library version found: <b>" + libraryDump.lib_name + " -> " + libraryDump.version + "</b>"))
            print(Proxima.utils.message.progress("Attempting to scan vulnerabilities on port " + targetPort.port_number + "..."))
            scanResult = Proxima.globals.metaxploit.scan(libraryDump)
            self.parseScanEntries(scanResult, libraryDump, targetPort, null)
        else
            print(Proxima.utils.message.error("Unable to connect to port " + targetPort.port_number + ", it has firewall protection."))
        end if 
    else
        print(Proxima.utils.message.error("Unable to connect to port " + targetPort.port_number + ". It is closed."))
    end if
end function

Proxima.exploit.scanPort = function ()
    if self.targetPorts.len > 0 then
        self.exploitID = 1
        self.totalExploits = 0
        self.targetExploits = []
        if self.targetPort != null and self.targetPorts.hasIndex(self.targetPort - 1) then
            targetPort = self.targetPorts[self.targetPort - 1]
            self.dumpPort(targetPort)
            if self.totalExploits == 0 then
                print(Proxima.utils.message.error("No useful vulnerabilities found on port <b>" + targetPort.port_number + "</b>!"))
            else if self.totalExploits > 0 then
                print(Proxima.utils.message.success("<b>" + self.totalExploits + "</b> exploits found. Use 'vulnlist' command to view and execute them."))
            end if
        else
            print(Proxima.utils.message.error("No port found with the specified ID. <b>[ID:" + self.targetPort + "]</b>"))
        end if
    else
        if self.targetIP != null then
            print(Proxima.utils.message.error("No open ports found at the specified target IP address. <b>[IP:" + self.targetIP + "]</b>"))
        else
            print(Proxima.utils.message.error("There is no specified target IP address yet, please scan an IP address first to proceed."))
        end if
    end if
end function

Proxima.exploit.scanPorts = function ()
    if self.targetPorts.len > 0 then
        self.exploitID = 1
        self.totalExploits = 0
        self.targetExploits = []
        for targetPort in self.targetPorts
            self.dumpPort(targetPort)
        end for
        if self.totalExploits == 0 then
            print(Proxima.utils.message.error("No useful vulnerabilities found on any port."))
        else if self.totalExploits > 0 then
            print(Proxima.utils.message.success("<b>" + self.totalExploits + "</b> exploits found. Use 'vulnlist' command to view and execute them."))
        end if
    else
        if self.targetIP != null then
            print(Proxima.utils.message.error("No open ports found at the specified target IP address. <b>[IP:" + self.targetIP + "]</b>"))
        else
            print(Proxima.utils.message.error("There is no specified target IP address yet, please scan an IP address first to proceed."))
        end if
    end if
end function

Proxima.exploit.checkLibraries = function ()
    librariesFolder = Proxima.globals.myPC.File("/lib")
    localLibraries = librariesFolder.get_files
    self.libraryID = 1
    self.targetLibraries = []
    for localLibrary in localLibraries
        libraryInfo = Proxima.globals.metaxploit.load(localLibrary.path)
        self.targetLibraries.push({ "id": self.libraryID , "lib_name": libraryInfo.lib_name, "version": libraryInfo.version, "path": localLibrary.path })
        self.libraryID = self.libraryID + 1
    end for
end function

Proxima.exploit.dumpLibrary = function (targetLibrary)
    libraryDump = Proxima.globals.metaxploit.load(targetLibrary.path) 
    print(Proxima.utils.message.info("Library version found: <b>" + libraryDump.lib_name + " -> " + libraryDump.version + "</b>"))
    print(Proxima.utils.message.progress("Attempting to scan vulnerabilities at <b>" + libraryDump.lib_name + "</b>!"))
    scanResult = Proxima.globals.metaxploit.scan(libraryDump)
    self.parseScanEntries(scanResult, libraryDump, null, targetLibrary)
end function

Proxima.exploit.scanLibrary = function ()
    if self.targetLibraries.len > 0 then
        self.exploitID = 1
        self.totalExploits = 0
        self.targetExploits = []
        if self.targetLibrary != null and self.targetLibraries.hasIndex(self.targetLibrary - 1) then
            targetLibrary = self.targetLibraries[self.targetLibrary - 1]
            self.dumpLibrary(targetLibrary)
            if self.totalExploits == 0 then
                print(Proxima.utils.message.error("No useful vulnerabilities found at <b>" + targetLibrary.lib_name + "</b>!"))
            else if self.totalExploits > 0 then
                print(Proxima.utils.message.success("<b>" + self.totalExploits + "</b> exploits found. Use the 'vulnlist' command to view and execute them."))
            end if
        else
            print(Proxima.utils.message.error("No library found with specified ID. <b>[ID:" + self.targetLibrary + "]</b>"))
        end if
    else
        print(Proxima.utils.message.error("No libraries found to scan, please make a scan first."))
    end if
end function

Proxima.exploit.scanLibraries = function ()
    if self.targetLibraries.len > 0 then
        self.exploitID = 1
        self.totalExploits = 0
        self.targetExploits = []
        for targetLibrary in self.targetLibraries
            self.dumpLibrary(targetLibrary)
        end for
        if self.totalExploits == 0 then
            print(Proxima.utils.message.error("No useful vulnerabilities found at any libraries."))
        else if self.totalExploits > 0 then
            print(Proxima.utils.message.success("<b>" + self.totalExploits + "</b> exploits found. Use the 'vulnlist' command to view and execute them."))
        end if
    else
        print(Proxima.utils.message.error("No libraries found fo scan, please make a scan first."))
    end if
end function

Proxima.exploit.checkPrivilegeLevel = function (targetComputer)
    rootDirectory = targetComputer.File("/")
    privilegeLevel = "guest"
    if rootDirectory and rootDirectory.has_permission("w") then
        privilegeLevel = "root"
    else
        homeDirectory = targetComputer.File("/home")
        if homeDirectory then
            for userFolder in homeDirectory.get_folders
                if userFolder.name == "guest" then continue
                if userFolder.has_permission("w") then privilegeLevel = userFolder.name
            end for
        end if
    end if
    return privilegeLevel
end function

Proxima.exploit.decipherPassword = function (encryptedContent)
    encryptedContent = encryptedContent.get_content
    rootAccountInfo = encryptedContent.split("\n")[0]
    rootPassword = rootAccountInfo.split(":")[1]
    decryptedPassword = Proxima.globals.crypto.decipher(rootPassword)
    return decryptedPassword
end function

Proxima.exploit.uploadTools = function (remoteShell)
    uploadTo = Proxima.globals.uploadTo
    toolsDirectory = Proxima.globals.myPC.File(Proxima.globals.uploadFrom)

    uploadProcess = true

    if uploadTo != null and toolsDirectory != null then
        fileList = Proxima.utils.collect_files(toolsDirectory)
        if fileList.len > 0 then
            for filePath in fileList
                hostShell = get_shell
                uploadFile = hostShell.scp(filePath, uploadTo, remoteShell)
                if typeof(uploadFile) == "string" or typeof(uploadFile) == null then
                    uploadProcess = false
                end if
            end for
        else
            uploadProcess = false
        end if
    else
        uploadProcess = false
    end if

    return uploadProcess
end function

Proxima.exploit.handleAttackResult = function (attackResult)
    if typeof(attackResult) == "shell" then
        print(Proxima.utils.message.success("Shell access granted! Checking user privilege..."))
        privilegeLevel = self.checkPrivilegeLevel(attackResult.host_computer)
        if privilegeLevel != "guest" then
            if privilegeLevel != "root" then
                passwdFile = attackResult.host_computer.File("/etc/passwd")
                if passwdFile and passwdFile.has_permission("r") then
                    print(Proxima.utils.message.success("Accessed the /etc/passwd file via user: <b>" + privilegeLevel + "</b>!"))
                    print(Proxima.utils.message.progress("Trying to decrypt /etc/passwd..."))
                    decryptedPassword = self.decipherPassword(passwdFile)
                    if decryptedPassword != null then
                        print(Proxima.utils.message.success("Decryption completed! <b>[PASSWORD:" + decryptedPassword + "]</b>"))
                        print(Proxima.utils.message.info("You can get root access by executing command: <b>sudo -u root</b>. Then type password: <b>" + decryptedPassword + "</b>"))
                    else
                        print(Proxima.utils.message.warning("Couldn't decyrpt root password. You have to gain access manually..."))
                    end if
                else
                    print(Proxima.utils.message.warning("Coulnd't access /etc/passwd file. You have to gain access manually..."))
                end if
                print(Proxima.utils.message.progress("Starting terminal..."))
            else
                print(Proxima.utils.message.success("Got root access! Starting terminal..."))
            end if
            attackResult.start_terminal
        else
            if Proxima.globals.initMode == "local" then
                print(Proxima.utils.message.error("Couldn't access root privileges! Terminating..."))
            else
                print(Proxima.utils.message.warning("Couldn't access root privileges, uploading local scanner..."))
                print("+------------------------------------+")
                uploadProcess = self.uploadTools(attackResult)
                print("+------------------------------------+")
                if uploadProcess then
                    print(Proxima.utils.message.success("Uploaded tools successfuly! You can now launch <b>pr00t.</b>"))
                else
                    print(Proxima.utils.message.warning("Couldn't upload tools, you have to upload them manually..."))
                    print(Proxima.utils.message.progress("Starting terminal..."))
                end if
                attackResult.start_terminal
            end if
        end if
    else if typeof(attackResult) == "computer" then
        print(Proxima.utils.message.info("Trying to access /etc/passwd..."))
        privilegeLevel = self.checkPrivilegeLevel(attackResult)
        if privilegeLevel != "guest" then
            passwdFile = attackResult.File("/etc/passwd")
            if passwdFile and passwdFile.has_permission("r") then
                print(Proxima.utils.message.success("Accessed the /etc/passwd file via user: <b>" + privilegeLevel + "</b>!"))
                print(Proxima.utils.message.progress("Trying to decrypt /etc/passwd..."))
                decryptedPassword = self.decipherPassword(passwdFile)
                if decryptedPassword != null then
                    print(Proxima.utils.message.success("Decryption completed! <b>[PASSWORD:" + decryptedPassword + "]</b>"))
                    if Proxima.globals.initMode == "local" then
                        print(Proxima.utils.message.info("You can get root access by executing command: <b>sudo -u root</b>. Then type password: <b>" + decryptedPassword + "</b>"))
                    else
                        isConnectableViaSSH = false
                        for targetPort in self.targetPorts
                            if targetPort.values[1] == 22 and targetPort.values[2] == "open" then
                                isConnectableViaSSH = true
                            end if
                        end for
                        if isConnectableViaSSH then print(Proxima.utils.message.info("You can connect via SSH by executing command: <b>ssh root@" + decryptedPassword + " " + self.targetIP + "</b>"))
                        if not isConnectableViaSSH then print(Proxima.utils.message.info("SSH port is closed or don't exist. You can try a different method to gain access..."))
                    end if
                else
                    print(Proxima.utils.message.error("Couldn't decyrpt root password."))
                end if
            else
                print(Proxima.utils.message.error("Coulnd't access /etc/passwd file."))
            end if
        else
            print(Proxima.utils.message.error("Got guest privilege, coulnd't access /etc/passwd file."))
        end if
    else if typeof(attackResult) == "file" then
        if is_folder(attackResult) == 1 then
            if attackResult.name == "etc" or attackResult.name == "/" then
                if attackResult.name == "etc" then
                    for file in attackResult.get_files
                        if file.name == "passwd" then
                            if file.has_permission("r") then
                                print(Proxima.utils.message.success("Access granted to /etc/passwd! Decrypting root password..."))
                                decryptedPassword = self.decipherPassword(file)
                                print(Proxima.utils.message.success("Decrypted password: <b>" + decryptedPassword + "</b>"))
                            else
                                print(Proxima.utils.message.error("Coulnd't access /etc/passwd file."))
                            end if                   
                        end if
                    end for
                else if attackResult.name == "/" then
                    for folder in attackResult.get_folders
                        if folder.name == "etc" then
                            for file in folder
                                if file.name == "passwd" then
                                    if file.has_permission("r") then
                                        print(Proxima.utils.message.success("Access granted to /etc/passwd! Decrypting root password..."))
                                        decryptedPassword = self.decipherPassword(file)
                                        print(Proxima.utils.message.success("Decrypted password: <b>" + decryptedPassword + "</b>"))
                                    else
                                        print(Proxima.utils.message.error("Coulnd't access /etc/passwd file."))
                                    end if
                                end if
                            end for
                        end if
                    end for
                end if
            end if
        else
            print(Proxima.utils.message.error("Couldn't find a useful information from the incoming file."))
        end if
    else
        print(Proxima.utils.message.error("Exploit did not work correctly, please try another one if it has any."))
    end if
end function

Proxima.exploit.execute = function ()
    if self.targetExploits.len == 0 then
        print(Proxima.utils.message.error("No exploits available, please make a scan first."))
    else if self.targetExploit != null and self.targetExploits.hasIndex(self.targetExploit - 1) then
        targetExploit = self.targetExploits[self.targetExploit - 1]
        netSession = null
        libraryDump = null
        if Proxima.globals.initMode == "remote" then
            print(Proxima.utils.message.progress("Trying to connect <b>" + targetExploit.ip + "</b> on port <b>" + targetExploit.port_number + "</b>"))
            netSession = Proxima.globals.metaxploit.net_use(targetExploit.ip, targetExploit.port_number)
            if not netSession then
                print(Proxima.utils.message.error("Unable to connect to port " + targetExploit.port_number + "."))
            else
                print(Proxima.utils.message.success("Connection established!"))
                libraryDump = netSession.dump_lib
                print(Proxima.utils.message.progress("Attempting to exploit " + libraryDump.lib_name + " at port " + targetExploit.port_number + ". <b>[MEM_ADDR:" + targetExploit.memAddr + "|UNSEC_CODE:" + targetExploit.unsecZone + "]</b>"))
            end if
        else if Proxima.globals.initMode == "local" then
            print(Proxima.utils.message.progress("Trying to exploit <b>" + targetExploit.lib_name + "</b> library."))
            libraryDump = Proxima.globals.metaxploit.load(targetExploit.path)
        end if
        print("+------------------------------------+")
        print(Proxima.utils.message.progress("Injecting values to the library..."))
        attackResult = libraryDump.overflow(targetExploit.memAddr, targetExploit.unsecZone)
        print("+------------------------------------+")
        self.handleAttackResult(attackResult)
    else
        print(Proxima.utils.message.error("No exploit found with specified ID. <b>[ID:" + self.targetExploit + "]</b>"))
    end if
end function

Proxima.exploit.autoExecute = function ()
    if self.targetExploits.len == 0 then
        print(Proxima.utils.message.error("No exploits available, please make a scan first."))
    else
        for targetExploit in self.targetExploits
            self.setTargetExploit(targetExploit.id)
            if self.targetExploit != 1 then
                print("+------------------------------------+")
            end if
            self.execute()
            if self.targetExploit - 1 == self.targetExploits.len then
                print("+------------------------------------+")
            end if
        end for
    end if
end function

Proxima.exploit.displayPortInfo = function ()
    header_list = ["ID", "PORT", "STATE", "SERVICE", "VERSION", "LAN_IP"]
    content_list = []
    for targetPort in self.targetPorts
        p_id = str(targetPort.id)
        p_number = str(targetPort.port_number)
        p_state = targetPort.state
        p_service = targetPort.service
        p_version = targetPort.version
        p_ip = targetPort.lan_ip
        content_list.push([ p_id , p_number , p_state , p_service , p_version , p_ip ])
    end for

    Proxima.utils.display_list(header_list, content_list)
end function

Proxima.exploit.displayLibraryInfo = function ()
    header_list = ["ID", "LIBRARY_NAME", "VERSION", "PATH"]
    content_list = []
    for targetLibrary in self.targetLibraries
        l_id = str(targetLibrary.id)
        l_name = targetLibrary.lib_name
        l_version = targetLibrary.version
        l_path = targetLibrary.path
        content_list.push([ l_id, l_name , l_version , l_path ])
    end for

    Proxima.utils.display_list(header_list, content_list)
end function

Proxima.exploit.displayExploitInfo = function ()
    isLocal = false
    if Proxima.globals.initMode == "local" then isLocal = true

    header_list = []
    if isLocal then
        header_list = ["ID", "LIBRARY_NAME", "VERSION", "MEM_ADDRESS", "UNSEC_ZONE"]
    else
        header_list = ["ID", "PORT", "MEM_ADDRESS", "UNSEC_ZONE"]
    end if

    content_list = []
    for targetExploit in self.targetExploits
        e_id = str(targetExploit.id)
        e_mem = targetExploit.memAddr
        e_uz = targetExploit.unsecZone
        if isLocal then
            e_name = targetExploit.lib_name
            e_version = targetExploit.version
            content_list.push([ e_id , e_name , e_version , e_mem , e_uz ])
        else
            e_port_number = str(targetExploit.port_number)
            content_list.push([ e_id , e_port_number , e_mem , e_uz ])
        end if
    end for

    Proxima.utils.display_list(header_list, content_list)
end function

Proxima.utils.message.colorize = function (txt, color)
    return "<color=" + color + ">" + txt + "</color>"
end function

Proxima.utils.message.info = function (txt)
    return self.colorize("[i] " + txt, "#0091FF")
end function

Proxima.utils.message.progress = function (txt)
    return self.colorize("[*] " + txt, "#00FFBB")
end function

Proxima.utils.message.warning = function (txt)
    return self.colorize("[!] " + txt, "#FFDD00")
end function

Proxima.utils.message.error = function (txt)
    return self.colorize("[!] " + txt, "#FF1548")
end function

Proxima.utils.message.success = function (txt)
    return self.colorize("[+] " + txt, "#08FF57")
end function

Proxima.utils.display_list = function (header_list, content_list)
    max_lengths = []
    for i in header_list
        max_len = i.len
        for row in content_list
            if row[header_list.indexOf(i)].len > max_len then max_len = row[header_list.indexOf(i)].len
        end for
        max_lengths.push(max_len)
    end for

    pad_right = function(str, length)
        padding = " " * (length - str.len)
        return str + padding
    end function

    separator = "+"
    header_row = "|"
    for i in header_list
        idx = header_list.indexOf(i)
        separator = separator + "-" * (max_lengths[idx] + 2) + "+"
        header_row = header_row + " " + pad_right(i, max_lengths[idx]) + " |"
    end for
    print(separator)
    print(header_row)
    print(separator)

    for row in content_list
        row_str = "|"
        for i in header_list
            idx = header_list.indexOf(i)
            row_str = row_str + " " + pad_right(row[idx], max_lengths[idx]) + " |"
        end for
        print(row_str)
        print(separator)
    end for
end function

Proxima.utils.collect_files = function (parentDir)
    all_files = []

    scan_dir = function (dir)
        files = dir.get_files
        if files.len > 0 then
            for file in files
                all_files.push(file.path)
            end for
        end if
        folders = dir.get_folders
        if folders.len > 0 then
            for folder in folders  
                scan_dir(folder)
            end for
        end if
    end function

    scan_dir(parentDir)

    return all_files
end function

Proxima.load_metaxploit = function ()
    isValidLocation = false
    for location in self.globals.metaxploitLocations
        includeMetaxploit = include_lib(location)
        if includeMetaxploit != null then
            self.globals.metaxploit = includeMetaxploit
            isValidLocation = true
            break
        end if
    end for
    if isValidLocation then
        print(self.utils.message.success("<b>metaxploit.so</b> is loaded."))
    else
        exit(self.utils.message.error("Unable to find <b>metaxploit.so</b> library."))
    end if
end function

Proxima.load_crypto = function ()
    isValidLocation = false
    for location in self.globals.cryptoLocations
        includeCrypto = include_lib(location)
        if includeCrypto != null then
            self.globals.crypto = includeCrypto
            isValidLocation = true
            break
        end if
    end for
    if isValidLocation then
        print(self.utils.message.success("<b>crypto.so</b> is loaded."))
    else
        exit(self.utils.message.error("Unable to find <b>crypto.so</b> library."))
    end if
end function

Proxima.initialize = function (initMode)
    self.globals.initMode = initMode
    self.globals.myPC = get_shell.host_computer

    if self.globals.initMode != "network" then self.load_metaxploit()
    self.load_crypto()
end function

Proxima.start_cli = function ()
    while true
        cliMarker = self.utils.message.colorize("[" + self.globals.myPC.public_ip + "]", "#FFC466") + self.utils.message.colorize("@", "#0091FF") + self.utils.message.colorize("> ", "#08FF57")
        command = user_input(cliMarker, false, false).trim
        self.handle_command(command)
    end while
end function

Proxima.handle_command = function (command)
    parts = split(command, " ")
    cmd = parts[0]
    parts.remove(0)
    params = parts

    isLocal = false
    if self.globals.initMode == "local" then isLocal = true

    if cmd == "scan" then
        if params.len == 0 then
            if isLocal then
                self.exploit.checkLibraries()
                self.exploit.displayLibraryInfo()
            else
                print(self.utils.message.error("No IP address provided for scan. Usage: scan <IP>"))
            end if
        else
            if isLocal then
                print(self.utils.message.error("This command takes no parameter. Usage: scan"))
            else        
                self.exploit.setTargetIP(params[0])
                if not self.exploit.checkPorts() then
                    print(self.utils.message.error("Given IP address is not a valid one!"))
                else
                    self.exploit.displayPortInfo()
                end if
            end if
        end if
    else if cmd == "scanport" then
        if isLocal then
            print(self.utils.message.error("Unknown command. Available commands: scan, scanlib <ID|all>, vulnlist, exploit <ID|all>, exit"))
        else
            if params.len == 0 then
                if self.exploit.targetPorts.len == 0 then
                    print(self.utils.message.error("No ports available, please make a scan first."))
                else
                    print(self.utils.message.error("No port provided for scan. Usage: scanport <ID|all>"))
                end if
            else
                if params[0] == "all" then
                    self.exploit.scanPorts()
                else
                    self.exploit.setTargetPort(params[0].to_int)
                    self.exploit.scanPort()
                end if
            end if
        end if
    else if cmd == "scanlib" then
        if isLocal then
            if params.len == 0 then
                if self.exploit.targetLibraries.len == 0 then
                    print(self.utils.message.error("No libraries available, please make a scan first."))
                else
                    print(self.utils.message.error("No library provided for scan. Usage: scanlib <ID|all>"))
                end if
            else
                if params[0] == "all" then
                    self.exploit.scanLibraries()
                else
                    self.exploit.setTargetLibrary(params[0].to_int)
                    self.exploit.scanLibrary()
                end if
            end if
        else
            print(self.utils.message.error("Unknown command. Available commands: scan <IP>, scanport <ID|all>, vulnlist, exploit <ID|all>, exit"))
        end if
    else if cmd == "exploit" then
        if params.len == 0 then
            if self.exploit.targetExploits.len == 0 then
                print(self.utils.message.error("No exploits available, please make a scan first."))
            else
                print(self.utils.message.error("No exploit ID provided. Usage: exploit <ID|all>"))
            end if
        else
            if params[0] == "all" then
                self.exploit.autoExecute()
            else
                self.exploit.setTargetExploit(params[0].to_int)
                self.exploit.execute()
            end if
        end if
    else if cmd == "vulnlist" then
        if self.exploit.targetExploits.len > 0 then
            self.exploit.displayExploitInfo()
        else
            print(self.utils.message.error("No exploits available, please scan a port first."))
        end if
    else if cmd == "exit" then
        exit(self.utils.message.success("Goodbye!"))
    else
        if isLocal then
            print(self.utils.message.error("Unknown command. Available commands: scan, scanlib <ID|all>, vulnlist, exploit <ID|all>, exit"))
        else
            print(self.utils.message.error("Unknown command. Available commands: scan <IP>, scanport <ID|all>, vulnlist, exploit <ID|all>, exit"))
        end if
    end if
end function