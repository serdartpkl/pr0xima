Proxima.apt={}
// ------------------------------------------------------------------------------------------------------------
Proxima.apt.checkSourcesFile=function
return Proxima.globals.myPC.File("/etc/apt/sources.txt")
end function
Proxima.apt.getRepositories=function(sourcesFile)
repositoryIPs=[]
if sourcesFile!=null then
deserializedSource=Proxima.serialization.deserializeMap(sourcesFile.get_content)
if deserializedSource.sourceList.len>0 then
for repositoryIP in deserializedSource.sourceList.indexes
repositoryIPs.push(repositoryIP)
end for
end if
end if
return repositoryIPs
end function
Proxima.apt.checkRepository=function(repositoryIP)
checkSourcesFile=self.checkSourcesFile
if checkSourcesFile!=null then
if self.getRepositories(checkSourcesFile).indexOf(repositoryIP)!=null then return true
end if
return null
end function
Proxima.apt.addRepository=function(repositoryIP)
if self.checkRepository(repositoryIP)==null then
addRepo=Proxima.globals.aptclient.add_repo(repositoryIP)
Proxima.io.clearScreen
wait(0.5)
if addRepo=="" then return true
end if
return null
end function
Proxima.apt.deleteRepository=function(repositoryIP)
if self.checkRepository(repositoryIP) then
delRepo=Proxima.globals.aptclient.del_repo(repositoryIP)
Proxima.io.clearScreen
wait(0.5)
if delRepo=="" then return true
end if
return null
end function
Proxima.apt.getPackageList=function(repositoryIP)
if self.checkRepository(repositoryIP) then
repositoryPackages=Proxima.globals.aptclient.show(repositoryIP)
packageList=repositoryPackages.split(char(10)+char(10))
packageList.pop
packageList.pop
parsedList=[]
for packageItem in packageList
itemEntry=packageItem.split(char(10))
packageName=itemEntry[0]
packageName=packageName.replace("<b>","")
packageName=packageName.replace("</b>","")
parsedList.push(packageName)
end for
return parsedList
end if
return null
end function
Proxima.apt.updateRepositoryInformation=function
updateRepoInfo=Proxima.globals.aptclient.update
Proxima.io.clearScreen
wait(0.5)
if updateRepoInfo=="" then return true
return null
end function
Proxima.apt.isValidShop=function(repositoryIP)
isValidShop=false
repoPorts=[]
if is_valid_ip(repositoryIP) then
getRepoPorts=get_router(repositoryIP).used_ports
if getRepoPorts.len>0 then repoPorts=getRepoPorts
end if
repoServices=[]
if repoPorts.len>0 then
for repoPort in repoPorts
serviceName=get_router(repositoryIP).port_info(repoPort).split(" ")[0]
if is_closed(repoPort)!=true then repoServices.push(serviceName)
end for
end if
if repoServices.indexOf("repository")!=null then
if self.checkRepository(repositoryIP)==null then
addRepo=self.addRepository(repositoryIP)
if addRepo==null then return null
end if
if self.updateRepositoryInformation then
repoPackageList=self.getPackageList(repositoryIP)
if repoPackageList!=null and repoPackageList.indexOf("metaxploit.so")!=null and repoPackageList.indexOf("crypto.so")!=null then isValidShop=true
end if
end if
if self.deleteRepository(repositoryIP) and isValidShop then return repositoryIP
return null
end function
Proxima.apt.findShop=function
shopIP=null
while shopIP==null
generatedIP=Proxima.helpers.generateRandomIP
isValidShop=self.isValidShop(generatedIP)
if typeof(isValidShop)=="string" then shopIP=generatedIP
end while
if shopIP!=null then return shopIP
return null
end function
Proxima.apt.checkForUpdates=function
pendingForUpdate=[]
libraryFiles=Proxima.helpers.collectFiles("/lib")
for acquiredFile in libraryFiles
isUpdateAvailable=Proxima.globals.aptclient.check_upgrade(acquiredFile)
Proxima.io.clearScreen
wait(0.5)
if isUpdateAvailable then
libraryName=acquiredFile.split("/")[-1]
pendingForUpdate.push(libraryName)
end if
end for
if pendingForUpdate.len>0 then return pendingForUpdate
return null
end function
Proxima.apt.updateLibraries=function(pendingList)
statusMap={"succeed":[],"failed":[]}
for pendingLibrary in pendingList
updateLibrary=Proxima.globals.aptclient.install(pendingLibrary)
Proxima.io.clearScreen
wait(0.5)
if updateLibrary==1 then
statusMap.succeed.push(pendingLibrary)
else
statusMap.failed.push(pendingLibrary)
end if
end for
return statusMap
end function