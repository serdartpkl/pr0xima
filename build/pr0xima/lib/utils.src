Proxima.utils={}
Proxima.utils.formatList=function(headerList,contentList)
maxLengths=[]
for i in headerList
maxLen=i.len
for row in contentList
if row[headerList.indexOf(i)].split("#")!=null then
if row[headerList.indexOf(i)].split("#")[0].len>maxLen then maxLen=row[headerList.indexOf(i)].split("#")[0].len
else
if row[headerList.indexOf(i)].len>maxLen then maxLen=row[headerList.indexOf(i)].len
end if
end for
maxLengths.push(maxLen)
end for
padRight=function(str,length,rowColor)
padding=" "*(length-str.len)
if rowColor!=null then
return Proxima.cli.message.colorize(str+padding,"#"+rowColor)
else
return str+padding
end if
end function
separator="+"
headerRow="|"
for i in headerList
idx=headerList.indexOf(i)
separator=separator+"-"*(maxLengths[idx]+2)+"+"
headerRow=headerRow+" "+padRight(i,maxLengths[idx],null)+" |"
end for
print(Proxima.cli.addOutputEntry(separator))
print(Proxima.cli.addOutputEntry(headerRow))
print(Proxima.cli.addOutputEntry(separator))
for row in contentList
rowStr="|"
for i in headerList
idx=headerList.indexOf(i)
splitRow=row[idx].split("#")
rowColor=null
if splitRow.len>1 then
row[idx]=splitRow[0]
rowColor=splitRow[1]
end if
rowStr=rowStr+" "+padRight(row[idx],maxLengths[idx],rowColor)+" |"
end for
print(Proxima.cli.addOutputEntry(rowStr))
print(Proxima.cli.addOutputEntry(separator))
end for
end function
Proxima.utils.mapHasValue=function(givenList,searchKey,searchValue)
hasFoundValue=false
if givenList.len>0 then
for mapItem in givenList
for key in mapItem.indexes
if key==searchKey and mapItem[key]==searchValue then
hasFoundValue=true
break
end if
end for
end for
end if
return hasFoundValue
end function
Proxima.utils.collectFiles=function(parentDir)
allFiles=[]
scanDir=function(dir)
files=dir.get_files
if files.len>0 then
for file in files
allFiles.push(file.path)
end for
end if
folders=dir.get_folders
if folders.len>0 then
for folder in folders
scanDir(folder)
end for
end if
end function
scanDir(parentDir)
return allFiles
end function