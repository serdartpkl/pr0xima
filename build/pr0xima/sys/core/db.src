Proxima.db={}
// ------------------------------------------------------------------------------------------------------------
Proxima.db.getDatabases=function
databaseFiles=Proxima.globals.myPC.File(home_dir+"/pr0xima/databases").get_files
if databaseFiles.len>0 then
databaseList=[]
idCounter=1
for databaseFile in databaseFiles
databaseMap={}
databaseMap.id=idCounter
databaseMap.name=databaseFile.name.replace(".db","")
databaseList.push(databaseMap)
idCounter=idCounter+1
end for
return databaseList
end if
return null
end function
Proxima.db.getDatabase=function(databaseName)
databaseFile=Proxima.globals.myPC.File(home_dir+"/pr0xima/databases/"+databaseName+".db")
if databaseFile!=null and databaseFile.get_content!="" then return databaseFile
return null
end function
Proxima.db.createDatabase=function(databaseName)
if self.getDatabase(databaseName)==null then
createDatabaseFile=Proxima.globals.myPC.touch(home_dir+"/pr0xima/databases",databaseName+".db")
if typeof(createDatabaseFile)!="string" then
databaseFile=Proxima.globals.myPC.File(home_dir+"/pr0xima/databases/"+databaseName+".db")
setFileContent=databaseFile.set_content("{"+char(34)+"records"+char(34)+":[]}")
if setFileContent==1 then return true
end if
end if
return null
end function
// ------------------------------------------------------------------------------------------------------------
Proxima.db.getRecords=function(databaseName)
databaseFile=self.getDatabase(databaseName)
if databaseFile!=null then return Proxima.utils.deserializeMap(databaseFile.get_content).records
return null
end function
Proxima.db.setRecords=function(databaseName,databaseRecords)
databaseFile=self.getDatabase(databaseName)
if databaseFile!=null then
serializedRecords=Proxima.utils.serializeMap({"records":databaseRecords})
setRecords=databaseFile.set_content(serializedRecords)
if setRecords==1 then return true
end if
return null
end function
Proxima.db.resetRecords=function(databaseName)
databaseFile=self.getDatabase(databaseName)
if databaseFile!=null then
setRecords=self.setRecords(databaseName,[])
if setRecords then return true
end if
return null
end function
Proxima.db.reorderRecords=function(databaseName,databaseRecords,sortBy=null)
databaseFile=self.getDatabase(databaseName)
if databaseFile!=null then
if sortBy!=null then databaseRecords.sort(sortBy)
idCounter=1
for recordIndex in range(0,databaseRecords.len-1)
if databaseRecords[recordIndex].id!=idCounter then databaseRecords[recordIndex].id=idCounter
idCounter=idCounter+1
end for
setRecords=self.setRecords(databaseName,databaseRecords)
if setRecords==1 then return true
end if
return null
end function
Proxima.db.searchRecords=function(databaseName,recordKey,recordValue)
acquiredRecords=self.getRecords(databaseName)
if acquiredRecords!=null then return Proxima.utils.indexesOf(acquiredRecords,recordKey,recordValue)
return null
end function
Proxima.db.addRecord=function(databaseName,recordMap,sortBy=null)
acquiredRecords=self.getRecords(databaseName)
if acquiredRecords!=null then
if recordMap.hasIndex("dateCreated")==0 then recordMap.dateCreated=Proxima.utils.getParsedDate
acquiredRecords.push({"id":acquiredRecords.len+1}+recordMap)
performAddition=null
if acquiredRecords.len>1 then
performAddition=self.reorderRecords(databaseName,acquiredRecords,sortBy)
else if acquiredRecords.len==1 then
performAddition=self.setRecords(databaseName,acquiredRecords)
end if
if performAddition then return true
end if
return null
end function
Proxima.db.updateRecord=function(databaseName,recordID,recordMap,sortBy=null)
acquiredRecords=self.getRecords(databaseName)
if acquiredRecords!=null then
recordIndex=self.searchRecords(databaseName,"id",recordID)
if recordIndex!=null and acquiredRecords.hasIndex(recordIndex) then
acquiredRecords[recordIndex]=recordMap
reorderRecords=self.setRecords(databaseName,acquiredRecords)
if reorderRecords then return true
end if
end if
end function
Proxima.db.deleteRecord=function(databaseName,recordID,sortBy=null)
acquiredRecords=self.getRecords(databaseName)
if acquiredRecords!=null then
recordIndex=self.searchRecords(databaseName,"id",recordID)
if recordIndex!=null and acquiredRecords.hasIndex(recordIndex) then
acquiredRecords.remove(recordIndex)
reorderRecords=self.reorderRecords(databaseName,acquiredRecords,sortBy)
if reorderRecords then return true
end if
end if
return null
end function
// ------------------------------------------------------------------------------------------------------------
Proxima.db.getRecordValue=function(databaseName,recordID,recordKey)
acquiredRecords=self.getRecords(databaseName)
if acquiredRecords!=null then
recordIndex=self.searchRecords(databaseName,"id",recordID)
if recordIndex!=null then
if acquiredRecords[recordIndex].hasIndex(recordKey) then return acquiredRecords[recordIndex][recordKey]
end if
end if
return null
end function
Proxima.db.setRecordValue=function(databaseName,recordID,recordKey,recordValue)
acquiredRecords=self.getRecords(databaseName)
if acquiredRecords!=null then
recordIndex=self.searchRecords(databaseName,"id",recordID)
if recordIndex!=null then
if acquiredRecords[recordIndex].hasIndex(recordKey) then
acquiredRecords[recordIndex][recordKey]=recordValue
setRecords=self.setRecords(databaseName,acquiredRecords)
if setRecords then return true
end if
end if
end if
return null
end function
// ------------------------------------------------------------------------------------------------------------
Proxima.db.displayDatabases=function
headerList=["ID","DATABASE_NAME"]
contentList=[]
acquiredDatabases=self.getDatabases
for acquiredDatabase in acquiredDatabases
s_id=str(acquiredDatabase.id)
s_name=acquiredDatabase.name
contentList.push([s_id,s_name])
end for
Proxima.utils.formatList(headerList,contentList)
end function
Proxima.db.displayRecords=function(databaseName,nameKey)
headerList=["ID","RECORD_NAME","DATABASE_NAME","DATE_CREATED"]
contentList=[]
acquiredRecords=self.getRecords(databaseName)
for acquiredRecord in acquiredRecords
r_id=str(acquiredRecord.id)
r_name=acquiredRecord[nameKey]
r_db_name=databaseName
r_date=acquiredRecord["dateCreated"]
contentList.push([r_id,r_name,r_db_name,r_date])
end for
Proxima.utils.formatList(headerList,contentList)
end function