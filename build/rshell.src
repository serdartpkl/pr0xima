Proxima.rshell={}
// ------------------------------------------------------------------------------------------------------------
Proxima.rshell.checkRshells=function
recievedShells=Proxima.globals.metaxploit.rshell_server
if recievedShells!=null and typeof(recievedShells)!="string" then
if recievedShells.len>0 then return recievedShells
end if
return null
end function
Proxima.rshell.getRshell=function(targetIP)
activeRshells=self.checkRshells
if activeRshells!=null and is_valid_ip(targetIP) then
for activeRshell in activeRshells
publicIP=activeRshell.host_computer.public_ip
if targetIP==publicIP then return activeRshell
end for
end if
return activeRshells
end function
Proxima.rshell.launchRshell=function(targetIP)
if is_valid_ip(targetIP)==0 then exit(Proxima.io.output.error("Given IP address is not valid! Terminating program..."))
Proxima.io.clearScreen
Proxima.io.printInformation("pr0rsc","Automatic reverse shell connector.")
print(Proxima.io.addOutputEntry(Proxima.io.output.line))
includeLibraries=Proxima.engine.includeLibraries(["metaxploit.so"])
if includeLibraries["metaxploit.so"]!=null then
Proxima.globals.metaxploit=includeLibraries["metaxploit.so"]
print(Proxima.io.addOutputEntry(Proxima.io.output.success("Loaded <b>metaxploit.so</b> library successfully!")))
else
exit(Proxima.io.output.error("Couldn't load <b>metaxploit.so</b> library."))
end if
acquiredShell=self.getRshell(targetIP)
if typeof(acquiredShell)=="shell" then
print(Proxima.io.addOutputEntry(Proxima.io.output.success("Found reverse shell connection!")))
print(Proxima.io.addOutputEntry(Proxima.io.output.progress("Connecting to reverse shell... <b>[IP:"+targetIP+"]</b>")))
acquiredShell.start_terminal
else
exit(Proxima.io.output.error("No reverse shell connection found with given IP! <b>[IP:"+targetIP+"]</b>"))
end if
end function