Proxima.cli = {}

Proxima.cli.cliString = null
Proxima.cli.cliEntries = []

Proxima.cli.message = {}
Proxima.cli.message.line = "+----------------------------------------------------+"

// ------------------------------------------------------------------------------------------------------------

Proxima.cli.message.colorize = function (txt, color)
    return "<color=" + color + ">" + txt + "</color>"
end function

Proxima.cli.message.info = function (txt)
    return self.colorize("[i] " + txt, "#0091FF")
end function

Proxima.cli.message.progress = function (txt)
    return self.colorize("[*] " + txt, "#00FFBB")
end function

Proxima.cli.message.warning = function (txt)
    return self.colorize("[!] " + txt, "#FFDD00")
end function

Proxima.cli.message.error = function (txt)
    return self.colorize("[!] " + txt, "#FF1548")
end function

Proxima.cli.message.success = function (txt)
    return self.colorize("[+] " + txt, "#08FF57")
end function

// ------------------------------------------------------------------------------------------------------------

Proxima.cli.addInputEntry = function (userCommand)
    self.cliEntries.push(self.cliString + userCommand)
end function

Proxima.cli.addOutputEntry = function (outputString)
    self.cliEntries.push(outputString)
    return outputString
end function

Proxima.cli.addProgressBar = function ()
    self.cliEntries.push("[###################################]==[ 100% ]")
end function

Proxima.cli.addTransferProcess = function (fileSize)
    if fileSize.to_int >= 1000000000 then
        fileSizeGB = round((fileSize.to_int / 1000000000) * 10) / 10
        if fileSizeGB == round(fileSizeGB) then
            fileSizeGB = fileSizeGB + ".0 GB"
        else
            fileSizeGB = fileSizeGB + " GB"
        end if
        self.cliEntries.push("100%    " + str(floor(rnd * (900 - 50 + 1) + 50)) + "." + str(floor(rnd * (9 - 1 + 1) + 1)) + " KB/s" + "    0 sec (" + fileSizeGB + " of " + fileSizeGB + " copied)")
    else if fileSize.to_int >= 1000 then
        fileSizeMB = round((fileSize.to_int / 1000000) * 10) / 10 
        if fileSizeMB == round(fileSizeMB) then
            fileSizeMB = fileSizeMB + ".0 MB"
        else
            fileSizeMB = fileSizeMB + " MB"
        end if
        self.cliEntries.push("100%    " + str(floor(rnd * (900 - 50 + 1) + 50)) + "." + str(floor(rnd * (9 - 1 + 1) + 1)) + " KB/s" + "    0 sec (" + fileSizeMB + " of " + fileSizeMB + " copied)")
    else
        fileSize = fileSize + " Bytes"
        self.cliEntries.push("100%    " + str(floor(rnd * (900 - 50 + 1) + 50)) + "." + str(floor(rnd * (9 - 1 + 1) + 1)) + " KB/s" + "    0 sec (" + fileSize + " of " + fileSize + " copied)")
    end if
    self.cliEntries.push("Processing...")
end function

Proxima.cli.clearCLI = function ()
    clear_screen
    if self.cliEntries.len > 0 then
        for cliEntry in self.cliEntries
            print(cliEntry)
        end for
    end if
end function

// ------------------------------------------------------------------------------------------------------------

Proxima.cli.throwCLIError = function (cmdMessage = null, cmdUsage = null)
    if cmdMessage != null then 
        if cmdUsage != null then
            print(self.addOutputEntry(self.message.error(cmdMessage + " Usage: " + cmdUsage)))
        else
            print(self.addOutputEntry(self.message.error(cmdMessage)))
        end if
    else
        print(self.addOutputEntry(self.message.error("Unknown command! Type <b>help</b> to list available commands.")))
    end if
end function

Proxima.cli.printCLIHeader = function ()
    print(self.addOutputEntry(self.message.colorize("<b>              _______         .__                </b>", "#FC8403")))
    print(self.addOutputEntry(self.message.colorize("<b>_____________ \   _  \ ___  __|__| _____ _____   </b>", "#FC8403")))
    print(self.addOutputEntry(self.message.colorize("<b>\____ \_  __ \/  /_\  \\  \/  /  |/     \\__  \  </b>", "#FC8403")))
    print(self.addOutputEntry(self.message.colorize("<b>|  |_> >  | \/\  \_/   \>    <|  |  Y Y  \/ __ \_</b>", "#FC8403")))
    print(self.addOutputEntry(self.message.colorize("<b>|   __/|__|    \_____  /__/\_ \__|__|_|  (____  /</b>", "#FC8403")))
    print(self.addOutputEntry(self.message.colorize("<b>|__|                 \/      \/        \/     \/ </b>", "#FC8403")))
    print(self.addOutputEntry(""))
    print(self.addOutputEntry(self.message.colorize("<b>pr0xima â€” v" + Proxima.globals.version + "</b>", "#FFC466")))
    print(self.addOutputEntry(self.message.colorize("<b>A simple easy-to-use multi purpose hacking tool</b>", "#FFFFFF")))
end function

Proxima.cli.loadAptClient = function (output = true)
    isValidLocation = false
    for location in Proxima.settings.cryptoLocations
        includeAptClient = include_lib(location)
        if includeAptClient != null then
            Proxima.globals.aptclient = includeAptClient
            isValidLocation = true
            break
        end if
    end for
    if isValidLocation then
        if output then print(self.addOutputEntry(self.message.success("<b>aptclient.so</b> is loaded.")))
    else
        exit(self.message.error("Unable to find <b>aptclient.so</b> library."))
    end if
    return isValidLocation
end function

Proxima.cli.loadCrypto = function (output = true)
    isValidLocation = false
    for location in Proxima.settings.cryptoLocations
        includeCrypto = include_lib(location)
        if includeCrypto != null then
            Proxima.globals.crypto = includeCrypto
            isValidLocation = true
            break
        end if
    end for
    if isValidLocation then
        if output then print(self.addOutputEntry(self.message.success("<b>crypto.so</b> is loaded.")))
    else
        exit(self.message.error("Unable to find <b>crypto.so</b> library."))
    end if
    return isValidLocation
end function

Proxima.cli.loadMetaxploit = function (output = true)
    isValidLocation = false
    for location in Proxima.settings.metaxploitLocations
        includeMetaxploit = include_lib(location)
        if includeMetaxploit != null then
            Proxima.globals.metaxploit = includeMetaxploit
            isValidLocation = true
            break
        end if
    end for
    if isValidLocation then
        if output then print(self.addOutputEntry(self.message.success("<b>metaxploit.so</b> is loaded.")))
    else
        exit(self.message.error("Unable to find <b>metaxploit.so</b> library."))
    end if
    return isValidLocation
end function

Proxima.cli.loadLibraries = function (output = true)
    if output then print(self.addOutputEntry(self.message.line))
    self.loadAptClient(output)
    self.loadCrypto(output)
    self.loadMetaxploit(output)
    if output then print(self.addOutputEntry(self.message.line))
end function