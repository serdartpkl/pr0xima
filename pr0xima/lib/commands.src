Proxima.commands = {}

Proxima.commands.target = {
    "name": "target",
    "description": "Sets the target IP address for scanning.",
    "usage": "target <IP>",
    "type": "remote"
}
Proxima.commands.target.exec = function (params)
    if Proxima.utils.is_local() then
        Proxima.utils.throw_cli_error()
    else
        if params.len == 0 then
            Proxima.utils.throw_cli_error("No IP address provided for scan.", self.usage)
        else       
            Proxima.exploit.setTargetIP(params[0])
            if Proxima.exploit.checkPorts() == null then
                Proxima.utils.throw_cli_error("Given IP address is not valid or does not exist! Please try another one...")
            else if Proxima.exploit.checkPorts() == false then
                Proxima.utils.throw_cli_error("No open ports found on given IP address!")
            else
                Proxima.exploit.displayPortInfo()
            end if
        end if
    end if
end function

Proxima.commands.dump = {
    "name": "dump",
    "description": "Dumps all local libraries and their information.",
    "usage": "dump",
    "type": "local"
}
Proxima.commands.dump.exec = function (params)
    if Proxima.utils.is_local() then
        if params.len > 0 then
            Proxima.utils.throw_cli_error("This command takes no arguements.", self.usage)
        else
            Proxima.exploit.checkLibraries()
            Proxima.exploit.displayLibraryInfo()
        end if
    else
        Proxima.utils.throw_cli_error()
    end if
end function

Proxima.commands.scan = {
    "name": "scan",
    "description": "Scans the specified port or library.",
    "usage": "scan <Type> <ID|all>",
    "type": "both"
}
Proxima.commands.scan.exec = function (params)
    if params.len == 0 then
        Proxima.utils.throw_cli_error("No scan type provided.", self.usage)
    else
        if params[0] == "port" then
            if Proxima.utils.is_local() then
                Proxima.utils.throw_cli_error("Unknown scan type.", self.usage)
            else
                if params.len < 2 then
                    Proxima.utils.throw_cli_error("No port ID provided.", self.usage)
                else
                    if params[1] == "all" then
                        Proxima.exploit.scanPorts()
                    else
                        Proxima.exploit.setTargetPort(params[1].to_int)
                        Proxima.exploit.scanPort()
                    end if
                end if
            end if
        else if params[0] == "lib" then
            if Proxima.utils.is_local() then
                if params.len < 2 then
                    Proxima.utils.throw_cli_error("No library ID provided.", self.usage)
                else
                    if params[1] == "all" then
                        Proxima.exploit.scanLibraries()
                    else
                        Proxima.exploit.setTargetLibrary(params[1].to_int)
                        Proxima.exploit.scanLibrary()
                    end if
                end if
            else
                Proxima.utils.throw_cli_error("Unknown scan type.", self.usage)
            end if
        else
            Proxima.utils.throw_cli_error("Unknown scan type.", self.usage)
        end if
    end if
end function

Proxima.commands.list = {
    "name": "list",
    "description": "Formats the given list and its information into a beautified table.",
    "usage": "list <Type>",
    "type": "both"
}
Proxima.commands.list.exec = function (params)
    if params.len == 0 then
        Proxima.utils.throw_cli_error("No listing type provided.", self.usage)
    else
        if params[0] == "ports" then
            if Proxima.utils.is_local() then
                Proxima.utils.throw_cli_error("Unknown listing type.", self.usage)
            else
                if Proxima.exploit.targetPorts.len > 0 then
                    Proxima.exploit.displayPortInfo()
                else
                    Proxima.utils.throw_cli_error("No ports available, please scan an IP address first.")
                end if
            end if
        else if params[0] == "libs" then
            if Proxima.utils.is_local() then
                if Proxima.exploit.targetLibraries.len > 0 then
                    Proxima.exploit.displayLibraryInfo()
                else
                    Proxima.utils.throw_cli_error("No libraries available, please perform a scan first.")
                end if
            else
                Proxima.utils.throw_cli_error("Unknown listing type.", self.usage)
            end if
        else if params[0] == "vulns" then
            if Proxima.exploit.targetExploits.len > 0 then
                Proxima.exploit.displayExploitInfo()
            else
                Proxima.utils.throw_cli_error("No exploits available, please scan a port first.")
            end if
        else if params[0] == "users" then
            if Proxima.exploit.targetUsers.len > 0 then
                Proxima.exploit.displayUserInfo()
            else
                Proxima.utils.throw_cli_error("No user information available, please execute an exploit first.")
            end if
        else if params[0] == "shells" then
            if Proxima.exploit.targetShells.len > 0 then
                Proxima.exploit.displayShellInfo()
            else
                Proxima.utils.throw_cli_error("No open shells available, please execute an exploit first.")
            end if
        else
            Proxima.utils.throw_cli_error("Unknown listing type.", self.usage)
        end if
    end if
end function

Proxima.commands.execute = {
    "name": "execute",
    "description": "Executes the specified exploit.",
    "usage": "execute <ID|all>",
    "type": "both"
}
Proxima.commands.execute.exec = function (params)
    if params.len == 0 then
        Proxima.utils.throw_cli_error("No exploit ID provided.", self.usage)
    else
        if params[0] == "all" then
            Proxima.exploit.autoExecute()
        else
            Proxima.exploit.setTargetExploit(params[0].to_int)
            Proxima.exploit.execute()
        end if
    end if
end function

Proxima.commands.connect = {
    "name": "connect",
    "description": "Connects to the specified shell found from executed exploits.",
    "usage": "connect <ID|ssh|ftp>",
    "type": "both"
}
Proxima.commands.connect.exec = function (params)
    if Proxima.utils.is_local() then
        
        if params.len == 0 then
            Proxima.utils.throw_cli_error("No shell ID or connection type provided.", self.usage)
        else
            if params[0] == "ssh" then
                Proxima.exploit.connectViaSSH()
            else if params[1] == "ftp" then
                Proxima.exploit.connectViaFTP()
            else
                Proxima.exploit.setTargetShell(params[0].to_int)
                Proxima.exploit.launchShell()
            end if
        end if
end function

Proxima.commands.decipher = {
    "name": "decipher",
    "description": "Deciphers password hashes from the user list found in executed exploits.",
    "usage": "decipher <ID|all>",
    "type": "both"
}
Proxima.commands.decipher.exec = function (params)
    if params.len == 0 then
        Proxima.utils.throw_cli_error("No user ID provided.", self.usage)
    else
        Proxima.exploit.setTargetUser(params[0].to_int)
        Proxima.exploit.decipherPassword()
    end if
end function

Proxima.commands.upload = {
    "name": "upload",
    "description": "Uploads tools from the specified folder to the specified target directory.",
    "usage": "upload",
    "type": "remote"
}
Proxima.commands.upload.exec = function (params)
    if Proxima.utils.is_local() then
        Proxima.utils.throw_cli_error()
    else
        Proxima.exploit.uploadTools()
    end if
end function

Proxima.commands.corrupt = {
    "name": "corrupt",
    "description": "Corrupts and reboots the remote or local computer and makes it unable to work.",
    "usage": "corrupt",
    "type": "both"
}
Proxima.commands.corrupt.exec = function (params)
    if Proxima.utils.is_local() then
        Proxima.utils.throw_cli_error()
    else
        Proxima.exploit.corruptComputer()
    end if
end function

Proxima.commands.get = {
    "name": "get",
    "description": "Transfers remote file to 'Downloads' directory.",
    "usage": "get <RemotePath>",
    "type": "remote"
}
Proxima.commands.get.exec = function (params)
    if Proxima.utils.is_local() then
        Proxima.utils.throw_cli_error()
    else
        if params.len == 0 then
            Proxima.utils.throw_cli_error("No remote file path provided.", self.usage)
        else
            Proxima.exploit.getRemoteFile(params[0])
        end if
    end if
end function

Proxima.commands.help = {
    "name": "help",
    "description": "Lists available commands.",
    "usage": "help",
    "type": "both"
}
Proxima.commands.help.exec = function (params)
    i = 0
    for command in Proxima.commands
        cmd = command.values[1]
        cmd_name = cmd.name
        cmd_description = cmd.description
        cmd_usage = cmd.usage
        print("<b>" + cmd_name + "</b>:")
        print(cmd_description)
        print("<b>Usage:</b> " + cmd_usage)

        if i != Proxima.commands.len - 1 then
            print("+------------------------------------+")
        end if

        i = i + 1
    end for
end function

Proxima.commands.clear = {
    "name": "clear",
    "description": "Clears the terminal screen.",
    "usage": "clear",
    "type": "both"
}
Proxima.commands.clear.exec = function (params)
    clear_screen
end function

Proxima.commands.exit = {
    "name": "exit",
    "description": "Exits from the program.",
    "usage": "exit",
    "type": "both"
}
Proxima.commands.exit.exec = function (params)
    exit(Proxima.utils.message.success("Goodbye! Have a nice day."))
end function