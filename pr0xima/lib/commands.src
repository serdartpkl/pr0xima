Proxima.commands = {}

Proxima.commands.isLocal = if Proxima.globals.initMode == "local" then return true else return false

Proxima.commands.target = {
    "name": "target",
    "description": "",
    "usage": "",
    "example": "",
    "type": ""
}
Proxima.commands.target.exec = function (params)
    // ...
end function

Proxima.commands.dump = {
    "name": "dump",
    "description": "",
    "usage": "",
    "example": "",
    "type": ""
}
Proxima.commands.dump.exec = function (params)
    // ...
end function

Proxima.commands.scan = {
    "name": "scan",
    "description": "",
    "usage": "",
    "example": "",
    "type": ""
}
Proxima.commands.scan.exec = function (params)
    if params.len == 0 then
        if Proxima.globals.initMode == "local" then
            Proxima.exploit.checkLibraries()
            Proxima.exploit.displayLibraryInfo()
        else
            print(self.utils.message.error("No scan type and provided. Usage: scan <type> <id|all>"))
        end if
    else
        if isLocal then
            print(self.utils.message.error("Too many arguements. Usage: scan"))
        else
            if params.len < 3 then
                if params[0] == "port" then
                    // ...
                else if params[0] == "lib" then
                    // ...
                else
                    // ...
                end if
            else
                // ...
            end if
        end if
    end if
end function

Proxima.commands.list = {
    "name": "list",
    "description": "",
    "usage": "",
    "example": "",
    "type": ""
}
Proxima.commands.list.exec = function (params)
    if params.len == 0 then
        print(self.utils.message.error("No exploit ID provided. Usage: exploit <ID|all>"))
    else
        if params[0] == "ports" then
            if self.isLocal then
                print(self.utils.message.error("Unknown command! Type <b>help</b> to list available commands."))
            else
                if Proxima.exploit.targetPorts.len > 0 then
                    Proxima.exploit.displayPortInfo()
                else
                    print(Proxima.utils.message.error("No ports available, please scan an IP address first."))
                end if
            end if
        else if params[0] == "libs" then
            if self.isLocal then
                if Proxima.exploit.targetLibraries.len > 0 then
                    Proxima.exploit.displayLibraryInfo()
                else
                    print(Proxima.utils.message.error("No libraries available, please perform a scan first."))
                end if
            else
                print(self.utils.message.error("Unknown command! Type <b>help</b> to list available commands."))
            end if
        else if params[0] == "vulns" then
            if Proxima.exploit.targetExploits.len > 0 then
                Proxima.exploit.displayExploitInfo()
            else
                print(Proxima.utils.message.error("No exploits available, please scan a port first."))
            end if
        else if params[0] == "users" then
            if Proxima.exploit.targetUsers.len > 0 then
                seProximalf.exploit.displayUserInfo()
            else
                print(Proxima.utils.message.error("No user information available, please execute an exploit first."))
            end if
        else if params[0] == "shells" then
            if Proxima.exploit.targetShells.len > 0 then
                Proxima.exploit.displayShellInfo()
            else
                print(Proxima.utils.message.error("No open shells available, please execute an exploit first."))
            end if
        else
            print(self.utils.message.error("No exploit ID provided. Usage: exploit <ID|all>"))
        end if
    end if
end function

Proxima.commands.execute = {
    "name": "execute",
    "description": "",
    "usage": "",
    "example": "",
    "type": ""
}
Proxima.commands.execute.exec = function (params)
    if params.len == 0 then
        print(self.utils.message.error("No exploit ID provided. Usage: exploit <ID|all>"))
    else
        if params[0] == "all" then
            self.exploit.autoExecute()
        else
            self.exploit.setTargetExploit(params[0].to_int)
            self.exploit.execute()
        end if
    end if
end function

Proxima.commands.connect = {
    "name": "connect",
    "description": "",
    "usage": "",
    "example": "",
    "type": ""
}
Proxima.commands.connect.exec = function (params)
    if params.len == 0 then
        print(self.utils.message.error("No shell ID provided. Usage: connect <ID>"))
    else
        self.exploit.setTargetShell(params[0].to_int)
        self.exploit.connectShell()
    end if
end function

Proxima.commands.decipher = {
    "name": "decipher",
    "description": "",
    "usage": "",
    "example": "",
    "type": ""
}
Proxima.commands.decipher.exec = function (params)
    if params.len == 0 then
        print(Proxima.utils.message.error("No user ID provided. Usage: decipher <ID|all>"))
    else
        if params[0] == "all" then
            Proxima.exploit.decipherPasswords()
        else
            Proxima.exploit.setTargetUser(params[0].to_int)
            Proxima.exploit.decipherPassword()
        end if
    end if
end function

Proxima.commands.upload = {
    "name": "upload",
    "description": "",
    "usage": "",
    "example": "",
    "type": ""
}
Proxima.commands.upload.exec = function (params)
    if self.isLocal then
        print(self.utils.message.error("Unknown command! Type <b>help</b> to list available commands."))
    else
        self.exploit.uploadTools()
    end if
end function

Proxima.commands.help = {
    "name": "help",
    "description": "",
    "usage": "",
    "example": "",
    "type": ""
}
Proxima.commands.help.exec = function (params)
    print(Proxima.)
    for command in Proxima.commands
        command = command.values[1]
        cmd_name = command.name
        cmd_description = command.description
        cmd_usage = command.usage
        cmd_example = command.example
        print("<b>" + cmd_name + "</b>:")
        print(cmd_description + "\n")
        print("Usage: " + cmd_usage + "\n")
    end for
end function

Proxima.commands.clear = {
    "name": "clear",
    "description": "",
    "usage": ""
}
Proxima.commands.clear.exec = function (params)
    clear_screen
end function

Proxima.commands.exit = {
    "name": "exit",
    "description": "",
    "usage": ""
}
Proxima.commands.exit.exec = function (params)
    exit(self.utils.message.success("Goodbye! Have a nice day."))
end function


// isLocal = false
// if self.globals.initMode == "local" then isLocal = true

// if cmd == "scan" then
//     if params.len == 0 then
//         if isLocal then
//             self.exploit.checkLibraries()
//             self.exploit.displayLibraryInfo()
//         else
//             print(self.utils.message.error("No IP address provided for scan. Usage: scan <IP>"))
//         end if
//     else
//         if isLocal then
//             print(self.utils.message.error("This command takes no parameter. Usage: scan"))
//         else        
//             self.exploit.setTargetIP(params[0])
//             if not self.exploit.checkPorts() then
//                 print(self.utils.message.error("Given IP address is not a valid one!"))
//             else
//                 self.exploit.displayPortInfo()
//             end if
//         end if
//     end if

// else if cmd == "scanport" then
//     if isLocal then
//         print(self.utils.message.error("Unknown command. Available commands: scan, scanlib <ID|all>, vulnlist, exploit <ID|all>, exit"))
//     else
//         if params.len == 0 then
//             print(self.utils.message.error("No port provided for scan. Usage: scanport <ID|all>"))
//         else
//             if params[0] == "all" then
//                 self.exploit.scanPorts()
//             else
//                 self.exploit.setTargetPort(params[0].to_int)
//                 self.exploit.scanPort()
//             end if
//         end if
//     end if

// else if cmd == "scanlib" then
//     if isLocal then
//         if params.len == 0 then
//             print(self.utils.message.error("No library provided for scan. Usage: scanlib <ID|all>"))
//         else
//             if params[0] == "all" then
//                 self.exploit.scanLibraries()
//             else
//                 self.exploit.setTargetLibrary(params[0].to_int)
//                 self.exploit.scanLibrary()
//             end if
//         end if
//     else
//         print(self.utils.message.error("Unknown command. Available commands: scan <IP>, scanport <ID|all>, vulnlist, exploit <ID|all>, exit"))
//     end if
    
// else if cmd == "exploit" then
//     if params.len == 0 then
//         print(self.utils.message.error("No exploit ID provided. Usage: exploit <ID|all>"))
//     else
//         if params[0] == "all" then
//             self.exploit.autoExecute()
//         else
//             self.exploit.setTargetExploit(params[0].to_int)
//             self.exploit.execute()
//         end if
//     end if
// else if cmd == "vulnlist" then
//     if self.exploit.targetExploits.len > 0 then
//         self.exploit.displayExploitInfo()
//     else
//         print(self.utils.message.error("No exploits available, please scan a port first."))
//     end if

// else if cmd == "shelllist" then
//     if self.exploit.targetShells.len > 0 then
//         self.exploit.displayShellInfo()
//     else
//         print(self.utils.message.error("No open shells available, please execute an exploit first."))
//     end if

// else if cmd == "userlist" then
//     if self.exploit.targetUsers.len > 0 then
//         self.exploit.displayUserInfo()
//     else
//         print(self.utils.message.error("No user information available, please execute an exploit first."))
//     end if

// else if cmd == "connect" then
//     if params.len == 0 then
//         print(self.utils.message.error("No shell ID provided. Usage: connect <ID>"))
//     else
//         self.exploit.setTargetShell(params[0].to_int)
//         self.exploit.connectShell()
//     end if

// else if cmd == "upload" then
//     if isLocal then
//         print(self.utils.message.error("Unknown command. Available commands: scan, scanlib <ID|all>, vulnlist, exploit <ID|all>, exit"))
//     else
//         self.exploit.uploadTools()
//     end if

// else if cmd == "decipher" then
//     if params.len == 0 then
//         print(self.utils.message.error("No user ID provided. Usage: decipher <ID|all>"))
//     else
//         if params[0] == "all" then
//             self.exploit.decipherPasswords()
//         else
//             self.exploit.setTargetUser(params[0].to_int)
//             self.exploit.decipherPassword()
//         end if
//     end if

// else if cmd == "exit" then
//     exit(self.utils.message.success("Goodbye!"))

// else
//     if isLocal then
//         print(self.utils.message.error("Unknown command. Available commands: scan, scanlib <ID|all>, vulnlist, exploit <ID|all>, exit"))
//     else
//         print(self.utils.message.error("Unknown command. Available commands: scan <IP>, scanport <ID|all>, vulnlist, exploit <ID|all>, exit"))
//     end if
// end if