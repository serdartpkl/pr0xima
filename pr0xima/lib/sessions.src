Proxima.sessions = {}

Proxima.sessions.activeSession = null
Proxima.sessions.targetSessions = []
Proxima.sessions.savedSessions = []

// ------------------------------------------------------------------------------------------------------------

Proxima.sessions.getSession = function (sessionID)
    acquiredSession = null
    if self.targetSessions.len > 0 then
        for targetSession in self.targetSessions
            if targetSession.id == sessionID then
                acquiredSession = targetSession
                break
            end if
        end for
    end if
    return acquiredSession
end function

Proxima.sessions.setSession = function (sessionID)
    acquiredSession = self.getSession(sessionID)
    if acquiredSession != null then
        self.activeSession = acquiredSession.id
    else
        return null
    end if
end function

Proxima.sessions.createSession = function (sessionType, targetIP, targetRouter)
    if Proxima.utils.mapHasValue(self.targetSessions, "targetIP", targetIP) == false then
        sessionMap = {}

        sessionMap.id = self.targetSessions.len + 1

        sessionMap.targetIP = targetIP
        sessionMap.targetRouter = targetRouter

        if sessionType == 0 then
            sessionMap.targetLibraries = []
            sessionMap.sessionType = sessionType
        else if sessionType == 1 then
            sessionMap.targetPorts = []
            sessionMap.sessionType = sessionType
        end if

        sessionMap.targetExploits = []
        sessionMap.targetShells = []
        sessionMap.targetUsers = []
        sessionMap.targetMails = []
        sessionMap.targetBanks = []

        sessionMap.payloadInjection = true

        sessionMap.autoSave = false 
        sessionMap.creationDate =  current_date
        
        self.targetSessions.push(sessionMap)
        self.setSession(sessionMap.id)
    else
        return null
    end if
end function

// ------------------------------------------------------------------------------------------------------------

Proxima.sessions.getSessionValue = function (sessionKey)
    acquiredSession = self.getSession(self.activeSession)
    if acquiredSession != null then
        return acquiredSession[sessionKey]
    else
        return null
    end if
end function

Proxima.sessions.setSessionValue = function (sessionKey, sessionValue)
    acquiredSession = self.getSession(self.activeSession)
    if acquiredSession != null then
        self.targetSessions[acquiredSession.id - 1][sessionKey] = sessionValue
    else
        return null
    end if
end function

// ------------------------------------------------------------------------------------------------------------

Proxima.sessions.getSessionFile = function (targetIP)
    fileName = targetIP.split(".")
    fileName = fileName.join("_")
    fileName = fileName + ".txt"
    // self.getSessionsFolder
    // if there is one ->
    sessionFile = Proxima.globals.myPC.File(Proxima.settings.sessionsFolder + "/" + fileName)
    if sessionFile != null then
        return sessionFile
    else
        return null
    end if
end function

Proxima.sessions.setSessionFile = function (targetIP, serializedMap)
    fileName = targetIP.split(".")
    fileName = fileName.join("_")
    fileName = fileName + ".txt"
    // self.getSessionsFolder
    // if there is one ->
    sessionFile = Proxima.globals.myPC.File(Proxima.settings.sessionsFolder + "/" + fileName)
    if sessionFile != null then
        setSessionFileContent = sessionFile.set_content(serializedMap)
        if setSessionFileContent != null and typeof(setSessionFileContent) != "string" then
            return true
        else
            return false
        end if
    else
        return null
    end if
end function

Proxima.sessions.createSessionFile = function (targetIP)
    fileName = targetIP.split(".")
    fileName = fileName.join("_")
    fileName = fileName + ".txt"
    // self.getSessionsFolder
    // if there is one ->
    createSessionFile = Proxima.globals.myPC.touch(Proxima.settings.sessionsFolder, fileName)
    if createSessionFile != null and typeof(createSessionFile) != "string" then
        return true
    else
        return null
    end if
end function

Proxima.sessions.getSessionsFolder = function ()
    // check if there is a sessions folder
    // if not return null, if there is one return true
end function

Proxima.sessions.createSessionsFolder = function ()
    // check if there is a sessions folder
    // if not create one and return true
    // if there is already a sessions folder, then return null
end function

Proxima.sessions.checkSavedSessions = function ()
    self.savedSessions = []
    sessionsFolder = self.getSessionsFolder()
    if sessionsFolder != null then
        savedSessionFiles = Proxima.utils.collectFiles(sessionsFolder.path)
        if savedSessionFiles.len > 0 then
            for sessionFile in savedSessionFiles
                fileContent = sessionFile.get_content()
                deserializedContent = Proxima.utils.deserializeMap(fileContent)
                self.savedSessions.push(deserializedContent)
            end for
            return true
        else
            return false
        end if
    else
        return null
    end if
end function

Proxima.sessions.reorderSavedSessions = function ()
    // check if saved sessions returns true
    // saved sessions does not have id,
    // so we will get saved sessions, then sort it with creation date
    // then will give id to then
    // push tem to savedSessions list
    // return true
    // if couldn't return false
end function

// ------------------------------------------------------------------------------------------------------------

Proxima.sessions.saveSession = function(sessionID, excludeKeys = [])
    acquiredSession = self.getSession(sessionID)
    if acquiredSession != null then

    else

    end if
    targetIP = targetSession.targetIP
    fileName = targetIP.split(".")
    fileName = fileName.join("_")
    fileName = fileName + ".txt"

    excludeKeys = ["targetRouter", "targetShells"]
    serializedMap = Proxima.utils.serializeMap(targetSession, excludeKeys)

    sessionsFolder = Proxima.globals.myPC.File(Proxima.settings.sessionsFolder)
    if sessionsFolder != null and is_folder(sessionsFolder) then
        sessionFile = Proxima.globals.myPC.File(sessionsFolder.path + "/" + fileName)
        if sessionFile != null and sessionFile.has_permission("w") then
            rewriteSessionInfo = sessionFile.set_content(serializedMap)
            if rewriteSessionInfo != null then
                return true
            else
                return false
            end if
        else
            createSessionFile = Proxima.globals.myPC.touch(sessionsFolder.path, fileName)
            if createSessionFile != null then
                getSessionFile = Proxima.globals.myPC.File(sessionsFolder.path + "/" + fileName)
                if getSessionFile != null and sessionFile.has_permission("w") then
                    rewriteSessionInfo = getSessionFile.set_content(serializedMap)
                    if rewriteSessionInfo != null then
                        return true
                    else
                        return false
                    end if
                else
                    return false
                end if
            end if
        end if
    else
        createSessionsFolder = Proxima.globals.myPC.touch(home_dir + "/Desktop", "Sessions")
        if createSessionsFolder != "" then
            createSessionFile = Proxima.globals.myPC.touch(home_dir + "/Desktop/Sessions", fileName)
            if createSessionFile != null then
                getSessionFile = Proxima.globals.myPC.File(home_dir + "/Desktop/Sessions/" + fileName)
                if getSessionFile != null then
                    rewriteSessionInfo = getSessionFile.set_content(serializedMap)
                else
                    return true
                end if
            else
                return false
            end if
        end if
    end if
end function

Proxima.sessions.loadSession = function(sessionID, excludeKeys = [])
    fileName = targetIP.split(".")
    fileName = targetIP.join("_")
    fileName = fileName + ".txt"

    acquiredSession = null

    sessionsFolder = Proxima.globals.myPC.File(Proxima.settings.sessionsFolder)
    if sessionsFolder != null and is_folder(sessionsFolder) and sessionFolder.has_permission("r") then
        sessionFile = Proxima.globals.myPC.File(sessionsFolder.path + "/" + filaName)
        if sessionFile != null and sessionFile.has_permission("r") then
            sessionInfo = sessionFile.get_content()
            if sessionInfo != null then
                acquiredSession = Proxima.utils.deserializeMap(sessionInfo, excludeKeys)
            end if
        end if
    end if

    return acquiredSession
end function

Proxima.sessions.deleteSession = function (sessionID, isSavedSession = false)
end function

// ------------------------------------------------------------------------------------------------------------

Proxima.sessions.pushMap = function (targetList, givenMap)
    acquiredSession = self.getSession(self.activeSession)
    if acquiredSession != null then
        self.targetSessions[acquiredSession.id - 1][targetList].push(givenMap)
    else
        return null
    end if
end function

// ------------------------------------------------------------------------------------------------------------

Proxima.sessions.colorizeSessionType = function (sessionType)
    if sessionType == 0 then
        return "LOCAL#FC8403"
    else if sessionType == 1 then
        return "REMOTE#FFC466"
    end if
end function

Proxima.sessions.displaySessionInfo = function ()
    header_list = ["ID", "TARGET_IP", "TYPE"]
    content_list = []
    for targetSession in self.targetSessions 
        addColor = null
        if self.activeSession == targetSession.id then addColor = "#08FF57"
        s_id = str(targetSession.id) + addColor
        s_target_ip = targetSession.targetIP + addColor
        s_type = self.colorizeSessionType(targetSession.sessionType)
        content_list.push([ s_id, s_target_ip, s_type ])
    end for

    Proxima.utils.formatList(header_list, content_list)
end function