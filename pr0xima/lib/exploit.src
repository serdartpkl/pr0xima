Proxima.exploit = {}

Proxima.exploit.router = null
Proxima.exploit.targetIP = null

Proxima.exploit.targetPort = null
Proxima.exploit.targetPorts = []

Proxima.exploit.targetLibrary = null
Proxima.exploit.targetLibraries = []

Proxima.exploit.targetExploit = null
Proxima.exploit.targetExploits = []

Proxima.exploit.targetShell = null
Proxima.exploit.targetShells = []

Proxima.exploit.targetUser = null
Proxima.exploit.targetUsers = []

Proxima.exploit.portID = 1
Proxima.exploit.libraryID = 1
Proxima.exploit.exploitID = 1
Proxima.exploit.userID = 1
Proxima.exploit.shellID = 1
Proxima.exploit.totalExploits = 0

Proxima.exploit.resetCounters = function ()
    self.targetPort = null
    self.targetPorts = []

    self.targetLibrary = null
    self.targetLibraries = []

    self.targetExploit = null
    self.targetExploits = []

    self.targetShell = null
    self.targetShells = []

    self.targetUser = null
    self.targetUsers = []

    self.portID = 1
    self.libraryID = 1
    self.exploitID = 1
    self.userID = 1
    self.shellID = 1
    self.totalExploits = 0
end function

Proxima.exploit.setTargetIP = function (targetIP)
    self.targetIP = targetIP
end function

Proxima.exploit.setTargetPort = function (targetPort)
    self.targetPort = targetPort
end function

Proxima.exploit.setTargetLibrary = function (targetLibrary)
    self.targetLibrary = targetLibrary
end function

Proxima.exploit.setTargetExploit = function (targetExploit)
    self.targetExploit = targetExploit
end function

Proxima.exploit.setTargetUser = function (targetUser)
    self.targetUser = targetUser
end function

Proxima.exploit.setTargetShell = function (targetShell)
    self.targetShell = targetShell
end function

Proxima.exploit.checkTargetIP = function ()
    if self.targetIP != null then
        self.router = get_router(self.targetIP)
        if self.router != null then
            return true
        else
            self.targetIP = null
            return false
        end if
    else
        return false
    end if
end function

Proxima.exploit.checkPorts = function ()
    if self.checkTargetIP() then
        scannedPorts = used_ports(self.router)
        if scannedPorts.len == 0 or scannedPorts == null then
            return false
        else
            self.resetCounters()
            for scannedPort in scannedPorts
                portNumber = scannedPort.port_number
                portState = "open"
                if is_closed(scannedPort) then portState = "closed"
                portInfo = self.router.port_info(scannedPort).split(" ")
                portService = portInfo[0]
                portVersion = portInfo[1]
                portIP = scannedPort.get_lan_ip
                self.targetPorts.push({ "id": self.portID, "port_number": portNumber, "state": portState, "service": portService, "version": portVersion, "lan_ip": portIP  })
                self.portID = self.portID + 1
            end for
            Proxima.globals.cliMarker = Proxima.utils.message.colorize("[" + self.targetIP + "]", "#FFC466") + Proxima.utils.message.colorize("@", "#0091FF") + Proxima.utils.message.colorize("> ", "#08FF57")
            return true
        end if
    else
        return false
    end if
end function

Proxima.exploit.dumpPort = function (targetPort)
    if targetPort.state == "open" then
        if self.targetIP != targetPort.public_ip then self.targetIP = targetPort.public_ip
        netSession = Proxima.globals.metaxploit.net_use(self.targetIP, targetPort.port_number)
        if netSession != null then
            libraryDump = netSession.dump_lib
            print(Proxima.utils.message.progress("Attempting to scan vulnerabilities... <b>[IP:" + targetPort.public_ip + "|PORT:" + targetPort.port_number + "]</b>"))
            print(Proxima.utils.message.info("Library found: <b>" + libraryDump.lib_name + " -> " + libraryDump.version + "</b>"))
            scanResult = Proxima.globals.metaxploit.scan(libraryDump)
            self.parseScanEntries(scanResult, libraryDump, targetPort, null)
        else
            print(Proxima.utils.message.error("Unable to connect to port <b>" + targetPort.port_number + "</b>, it has firewall protection."))
        end if 
    else
        print(Proxima.utils.message.error("Unable to connect to port <b>" + targetPort.port_number + "</b>. It is closed."))
    end if
end function

Proxima.exploit.scanPort = function ()
    if self.targetPorts.len > 0 then
        if self.targetPort != null and self.targetPorts.hasIndex(self.targetPort - 1) then
            self.totalExploits = 0
            targetPort = self.targetPorts[self.targetPort - 1]
            if self.targetExploits.len > 0 and Proxima.utils.has_value(self.targetExploits, targetPort.port_number) then
                print(Proxima.utils.message.info("This port is already scanned for exploits. Skipping... <b>[IP:" + targetPort.public_ip + "|PORT:" + targetPort.port_number + "]</b>"))
                print(Proxima.utils.message.info("You can use 'vulnlist' command to view and execute scanned exploits."))
            else
                self.dumpPort(targetPort)
                if self.totalExploits == 0 then
                    print(Proxima.utils.message.error("No useful vulnerabilities found on port <b>" + targetPort.port_number + "</b>!"))
                else if self.totalExploits > 0 then
                    print(Proxima.utils.message.success("<b>" + self.totalExploits + "</b> exploits found. Use 'vulnlist' command to view and execute them."))
                end if
            end if
        else
            print(Proxima.utils.message.error("No port found with the specified ID. <b>[ID:" + self.targetPort + "]</b>"))
        end if
    else
        if self.targetIP != null then
            print(Proxima.utils.message.error("No open ports found at the specified target IP address. <b>[IP:" + self.targetIP + "]</b>"))
        else
            print(Proxima.utils.message.error("There is no specified target IP address yet, please scan an IP address first."))
        end if
    end if
end function

Proxima.exploit.scanPorts = function ()
    if self.targetPorts.len > 0 then
        for targetPort in self.targetPorts
            if self.targetExploits.len > 0 and Proxima.utils.has_value(self.targetExploits, targetPort.port_number) then
                print(Proxima.utils.message.info("This port is already scanned for exploits. Skipping... <b>[IP:" + targetPort.public_ip + "|PORT:" + targetPort.port_number + "]</b>"))
            else
                self.dumpPort(targetPort)
            end if
        end for
        if self.totalExploits == 0 then
            print(Proxima.utils.message.error("No useful vulnerabilities found on port <b>" + targetPort.port_number + "</b>!"))
        else if self.totalExploits > 0 then
            print(Proxima.utils.message.success("<b>" + self.totalExploits + "</b> exploits found. Use 'vulnlist' command to view and execute them."))
        end if
    else
        if self.targetIP != null then
            print(Proxima.utils.message.error("No open ports found at the specified target IP address. <b>[IP:" + self.targetIP + "]</b>"))
        else
            print(Proxima.utils.message.error("There is no specified target IP address yet, please scan an IP address first."))
        end if
    end if
end function

Proxima.exploit.checkLibraries = function ()
    librariesFolder = Proxima.globals.myPC.File("/lib")
    localLibraries = librariesFolder.get_files
    self.resetCounters()
    for localLibrary in localLibraries
        libraryInfo = Proxima.globals.metaxploit.load(localLibrary.path)
        self.targetLibraries.push({ "id": self.libraryID , "lib_name": libraryInfo.lib_name, "version": libraryInfo.version, "path": localLibrary.path })
        self.libraryID = self.libraryID + 1
    end for
end function

Proxima.exploit.dumpLibrary = function (targetLibrary)
    libraryDump = Proxima.globals.metaxploit.load(targetLibrary.path)
    print(Proxima.utils.message.progress("Attempting to scan vulnerabilities at <b>" + libraryDump.lib_name + "</b>!"))
    print(Proxima.utils.message.info("Library found: <b>" + libraryDump.lib_name + " -> " + libraryDump.version + "</b>"))
    scanResult = Proxima.globals.metaxploit.scan(libraryDump)
    self.parseScanEntries(scanResult, libraryDump, null, targetLibrary)
end function

Proxima.exploit.scanLibrary = function ()
    if self.targetLibraries.len > 0 then
        if self.targetLibrary != null and self.targetLibraries.hasIndex(self.targetLibrary - 1) then
            self.totalExploits = 0
            targetLibrary = self.targetLibraries[self.targetLibrary - 1]
            if self.targetExploits.len > 0 and Proxima.utils.has_value(self.targetExploits, targetLibrary.lib_name) then
                print(Proxima.utils.message.info("This library is already scanned for exploits. Skipping... <b>[LIB_NAME:" + targetLibrary.lib_name + "]</b>"))
                print(Proxima.utils.message.info("You can use 'vulnlist' command to view and execute scanned exploits."))
            else
                self.dumpLibrary(targetLibrary)
                if self.totalExploits == 0 then
                    print(Proxima.utils.message.error("No useful vulnerabilities found at <b>" + targetLibrary.lib_name + "</b>!"))
                else if self.totalExploits > 0 then
                    print(Proxima.utils.message.success("<b>" + self.totalExploits + "</b> exploits found. Use the 'vulnlist' command to view and execute them."))
                end if
            end if
        else
            print(Proxima.utils.message.error("No library found with specified ID. <b>[ID:" + self.targetLibrary + "]</b>"))
        end if
    else
        print(Proxima.utils.message.error("No libraries found to scan, please make a scan first."))
    end if
end function

Proxima.exploit.scanLibraries = function ()
    if self.targetLibraries.len > 0 then
        for targetLibrary in self.targetLibraries
            if self.targetExploits.len > 0 and Proxima.utils.has_value(self.targetExploits, targetLibrary.lib_name) then
                print(Proxima.utils.message.info("This library is already scanned for exploits. Skipping... <b>[LIB_NAME:" + targetLibrary.lib_name + "]</b>"))
            else
                self.dumpLibrary(targetLibrary)
            end if
        end for
        if self.totalExploits == 0 then
            print(Proxima.utils.message.error("No useful vulnerabilities found at any libraries."))
        else if self.totalExploits > 0 then
            print(Proxima.utils.message.success("<b>" + self.totalExploits + "</b> exploits found. Use the 'vulnlist' command to view and execute them."))
        end if
    else
        print(Proxima.utils.message.error("No libraries found fo scan, please make a scan first."))
    end if
end function

Proxima.exploit.parseScanEntries = function (scanResult, libraryDump, targetPort=null, targetLibrary=null)
    for entry in scanResult
        scanAddress = scan_address(Proxima.globals.metaxploit, libraryDump, entry)
        segments = split(scanAddress, "Unsafe check: ")[1:]
        exploits = []

        for segment in segments
            labelStart = indexOf(segment, "<b>")
            labelEnd = indexOf(segment, "</b>")
            push(exploits, segment[labelStart + 3: labelEnd])
        end for

        for exploit in exploits
            if Proxima.globals.initMode == "remote" then
                self.targetExploits.push({ "id": self.exploitID, "public_ip": self.targetIP, "port_number": targetPort.port_number, "memAddr": entry, "unsecZone": exploit })
            else if Proxima.globals.initMode == "local" then
                self.targetExploits.push({ "id": self.exploitID, "lib_name": libraryDump.lib_name, "version": libraryDump.version, "path": targetLibrary.path, "memAddr": entry, "unsecZone": exploit })
            end if
            self.totalExploits = self.totalExploits + 1
            self.exploitID = self.exploitID + 1
        end for
    end for
end function

Proxima.exploit.acquireUser = function (targetComputer)
    rootDirectory = targetComputer.File("/")
    acquiredUser = "guest"
    if rootDirectory and rootDirectory.has_permission("w") then
        acquiredUser = "root"
    else
        homeDirectory = targetComputer.File("/home")
        if homeDirectory then
            for userFolder in homeDirectory.get_folders
                if userFolder.name == "guest" then continue
                if userFolder.has_permission("w") then acquiredUser = userFolder.name
            end for
        end if
    end if
    return acquiredUser
end function

Proxima.exploit.getPrivilegeLevel = function (acquiredUser)
    acquiredUserNum = 0
    if acquiredUser == "guest" then
        acquiredUserNum = 0
    else if acquiredUser == "root" then
        acquiredUserNum = 2
    else 
        acquiredUserNum = 1
    end if
    return acquiredUserNum
end function

Proxima.exploit.connectShell = function ()
    if self.targetShells.len > 0 then
        if self.targetShell != null and self.targetShells.hasIndex(self.targetShell - 1) then
            targetShell = self.targetShells[self.targetShell - 1]
            print(Proxima.utils.message.progress("Connecting to shell on <b>" + targetShell.public_ip + "</b>. <b>[ID:" + targetShell.id + "]</b>"))
            wait(1)
            targetShell.shell_object.start_terminal
        else
            print(Proxima.utils.message.error("No open shell found with specified ID. <b>[ID:" + self.targetShell + "]</b>"))
        end if
    else
        print(Proxima.utils.message.error("No open shells found to scan, please execute an exploit first."))
    end if
end function

Proxima.exploit.decipherHash = function (userPassword)
    decryptedPassword = Proxima.globals.crypto.decipher(userPassword)
    return decryptedPassword
end function

Proxima.exploit.decipherPassword = function ()
    if self.targetUsers.len > 0 then
        if self.targetUser != null and self.targetUsers.hasIndex(self.targetUser - 1) then
            targetUser = self.targetUsers[self.targetUser - 1]
            if targetUser.password.len < 32 then
                print(Proxima.utils.message.warning("This password is already deciphered. Skipping..."))
            else
                decryptedPassword = self.decipherHash(targetUser.password)
                if decryptedPassword != null then
                    targetUser.password = decryptedPassword
                    print(Proxima.utils.message.success("Password decrypted successfuly!. <b>[USER:" + targetUser.username + "|PASSWORD:" + targetUser.password + "]</b>"))
                    print(Proxima.utils.message.info("Updated user information, you can view it later by using command: <b>userlist</b>"))
                else
                    print(Proxima.utils.message.info("Couldn't decrypt password! Please try another one..."))
                end if
            end if
        else
            print(Proxima.utils.message.error("No user found with specified ID. <b>[ID:" + self.targetUser + "]</b>"))
            return false
        end if
    else
        print(Proxima.utils.message.error("No user information found to decipher, please execute an exploit first."))
        return false
    end if
end function

Proxima.exploit.decipherPasswords = function ()
    if self.targetUsers.len > 0 then
        for targetUser in self.targetUsers
            self.setTargetUser(targetUser.id)
            self.decipherPassword()
        end for
    else
        print(Proxima.utils.message.error("No users found to scan, please execute an exploit first."))
    end if
end function

Proxima.exploit.uploadTools = function ()
    remoteShell = self.targetShells.sort("privilege_level")[self.targetShells.len - 1]
    
    uploadTo = Proxima.settings.uploadTo
    toolsDirectory = Proxima.globals.myPC.File(Proxima.settings.uploadFrom)

    if uploadTo != null and toolsDirectory != null then
        fileList = Proxima.utils.collect_files(toolsDirectory)
        if fileList.len > 0 then
            for filePath in fileList
                hostShell = get_shell
                fileName = filePath.split("/")[-1].trim
                print(Proxima.utils.message.progress("Attempting to upload <b>" + fileName + "</b>..."))
                uploadFile = hostShell.scp(filePath, uploadTo, remoteShell.shell_object)
                if typeof(uploadFile) == "string" or typeof(uploadFile) == null then
                    print(Proxima.utils.message.error("Couldn't upload <b>" + fileName + "</b>!"))
                else
                    print(Proxima.utils.message.success("Successfuly uploaded <b>" + fileName + "</b>!"))
                end if
            end for
        else
            print(Proxima.utils.message.error("No file or folder found in given local upload folder!"))
        end if
    else
        print(Proxima.utils.message.error("No file or folder found in given local upload folder!"))
    end if
end function

Proxima.exploit.accessPasswdFile = function (passwdFile)
    self.userID = 1
    self.targetUsers = []
    if passwdFile.get_content != null and passwdFile.has_permission("r") then
        encryptedContent = passwdFile.get_content
        userList = encryptedContent.split(char(10))
        userList.pop
        for user in userList
            parsedUser = user.split(":")
            userName = parsedUser[0]
            userPassword = parsedUser[1]
            userMap = { "id": self.userID, "username": userName, "password": userPassword }
            self.targetUsers.push(userMap)
            self.userID = self.userID + 1
        end for
        return true
    else
        return false
    end if
end function

Proxima.exploit.handleShell = function (attackResult)
    remoteComputer = attackResult.host_computer
    acquiredUser = self.acquireUser(remoteComputer)
    print(Proxima.utils.message.success("Shell access granted via user: <b>" + acquiredUser + "</b>! Updating the shell list..."))

    privilegeLevel = self.getPrivilegeLevel(acquiredUser)

    duplicateShell = Proxima.utils.has_value(self.targetShells, acquiredUser)
    if duplicateShell then
        print(Proxima.utils.message.info("This shell connection is already added to target shells list..."))
    else
        print(Proxima.utils.message.info("Updated the target shells list! You can view it later by: <b>shelllist</b>"))
        self.targetShells.push({ "id": self.shellID, "owner": acquiredUser, "privilege_level": privilegeLevel, "public_ip": remoteComputer.public_ip, "shell_object": attackResult})
        self.shellID = self.shellID + 1
    end if

    print(Proxima.utils.message.info("To connect a desired shell, you can use command: <b>connect <ID></b>"))

    if self.targetUsers.len > 0 then
        print(Proxima.utils.message.info("Skipping password search, we already accessed account informations..."))
    else
        if acquiredUser != "guest" then
            if acquiredUser != "root" then
                print(Proxima.utils.message.info("Trying to access /etc/passwd file..."))
                passwdFile = remoteComputer.File("/etc/passwd")
                accessPasswdFile = self.accessPasswdFile(passwdFile)
                if accessPasswdFile != null then
                    print(Proxima.utils.message.success("Accessed the /etc/passwd file!"))
                    print(Proxima.utils.message.info("Updated the target users list! You can view it later by: <b>userlist</b>"))
                    print(Proxima.utils.message.info("To decipher a selected user password, you can use command: <b>decipher <UserID></b>"))
                else
                    print(Proxima.utils.message.warning("Coulnd't access /etc/passwd file, you have to gain root access with a different method."))
                end if
            end if
        else
            if Proxima.globals.initMode == "remote" then
                print(Proxima.utils.message.warning("You can upload a local library scanner to gain root access. To upload the scanner, type command: <b>upload</b>"))
            else
                print(Proxima.utils.message.warning("Couldn't access root privileges by shell, you have to gain root access with a different method."))
            end if
        end if
    end if
end function

Proxima.exploit.handleComputer = function (attackResult)
    acquiredUser = self.acquireUser(attackResult)
    print(Proxima.utils.message.success("Computer access granted via user: <b>" + acquiredUser + "</b>!"))
    if self.targetUsers.len > 0 then
        print(Proxima.utils.message.info("Skipping password search, we already accessed account informations..."))
    else
        if acquiredUser != "guest" then
            print(Proxima.utils.message.info("Trying to access /etc/passwd file..."))
            passwdFile = attackResult.File("/etc/passwd")
            accessPasswdFile = self.accessPasswdFile(passwdFile)
            if accessPasswdFile != null then
                print(Proxima.utils.message.success("Accessed the /etc/passwd file!"))
                print(Proxima.utils.message.info("Updated the target users list! You can view it later by: <b>userlist</b>"))
                print(Proxima.utils.message.info("To decipher a selected user password, you can use command: <b>decipher <UserID></b>"))
            else
                print(Proxima.utils.message.warning("Coulnd't access /etc/passwd file, you have to gain root access with a different method."))
            end if
        else
            print(Proxima.utils.message.error("Coulnd't access /etc/passwd file, you have to gain root access with a different method."))
        end if
    end if
end function

Proxima.exploit.handleFile = function (attackResult)
    print(Proxima.utils.message.progress("Acquired file, trying to identify..."))
    if self.targetUsers.len > 0 then
        print(Proxima.utils.message.info("Skipping password search, we already accessed account informations..."))
    else
        if is_folder(attackResult) == 1 then
            if attackResult.name == "etc" then
                etcFiles = attackResult.get_files
                for etcFile in etcFiles
                    if etcFile.name == "passwd" then
                        print(Proxima.utils.message.info("Trying to access /etc/passwd file..."))
                        accessPasswdFile = self.accessPasswdFile(etcFile)
                        if accessPasswdFile != null then
                            print(Proxima.utils.message.success("Accessed the /etc/passwd file!"))
                            print(Proxima.utils.message.info("Updated the target users list! You can view it later by: <b>userlist</b>"))
                            print(Proxima.utils.message.info("To decipher a selected user password, you can use command: <b>decipher <UserID></b>"))
                        else
                            print(Proxima.utils.message.warning("Coulnd't access /etc/passwd file, you have to gain root access with a different method."))
                        end if
                    end if
                end for
            else
            end if
        else
            print(Proxima.utils.message.error("Couldn't get a useful information from the incoming file."))
        end if
    end if
end function

Proxima.exploit.handlePayload = function (attackResult)
end function

Proxima.exploit.handleAttackResult = function (attackResult)
    if typeof(attackResult) == "shell" then
        self.handleShell(attackResult)
    else if typeof(attackResult) == "computer" then
        self.handleComputer(attackResult)
    else if typeof(attackResult) == "file" then
        self.handleFile(attackResult)
    else if typeof(attackResult) == "number" then
        self.handlePayload(attackResult)
    else
        print(Proxima.utils.message.error("Exploit did not work correctly, please try another one if it has any."))
    end if
end function

Proxima.exploit.execute = function ()
    if self.targetExploits.len == 0 then
        print(Proxima.utils.message.error("No exploits available, please make a scan first."))
    else if self.targetExploit != null and self.targetExploits.hasIndex(self.targetExploit - 1) then
        targetExploit = self.targetExploits[self.targetExploit - 1]
        netSession = null
        libraryDump = null
        print(Proxima.utils.message.info("Launching exploit... <b>[ID:" + targetExploit.id + "]</b>"))
        if Proxima.globals.initMode == "remote" then
            print(Proxima.utils.message.progress("Trying to connect <b>" + targetExploit.public_ip + "</b> on port <b>" + targetExploit.port_number + "</b>"))
            netSession = Proxima.globals.metaxploit.net_use(targetExploit.public_ip, targetExploit.port_number)
            if not netSession then
                print(Proxima.utils.message.error("Unable to connect to port " + targetExploit.port_number + "."))
            else
                print(Proxima.utils.message.success("Connection established!"))
                libraryDump = netSession.dump_lib
                print(Proxima.utils.message.progress("Attempting to exploit " + libraryDump.lib_name + " at port " + targetExploit.port_number + "."))
            end if
        else if Proxima.globals.initMode == "local" then
            print(Proxima.utils.message.progress("Trying to exploit <b>" + targetExploit.lib_name + "</b> library."))
            libraryDump = Proxima.globals.metaxploit.load(targetExploit.path)
        end if
        print("+------------------------------------+")
        print(Proxima.utils.message.progress("Injecting values into the library... <b>[MEM_ADDR:" + targetExploit.memAddr + "|UNSEC_CODE:" + targetExploit.unsecZone + "]</b>"))
        attackResult = libraryDump.overflow(targetExploit.memAddr, targetExploit.unsecZone, Proxima.settings.injectionPassword)
        print("+------------------------------------+")
        self.handleAttackResult(attackResult)
    else
        print(Proxima.utils.message.error("No exploit found with specified ID. <b>[ID:" + self.targetExploit + "]</b>"))
    end if
end function

Proxima.exploit.autoExecute = function ()
    if self.targetExploits.len == 0 then
        print(Proxima.utils.message.error("No exploits available, please make a scan first."))
    else
        self.shellID = 1
        self.targetShells = []
        self.targetUsers = []
        for targetExploit in self.targetExploits
            self.setTargetExploit(targetExploit.id)
            if self.targetExploit != 1 then
                print(Proxima.utils.message.colorize("+------------------------------------+", "#FFC466"))
            end if
            self.execute()
            if self.targetExploit - 1 == self.targetExploits.len then
                print(Proxima.utils.message.colorize("+------------------------------------+", "#FFC466"))
            end if
        end for
    end if
end function

Proxima.exploit.isSSHAvailable = function ()
    isConnectableViaSSH = false
    for targetPort in self.targetPorts
        if targetPort.values[1] == 22 and targetPort.values[2] == "open" then
            isConnectableViaSSH = true
        end if
    end for
    return isSSHAvailable
end function

Proxima.exploit.isFTPAvailable = function ()
    isConnectableViaFTP = false
    for targetPort in self.targetPorts
        if targetPort.values[1] == 21 and targetPort.values[2] == "open" then
            isConnectableViaFTP = true
        end if
    end for
    return isConnectableViaFTP
end function

Proxima.exploit.displayPortInfo = function ()
    header_list = ["ID", "PORT", "STATE", "SERVICE", "VERSION", "LAN_IP"]
    content_list = []
    for targetPort in self.targetPorts
        p_id = str(targetPort.id)
        p_number = str(targetPort.port_number)
        p_state = targetPort.state
        p_service = targetPort.service
        p_version = targetPort.version
        p_lan_ip = targetPort.lan_ip
        content_list.push([ p_id, p_number, p_state, p_service, p_version, p_lan_ip ])
    end for

    Proxima.utils.display_list(header_list, content_list)
end function

Proxima.exploit.displayLibraryInfo = function ()
    header_list = ["ID", "LIBRARY_NAME", "VERSION", "PATH"]
    content_list = []
    for targetLibrary in self.targetLibraries
        l_id = str(targetLibrary.id)
        l_name = targetLibrary.lib_name
        l_version = targetLibrary.version
        l_path = targetLibrary.path
        content_list.push([ l_id, l_name, l_version, l_path ])
    end for

    Proxima.utils.display_list(header_list, content_list)
end function

Proxima.exploit.displayExploitInfo = function ()
    isLocal = false
    if Proxima.globals.initMode == "local" then isLocal = true

    header_list = []
    if isLocal then
        header_list = ["ID", "LIBRARY_NAME", "VERSION", "MEM_ADDRESS", "UNSEC_ZONE"]
    else
        header_list = ["ID", "PORT", "MEM_ADDRESS", "UNSEC_ZONE"]
    end if

    content_list = []
    for targetExploit in self.targetExploits
        e_id = str(targetExploit.id)
        e_mem = targetExploit.memAddr
        e_uz = targetExploit.unsecZone
        if isLocal then
            e_name = targetExploit.lib_name
            e_version = targetExploit.version
            content_list.push([ e_id, e_name, e_version, e_mem, e_uz ])
        else
            e_port_number = str(targetExploit.port_number)
            content_list.push([ e_id, e_port_number, e_mem, e_uz ])
        end if
    end for

    Proxima.utils.display_list(header_list, content_list)
end function


Proxima.exploit.displayUserInfo = function ()
    header_list = ["ID", "USERNAME", "PASSWORD"]
    content_list = []
    for targetUser in self.targetUsers
        u_id = str(targetUser.id)
        u_username = targetUser.username
        u_password = targetUser.password
        content_list.push([ u_id, u_username, u_password ])
    end for

    Proxima.utils.display_list(header_list, content_list)
end function

Proxima.exploit.displayShellInfo = function ()
    header_list = ["ID", "OWNER"]
    content_list = []
    for targetShell in self.targetShells
        s_id = str(targetShell.id)
        s_privilege = targetShell.owner
        s_ip = targetShell.public_ip
        content_list.push([ s_id, s_privilege, s_ip ])
    end for

    Proxima.utils.display_list(header_list, content_list)
end function