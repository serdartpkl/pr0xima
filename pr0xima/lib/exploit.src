Proxima.exploit = {}

// ------------------------------------------------------------------------------------------------------------

Proxima.exploit.isLocal = function ()
    sessionType = Proxima.sessions.getSessionValue("sessionType")    
    if sessionType == 0 then
        return true
    else if sessionType == 1 then
        return false
    end if
end function

Proxima.exploit.parseScanEntries = function (scanResult, libraryDump, targetObject)
    totalExploits = 0
    for entry in scanResult
        scanAddress = scan_address(Proxima.globals.metaxploit, libraryDump, entry)
        segments = split(scanAddress, "Unsafe check: ")[1:]
        exploits = []

        for segment in segments
            labelStart = indexOf(segment, "<b>")
            labelEnd = indexOf(segment, "</b>")
            push(exploits, segment[labelStart + 3: labelEnd])
        end for

        for exploit in exploits
            exploitID = Proxima.sessions.getSessionValue("targetExploits").len + 1
            if self.isLocal() then
                Proxima.sessions.pushMap("targetExploits", { "id": exploitID, "lib_name": libraryDump.lib_name, "version": libraryDump.version, "path": targetObject.path, "memAddr": entry, "unsecZone": exploit, "result": 5 })
            else
                Proxima.sessions.pushMap("targetExploits", { "id": exploitID, "port_number": targetObject.port_number, "memAddr": entry, "unsecZone": exploit, "result": 5 })
            end if
            totalExploits = totalExploits + 1
        end for
    end for
    return totalExploits
end function

// ------------------------------------------------------------------------------------------------------------

Proxima.exploit.checkTargetIP = function (targetIP = null)
    if targetIP != null and is_valid_ip(targetIP) then return true
end function

Proxima.exploit.checkPorts = function (targetIP = null)
    if self.checkTargetIP(targetIP) then
        if Proxima.utils.mapHasValue(Proxima.sessions.targetSessions, "targetIP", targetIP) then
            for targetSession in Proxima.sessions.targetSessions
                if targetSession.targetIP == targetIP then
                    Proxima.sessions.setSession(targetSession.id)
                    print(Proxima.cli.addOutputEntry(Proxima.cli.message.progress("This session is already in the list, switching session... <b>[ID:" + targetSession.id + "|TYPE:REMOTE]</b>")))
                    print(Proxima.cli.addOutputEntry(Proxima.cli.message.success("Loaded session successfuly!")))
                    Proxima.cli.cliString = Proxima.cli.message.colorize("<b>" + targetSession.targetIP + "</b>", "#FFC466") + Proxima.cli.message.colorize("@pr0xima", "#FC8403") + Proxima.cli.message.colorize("> ", "#008DFF")
                    return true
                end if
            end for
        else
            targetRouter = get_router(targetIP)
            Proxima.sessions.createSession(1, targetIP, targetRouter)
            scannedPorts = used_ports(targetRouter)
            if scannedPorts.len == 0 or scannedPorts == null then
                return false
            else
                for scannedPort in scannedPorts
                    portID = Proxima.sessions.getSessionValue("targetPorts").len + 1
                    portNumber = scannedPort.port_number
                    portState = "OPEN"
                    if is_closed(scannedPort) then portState = "CLOSED"
                    portInfo = targetRouter.port_info(scannedPort).split(" ")
                    portService = portInfo[0]
                    portVersion = portInfo[1]
                    portLanIP = scannedPort.get_lan_ip
                    Proxima.sessions.pushMap("targetPorts", { "id": portID, "port_number": portNumber, "state": portState, "service": portService, "version": portVersion, "public_ip": targetIP, "lan_ip": portLanIP })
                end for
                Proxima.cli.cliString = Proxima.cli.message.colorize("<b>" + targetIP + "</b>", "#FFC466") + Proxima.cli.message.colorize("@pr0xima", "#FC8403") + Proxima.cli.message.colorize("> ", "#008DFF")
                return true
            end if
        end if
    else
        return null
    end if
end function

Proxima.exploit.dumpPort = function (targetPort)
    totalExploits = 0
    if targetPort.state == "OPEN" then
        targetIP = Proxima.sessions.getSessionValue("targetIP")
        netSession = Proxima.globals.metaxploit.net_use(targetIP, targetPort.port_number)
        if netSession != null then
            libraryDump = netSession.dump_lib
            print(Proxima.cli.addOutputEntry(Proxima.cli.message.progress("Attempting to scan vulnerabilities... <b>[IP:" + targetIP + "|PORT:" + targetPort.port_number + "]</b>")))
            print(Proxima.cli.addOutputEntry(Proxima.cli.message.info("Library version found: <b>" + libraryDump.lib_name + " -> " + libraryDump.version + "</b>")))
            scanResult = Proxima.globals.metaxploit.scan(libraryDump)
            Proxima.cli.addProgressBar()
            totalExploits = self.parseScanEntries(scanResult, libraryDump, targetPort)
        else
            print(Proxima.cli.addOutputEntry(Proxima.cli.message.error("Unable to connect to port <b>" + targetPort.port_number + "</b>. It has firewall protection.")))
        end if 
    else
        print(Proxima.cli.addOutputEntry(Proxima.cli.message.error("Unable to connect to port <b>" + targetPort.port_number + "</b>. It is closed.")))
    end if
    return totalExploits
end function

Proxima.exploit.scanPort = function (portID)
    targetIP = Proxima.sessions.getSessionValue("targetIP")
    targetPorts = Proxima.sessions.getSessionValue("targetPorts")
    if targetPorts.len > 0 then
        if portID != null and targetPorts.hasIndex(portID - 1) then
            totalExploits = 0
            targetPort = targetPorts[portID - 1]
            targetExploits = Proxima.sessions.getSessionValue("targetExploits")
            if targetExploits.len > 0 and Proxima.utils.mapHasValue(targetExploits, "port_number", targetPort.port_number) then
                print(Proxima.cli.addOutputEntry(Proxima.cli.message.warning("This port is already scanned for exploits. Skipping... <b>[IP:" + targetIP + "|PORT:" + targetPort.port_number + "]</b>")))
                print(Proxima.cli.addOutputEntry(Proxima.cli.message.info("You can use 'exploits' command to view found exploits.")))
            else
                totalExploits = self.dumpPort(targetPort)
                if totalExploits == 0 then
                    print(Proxima.cli.addOutputEntry(Proxima.cli.message.error("No useful vulnerabilities found on port <b>" + targetPort.port_number + "</b>!")))
                else if totalExploits > 0 then
                    print(Proxima.cli.addOutputEntry(Proxima.cli.message.success("<b>" + totalExploits + "</b> exploits found. Use 'exploits' command to view available exploits.")))
                end if
            end if
        else
            print(Proxima.cli.addOutputEntry(Proxima.cli.message.error("No port found with the specified ID. <b>[ID:" + portID + "]</b>")))
        end if
    else
        if targetIP != null then
            print(Proxima.cli.addOutputEntry(Proxima.cli.message.error("No open ports found at the specified target IP address. <b>[IP:" + targetIP + "]</b>")))
        else
            print(Proxima.cli.addOutputEntry(Proxima.cli.message.error("There is no specified target IP address yet, please set a target IP address first.")))
        end if
    end if
end function

Proxima.exploit.scanPorts = function ()
    targetIP = Proxima.sessions.getSessionValue("targetIP")
    targetPorts = Proxima.sessions.getSessionValue("targetPorts")
    if targetPorts.len > 0 then
        totalExploits = 0
        targetExploits = Proxima.sessions.getSessionValue("targetExploits")
        for targetPort in targetPorts
            if targetExploits.len > 0 and Proxima.utils.mapHasValue(targetExploits, "port_number", targetPort.port_number) then
                print(Proxima.cli.addOutputEntry(Proxima.cli.message.info("This port is already scanned for exploits. Skipping... <b>[IP:" + targetIP + "|PORT:" + targetPort.port_number + "]</b>")))
                for targetExploit in targetExploits
                    if targetExploit.port_number == targetPort.port_number then
                        totalExploits = totalExploits + 1
                    end if
                end for
            else
                totalExploits = totalExploits + self.dumpPort(targetPort)
            end if
        end for
        if totalExploits == 0 then
            print(Proxima.cli.addOutputEntry(Proxima.cli.message.error("No useful vulnerabilities found on any port.")))
        else if totalExploits > 0 then
            print(Proxima.cli.addOutputEntry(Proxima.cli.message.success("<b>" + totalExploits + "</b> exploits found. Use 'exploits' command to view available exploits.")))
        end if
    else
        if targetIP != null then
            print(Proxima.cli.addOutputEntry(Proxima.cli.message.error("No open ports found at the specified target IP address. <b>[IP:" + targetIP + "]</b>")))
        else
            print(Proxima.cli.addOutputEntry(Proxima.cli.message.error("There is no specified target IP address yet, please set a target IP address first.")))
        end if
    end if
end function

// ------------------------------------------------------------------------------------------------------------

Proxima.exploit.checkLibraries = function ()
    if Proxima.utils.mapHasValue(Proxima.sessions.targetSessions, "sessionType", 0) then
        for targetSession in Proxima.sessions.targetSessions
            if targetSession.sessionType == 0 then
                Proxima.sessions.setSession(targetSession.id)
                print(Proxima.cli.addOutputEntry(Proxima.cli.message.progress("This session is already in the list, switching session... <b>[ID:" + targetSession.id + "|TYPE:LOCAL]</b>")))
                print(Proxima.cli.addOutputEntry(Proxima.cli.message.success("Loaded session successfuly!")))
                Proxima.cli.cliString = Proxima.cli.message.colorize("<b>" + targetSession.targetIP + "</b>", "#FFC466") + Proxima.cli.message.colorize("@pr0xima", "#FC8403") + Proxima.cli.message.colorize("> ", "#008DFF")
                break
            end if
        end for
    else
        librariesFolder = Proxima.globals.myPC.File("/lib")
        localLibraries = librariesFolder.get_files
        localIP = Proxima.globals.myPC.local_ip
        localRouter = get_router(localIP)
        Proxima.sessions.createSession(0, localIP, localRouter)
        for localLibrary in localLibraries
            libraryID = Proxima.sessions.getSessionValue("targetLibraries").len + 1
            libraryInfo = Proxima.globals.metaxploit.load(localLibrary.path)
            Proxima.sessions.pushMap("targetLibraries", { "id": libraryID , "lib_name": libraryInfo.lib_name, "version": libraryInfo.version, "path": localLibrary.path })
        end for
        Proxima.cli.cliString = Proxima.cli.message.colorize("<b>" + localIP + "</b>", "#FFC466") + Proxima.cli.message.colorize("@pr0xima", "#FC8403") + Proxima.cli.message.colorize("> ", "#008DFF")
    end if
end function

Proxima.exploit.dumpLibrary = function (targetLibrary)
    totalExploits = 0
    libraryDump = Proxima.globals.metaxploit.load(targetLibrary.path)
    print(Proxima.cli.addOutputEntry(Proxima.cli.message.progress("Attempting to scan vulnerabilities at <b>" + libraryDump.lib_name + "</b>!")))
    print(Proxima.cli.addOutputEntry(Proxima.cli.message.info("Library version found: <b>" + libraryDump.lib_name + " -> " + libraryDump.version + "</b>")))
    scanResult = Proxima.globals.metaxploit.scan(libraryDump)
    Proxima.cli.addProgressBar()
    totalExploits = self.parseScanEntries(scanResult, libraryDump, targetLibrary)
    return totalExploits
end function

Proxima.exploit.scanLibrary = function (libraryID)
    targetLibraries = Proxima.sessions.getSessionValue("targetLibraries")
    if targetLibraries.len > 0 then
        if libraryID != null and targetLibraries.hasIndex(libraryID - 1) then
            totalExploits = 0
            targetLibrary = targetLibraries[libraryID - 1]
            targetExploits = Proxima.sessions.getSessionValue("targetExploits")
            if targetExploits.len > 0 and Proxima.utils.mapHasValue(targetExploits, "lib_name", targetLibrary.lib_name) then
                print(Proxima.cli.addOutputEntry(Proxima.cli.message.info("This library is already scanned for exploits. Skipping... <b>[LIB_NAME:" + targetLibrary.lib_name + "]</b>")))
                print(Proxima.cli.addOutputEntry(Proxima.cli.message.info("You can use 'exploits' command to view found exploits.")))
            else
                totalExploits = self.dumpLibrary(targetLibrary)
                if totalExploits == 0 then
                    print(Proxima.cli.addOutputEntry(Proxima.cli.message.error("No useful vulnerabilities found at <b>" + targetLibrary.lib_name + "</b>!")))
                else if totalExploits > 0 then
                    print(Proxima.cli.addOutputEntry(Proxima.cli.message.success("<b>" + totalExploits + "</b> exploits found. Use the 'exploits' command to view available exploits.")))
                end if
            end if
        else
            print(Proxima.cli.addOutputEntry(Proxima.cli.message.error("No library found with specified ID. <b>[ID:" + libraryID + "]</b>")))
        end if
    else
        print(Proxima.cli.addOutputEntry(Proxima.cli.message.error("No libraries found to scan, please make a scan first.")))
    end if
end function

Proxima.exploit.scanLibraries = function ()
    targetLibraries = Proxima.sessions.getSessionValue("targetLibraries")
    if targetLibraries.len > 0 then
        totalExploits = 0
        targetExploits = Proxima.sessions.getSessionValue("targetExploits")
        for targetLibrary in targetLibraries
            if targetExploits.len > 0 and Proxima.utils.mapHasValue(targetExploits, "lib_name", targetLibrary.lib_name) then
                print(Proxima.cli.addOutputEntry(Proxima.cli.message.info("This library is already scanned for exploits. Skipping... <b>[LIB_NAME:" + targetLibrary.lib_name + "]</b>")))
                for targetExploit in targetExploits
                    if targetExploit.lib_name == targetLibrary.lib_name then
                        totalExploits = totalExploits + 1
                    end if
                end for
            else
                totalExploits = totalExploits + self.dumpLibrary(targetLibrary)
            end if
        end for
        if totalExploits == 0 then
            print(Proxima.cli.addOutputEntry(Proxima.cli.message.error("No useful vulnerabilities found at any libraries.")))
        else if totalExploits > 0 then
            print(Proxima.cli.addOutputEntry(Proxima.cli.message.success("<b>" + totalExploits + "</b> exploits found. Use the 'list vulns' command to view and execute them.")))
        end if
    else
        print(Proxima.cli.addOutputEntry(Proxima.cli.message.error("No libraries found fo scan, please make a scan first.")))
    end if
end function

// ------------------------------------------------------------------------------------------------------------

Proxima.exploit.accessPasswdFile = function (passwdFile)
    Proxima.sessions.setSessionValue("targetUsers", [])
    if passwdFile.get_content != null and passwdFile.has_permission("r") then
        encryptedContent = passwdFile.get_content
        userList = encryptedContent.split(char(10))
        for userInfo in userList
            if userInfo.len > 1 then
                userID = Proxima.sessions.getSessionValue("targetUsers").len + 1
                parsedUser = userInfo.split(":")
                userName = parsedUser[0]
                userPassword = parsedUser[1]
                userMap = { "id": userID, "username": userName, "password": userPassword }
                Proxima.sessions.pushMap("targetUsers", userMap)
            end if
        end for
        return true
    else
        return false
    end if
end function

Proxima.exploit.reachPasswdFile = function (givenDirectory)
    while givenDirectory.path != "/"
        givenDirectory = givenDirectory.parent
    end while

    rootFolders = givenDirectory.get_folders
    for rootFolder in rootFolders
        if rootFolder.name == "etc" then
            for etcFile in rootFolder.get_files
                if etcFile.name == "passwd" then
                    return etcFile
                end if
            end for
        end if
    end for
end function

Proxima.exploit.reachHomeDirectory = function (givenDirectory)
    while givenDirectory.path != "/"
        givenDirectory = givenDirectory.parent
    end while

    rootFolders = givenDirectory.get_folders
    for rootFolder in rootFolders
        if rootFolder.name == "home" then
            return rootFolder
            break
        end if
    end for
end function

Proxima.exploit.reachFileOwner = function (givenDirectory)
    while givenDirectory.path != "/"
        givenDirectory = givenDirectory.parent
    end while

    acquiredUser = "guest"
    if givenDirectory != null and givenDirectory.has_permission("w") then
        acquiredUser = "root"
    else
        homeDirectory = self.reachHomeDirectory(givenDirectory)
        if homeDirectory != null then
            for userFolder in homeDirectory.get_folders
                if userFolder.name == "guest" then continue
                if userFolder.has_permission("w") then acquiredUser = userFolder.name
            end for
        end if
    end if
    return acquiredUser
end function

Proxima.exploit.getPrivilegeLevel = function (acquiredUser)
    acquiredUserNum = 2
    if acquiredUser == "guest" then
        acquiredUserNum = 2
    else if acquiredUser == "root" then
        acquiredUserNum = 0
    else 
        acquiredUserNum = 1
    end if
    return acquiredUserNum
end function

Proxima.exploit.acquireUser = function (targetComputer)
    rootDirectory = targetComputer.File("/")
    acquiredUser = "guest"
    if rootDirectory != null and rootDirectory.has_permission("w") then
        acquiredUser = "root"
    else
        homeDirectory = targetComputer.File("/home")
        if homeDirectory != null then
            for userFolder in homeDirectory.get_folders
                if userFolder.name == "guest" then continue
                if userFolder.has_permission("w") then acquiredUser = userFolder.name
            end for
        end if
    end if
    return acquiredUser
end function

Proxima.exploit.getMailInfo = function (homeFolder)
    Proxima.sessions.setSessionValue("targetMails", [])
    hasAccessedMails = false
    for userFolders in homeFolder.get_folders
        if userFolders.name != "guest" then
            infoMap = {}
            infoMap.id = Proxima.sessions.getSessionValue("targetMails").len + 1
            infoMap.owner = userFolders.name
            for userFolder in userFolders.get_folders
                if userFolder.name == "Config" then
                    for configFile in userFolder.get_files
                        if configFile.name == "Mail.txt" then
                            fileContent = configFile.get_content()
                            if fileContent != null and fileContent.len > 0 then
                                splitInfo = fileContent.split(":")
                                infoMap.mail_addr = splitInfo[0]
                                infoMap.password = splitInfo[1]
                                Proxima.sessions.pushMap("targetMails", infoMap)
                                hasAccessedMails = true
                            end if
                        end if
                    end for
                end if
            end for
        end if
    end for
    return hasAccessedMails
end function

Proxima.exploit.getBankInfo = function (homeFolder)
    Proxima.sessions.setSessionValue("targetBanks", [])
    hasAccessedBanks = false
    for userFolders in homeFolder.get_folders
        if userFolders.name != "guest" then
            infoMap = {}
            infoMap.id = Proxima.sessions.getSessionValue("targetBanks").len + 1
            infoMap.owner = userFolders.name
            for userFolder in userFolders.get_folders
                if userFolder.name == "Config" then
                    for configFile in userFolder.get_files
                        if configFile.name == "Bank.txt" then
                            fileContent = configFile.get_content()
                            if fileContent != null and fileContent.len > 0 then
                                splitInfo = fileContent.split(":")
                                infoMap.account = splitInfo[0]
                                infoMap.password = splitInfo[1]
                                Proxima.sessions.pushMap("targetBanks", infoMap)
                                hasAccessedBanks = true
                            end if
                        end if
                    end for
                end if
            end for
        end if
    end for
    return hasAccessedBanks
end function

Proxima.exploit.getUsers = function (homeFolder)
    Proxima.sessions.setSessionValue("targetUsers", [])
    Proxima.sessions.pushMap("targetUsers", { "id": 1, "username": "root", "password": "UNKNOWN" })
    for userFolders in homeFolder.get_folders
        if userFolders.name != "guest" then
            userID = Proxima.sessions.getSessionValue("targetUsers").len + 1
            userMap = { "id": userID, "username": userFolders.name, "password": "UNKNOWN" }
            Proxima.sessions.pushMap("targetUsers", userMap)
        end if
    end for
end function

Proxima.exploit.decipherHash = function (encryptedHash)
    decryptedHash = Proxima.globals.crypto.decipher(encryptedHash)
    Proxima.cli.addProgressBar()
    return decryptedHash
end function

Proxima.exploit.decipherUserPassword = function (userID)
    targetUsers = Proxima.sessions.getSessionValue("targetUsers")
    if targetUsers.len > 0 then
        if userID != null and targetUsers.hasIndex(userID - 1) then
            targetUser = targetUsers[userID - 1]
            if targetUser.password.len < 32 then
                print(Proxima.cli.addOutputEntry(Proxima.cli.message.warning("This password is already deciphered. Skipping...")))
            else
                decryptedPassword = self.decipherHash(targetUser.password)
                if decryptedPassword != null then
                    targetUsers[userID - 1].password = decryptedPassword
                    Proxima.sessions.setSessionValue("targetUsers", targetUsers)
                    print(Proxima.cli.addOutputEntry(Proxima.cli.message.success("Password decrypted successfuly!. <b>[USER:" + targetUser.username + "|PASSWORD:" + targetUser.password + "]</b>")))
                    print(Proxima.cli.addOutputEntry(Proxima.cli.message.info("Updated user information, you can view it later by using command: <b>users</b>")))
                else
                    print(Proxima.cli.addOutputEntry(Proxima.cli.message.info("Couldn't decrypt password! Please try another one...")))
                end if
            end if
        else
            print(Proxima.cli.addOutputEntry(Proxima.cli.message.error("No user found with specified ID. <b>[ID:" + userID + "]</b>")))
        end if
    else
        print(Proxima.cli.addOutputEntry(Proxima.cli.message.error("No user information found to decipher, please execute an exploit first.")))
    end if
end function

Proxima.exploit.decipherMailPassword = function (mailID)
    targetMails = Proxima.sessions.getSessionValue("targetMails")
    if targetMails.len > 0 then
        if mailID != null and targetMails.hasIndex(mailID - 1) then
            targetMail = targetMails[mailID - 1]
            if targetMail.password.len < 32 then
                print(Proxima.cli.addOutputEntry(Proxima.cli.message.warning("This password is already deciphered. Skipping...")))
            else
                decryptedPassword = self.decipherHash(targetMail.password)
                if decryptedPassword != null then
                    targetMails[mailID - 1].password = decryptedPassword
                    Proxima.sessions.setSessionValue("targetMails", targetMails)
                    print(Proxima.cli.addOutputEntry(Proxima.cli.message.success("Password decrypted successfuly!. <b>[MAIL_ADDR:" + targetMail.mail_addr + "|PASSWORD:" + targetMail.password + "]</b>")))
                    print(Proxima.cli.addOutputEntry(Proxima.cli.message.info("Updated mail information, you can view it later by using command: <b>mails</b>")))
                else
                    print(Proxima.cli.addOutputEntry(Proxima.cli.message.info("Couldn't decrypt password! Please try another one...")))
                end if
            end if
        else
            print(Proxima.cli.addOutputEntry(Proxima.cli.message.error("No mail information found with specified ID. <b>[ID:" + mailID + "]</b>")))
        end if
    else
        print(Proxima.cli.addOutputEntry(Proxima.cli.message.error("No mail information found to decipher, please execute an exploit first.")))
    end if
end function

Proxima.exploit.decipherBankPassword = function (bankID)
    targetBanks = Proxima.sessions.getSessionValue("targetBanks")
    if targetBanks.len > 0 then
        if bankID != null and targetBanks.hasIndex(bankID - 1) then
            targetBank = targetBanks[bankID - 1]
            if targetBank.password.len < 32 then
                print(Proxima.cli.addOutputEntry(Proxima.cli.message.warning("This password is already deciphered. Skipping...")))
            else
                decryptedPassword = self.decipherHash(targetBank.password)
                if decryptedPassword != null then
                    targetBanks[bankID - 1].password = decryptedPassword
                    Proxima.sessions.setSessionValue("targetBanks", targetBanks)
                    print(Proxima.cli.addOutputEntry(Proxima.cli.message.success("Password decrypted successfuly!. <b>[ACCOUNT:" + targetBank.account + "|PASSWORD:" + targetBank.password + "]</b>")))
                    print(Proxima.cli.addOutputEntry(Proxima.cli.message.info("Updated bank information, you can view it later by using command: <b>banks</b>")))
                else
                    print(Proxima.cli.addOutputEntry(Proxima.cli.message.info("Couldn't decrypt password! Please try another one...")))
                end if
            end if
        else
            print(Proxima.cli.addOutputEntry(Proxima.cli.message.error("No bank information found with specified ID. <b>[ID:" + bankID + "]</b>")))
        end if
    else
        print(Proxima.cli.addOutputEntry(Proxima.cli.message.error("No bank information found to decipher, please execute an exploit first.")))
    end if
end function

// ------------------------------------------------------------------------------------------------------------

Proxima.exploit.setExploitResult = function (exploitID, resultType)
    targetExploits = Proxima.sessions.getSessionValue("targetExploits")
    if targetExploits.len > 0 then
        if exploitID != null and targetExploits.hasIndex(exploitID - 1) then
            targetExploits[exploitID - 1].result = resultType
            Proxima.sessions.setSessionValue("targetExploits", targetExploits)
        end if
    end if
end function

Proxima.exploit.reorderShells = function ()
    reorderedShells = Proxima.sessions.getSessionValue("targetShells").sort("privilege_level")
    shellID = 1
    for targetShell in reorderedShells
        if targetShell.id != shellID then targetShell.id = shellID
        shellID = shellID + 1
    end for
    Proxima.sessions.setSessionValue("targetShells", reorderedShells)
end function

Proxima.exploit.addShellConnection = function (shellObject, shellOwner)
    targetShells = Proxima.sessions.getSessionValue("targetShells")
    duplicateShell = Proxima.utils.mapHasValue(targetShells, "owner", shellOwner)
    if duplicateShell then
        return false
    else
        shellID = targetShells.len + 1
        Proxima.sessions.pushMap("targetShells", { "id": shellID, "shell_object": shellObject, "owner": shellOwner, "privilege_level": self.getPrivilegeLevel(shellOwner), "public_ip": shellObject.host_computer.public_ip, "local_ip": shellObject.host_computer.local_ip})
        if targetShells.len > 1 then
            self.reorderShells()
        end if
        return true
    end if
end function

Proxima.exploit.handleShell = function (attackResult, exploitID, output)
    targetComputer = attackResult.host_computer
    acquiredUser = self.acquireUser(targetComputer)
    if output then print(Proxima.cli.addOutputEntry(Proxima.cli.message.success("Shell access granted via user: <b>" + acquiredUser + "</b>! Updating the shell list...")))

    addShell = self.addShellConnection(attackResult, acquiredUser)
    if addShell then
        if output then print(Proxima.cli.addOutputEntry(Proxima.cli.message.info("Updated the target shells list!")))
    else
        if output then print(Proxima.cli.addOutputEntry(Proxima.cli.message.warning("This shell connection is already in the target shells list. Skipping...")))
    end if
    self.setExploitResult(exploitID, 0)

    targetUsers = Proxima.sessions.getSessionValue("targetUsers")
    if targetUsers.len > 0 and Proxima.utils.mapHasValue(targetUsers, "password", "UNKNOWN") != true then
        if output then print(Proxima.cli.addOutputEntry(Proxima.cli.message.info("Skipping password search, we already accessed account informations...")))
    else
        homeFolder = targetComputer.File("/home")
        hasAccessedPasswd = false
        if acquiredUser != "guest" then
            if output then print(Proxima.cli.addOutputEntry(Proxima.cli.message.info("Trying to access /etc/passwd file...")))
            passwdFile = targetComputer.File("/etc/passwd")
            accessPasswdFile = self.accessPasswdFile(passwdFile)
            if accessPasswdFile then
                if output then print(Proxima.cli.addOutputEntry(Proxima.cli.message.success("Accessed the /etc/passwd file!")))
                if output then print(Proxima.cli.addOutputEntry(Proxima.cli.message.info("Updated the target users list!")))
                if output then print(Proxima.cli.addOutputEntry(Proxima.cli.message.progress("Accessing all mail and bank informations...")))
                mailInfo = self.getMailInfo(homeFolder)
                bankInfo = self.getBankInfo(homeFolder)
                if bankInfo and mailInfo then
                    if output then print(Proxima.cli.addOutputEntry(Proxima.cli.message.success("Accessed and updated mail and bank informations! Updating lists...")))
                else
                    if output then print(Proxima.cli.addOutputEntry(Proxima.cli.message.error("Couldn't access mail and bank informations!é")))
                end if
                Proxima.sessions.setSessionValue("payloadInjection", false)
                if output then print(Proxima.cli.addOutputEntry(Proxima.cli.message.info("Disabled password injection method to prevent future conflicts...")))
                hasAccessedPasswd = true
            end if
        end if
        if hasAccessedPasswd == false then
            if output then print(Proxima.cli.addOutputEntry(Proxima.cli.message.warning("Coulnd't access /etc/passwd file, you have to gain root access with a different method.")))
            self.getUsers(homeFolder)
            targetUsers = Proxima.sessions.getSessionValue("targetUsers")
            if targetUsers.len > 0 then
                if output then print(Proxima.cli.addOutputEntry(Proxima.cli.message.success("Accessed user names! Updating list...")))
                if output then print(Proxima.cli.addOutputEntry(Proxima.cli.message.info("If there is a payload injection, you can try to brute with available information.")))
            else
                if output then print(Proxima.cli.addOutputEntry(Proxima.cli.message.error("Couldn't access user names, you can try another method...")))
            end if
        end if
    end if
end function

Proxima.exploit.handleComputer = function (attackResult, exploitID, output)
    acquiredUser = self.acquireUser(attackResult)
    if output then print(Proxima.cli.addOutputEntry(Proxima.cli.message.success("Computer access granted via user: <b>" + acquiredUser + "</b>!")))
    targetUsers = Proxima.sessions.getSessionValue("targetUsers")
    if targetUsers.len > 0 and Proxima.utils.mapHasValue(targetUsers, "password", "UNKNOWN") == false then
        if output then print(Proxima.cli.addOutputEntry(Proxima.cli.message.info("Skipping password search, we already accessed account informations...")))
    else
        homeFolder = attackResult.File("/home")
        hasAccessedPasswd = false
        if acquiredUser != "guest" then
            if output then print(Proxima.cli.addOutputEntry(Proxima.cli.message.info("Trying to access /etc/passwd file...")))
            passwdFile = attackResult.File("/etc/passwd")
            accessPasswdFile = self.accessPasswdFile(passwdFile)
            if accessPasswdFile then
                if output then print(Proxima.cli.addOutputEntry(Proxima.cli.message.success("Accessed the /etc/passwd file!")))
                if output then print(Proxima.cli.addOutputEntry(Proxima.cli.message.info("Updated the target users list!")))
                if output then print(Proxima.cli.addOutputEntry(Proxima.cli.message.progress("Accessing all mail and bank informations...")))
                mailInfo = self.getMailInfo(homeFolder)
                bankInfo = self.getBankInfo(homeFolder)
                if bankInfo and mailInfo then
                    if output then print(Proxima.cli.addOutputEntry(Proxima.cli.message.success("Accessed and updated mail and bank informations! Updating lists...")))
                else
                    if output then print(Proxima.cli.addOutputEntry(Proxima.cli.message.error("Couldn't access mail and bank informations!é")))
                end if
                Proxima.sessions.setSessionValue("payloadInjection", false)
                if output then print(Proxima.cli.addOutputEntry(Proxima.cli.message.info("Disabled password injection method to prevent future conflicts...")))
                hasAccessedPasswd = true
            end if
        end if
        if hasAccessedPasswd == false then
            if output then print(Proxima.cli.addOutputEntry(Proxima.cli.message.warning("Coulnd't access /etc/passwd file, you have to gain root access with a different method.")))
            self.getUsers(homeFolder)
            targetUsers = Proxima.sessions.getSessionValue("targetUsers")
            if targetUsers.len > 0 then
                if output then print(Proxima.cli.addOutputEntry(Proxima.cli.message.success("Accessed user names! Updating list...")))
                if output then print(Proxima.cli.addOutputEntry(Proxima.cli.message.info("If there is a payload injection, you can try to brute with available information.")))
            else
                if output then print(Proxima.cli.addOutputEntry(Proxima.cli.message.error("Couldn't access user names, you can try another method...")))
            end if
        end if
    end if
    self.setExploitResult(exploitID, 1)
end function

Proxima.exploit.handleFile = function (attackResult, exploitID, output)
    acquiredUser = self.reachFileOwner(attackResult)
    if output then print(Proxima.cli.addOutputEntry(Proxima.cli.message.success("File access granted via user: <b>" + acquiredUser + "</b>!")))
    targetUsers = Proxima.sessions.getSessionValue("targetUsers")
    if targetUsers.len > 0 and Proxima.utils.mapHasValue(targetUsers, "password", "UNKNOWN") == false then
        if output then print(Proxima.cli.addOutputEntry(Proxima.cli.message.info("Skipping password search, we already accessed account informations...")))
    else
        homeFolder = self.reachHomeDirectory(attackResult)
        hasAccessedPasswd = false
        if acquiredUser != "guest" then
            if output then print(Proxima.cli.addOutputEntry(Proxima.cli.message.progress("Acquired file, trying to access /etc/passwd file...")))
            passwdFile = self.reachPasswdFile(attackResult)
            accessPasswdFile = self.accessPasswdFile(passwdFile)
            if accessPasswdFile then
                if output then print(Proxima.cli.addOutputEntry(Proxima.cli.message.success("Accessed the /etc/passwd file!")))
                if output then print(Proxima.cli.addOutputEntry(Proxima.cli.message.info("Updated the target users list!")))
                if output then print(Proxima.cli.addOutputEntry(Proxima.cli.message.progress("Accessing all mail and bank informations...")))
                mailInfo = self.getMailInfo(homeFolder)
                bankInfo = self.getBankInfo(homeFolder)
                if bankInfo and mailInfo then
                    if output then print(Proxima.cli.addOutputEntry(Proxima.cli.message.success("Accessed and updated mail and bank informations! Updating lists...")))
                else
                    if output then print(Proxima.cli.addOutputEntry(Proxima.cli.message.error("Couldn't access mail and bank informations!é")))
                end if
                Proxima.sessions.setSessionValue("payloadInjection", false)
                if output then print(Proxima.cli.addOutputEntry(Proxima.cli.message.info("Disabled password injection method to prevent future conflicts...")))
                hasAccessedPasswd = true
            end if
        end if
        if hasAccessedPasswd == false then
            if output then print(Proxima.cli.addOutputEntry(Proxima.cli.message.warning("Coulnd't access /etc/passwd file, you have to gain root access with a different method.")))
            self.getUsers(homeFolder)
            targetUsers = Proxima.sessions.getSessionValue("targetUsers")
            if targetUsers.len > 0 then
                if output then print(Proxima.cli.addOutputEntry(Proxima.cli.message.success("Accessed user names! Updating list...")))
                if output then print(Proxima.cli.addOutputEntry(Proxima.cli.message.info("If there is a payload injection, you can try to brute with available information.")))
            else
                if output then print(Proxima.cli.addOutputEntry(Proxima.cli.message.error("Couldn't access user names, you can try another method...")))
            end if
        end if
    end if
    self.setExploitResult(exploitID, 2)
end function

Proxima.exploit.handlePayload = function (attackResult, exploitID, output)
    payloadInjection = Proxima.sessions.getSessionValue("payloadInjection")
    if payloadInjection then
        if attackResult == 1 then
            if output then print(Proxima.cli.addOutputEntry(Proxima.cli.message.success("Payload successfuly worked, injection completed! <b>[PASSWORD:" + Proxima.settings.injectionPassword + "]</b>")))
        else if attackResult == 0 or attackResult == null then
            if output then print(Proxima.cli.addOutputEntry(Proxima.cli.message.error("Payload didn't work correctly! Failed to inject password...")))
        end if
    else
        if output then print(Proxima.cli.addOutputEntry(Proxima.cli.message.error("Payload injection option is disabled! Didn't inject password...")))
    end if
    self.setExploitResult(exploitID, 3)
end function

Proxima.exploit.handleFailedAttempt = function (attackResult, exploitID, output)
    self.setExploitResult(exploitID, 4)
    if output then print(Proxima.cli.addOutputEntry(Proxima.cli.message.error("Exploit did not work correctly, please try another one if it has any.")))
end function

Proxima.exploit.handleAttackResult = function (attackResult, exploitID, output)
    if typeof(attackResult) == "shell" then
        self.handleShell(attackResult, exploitID, output)
    else if typeof(attackResult) == "computer" then
        self.handleComputer(attackResult, exploitID, output)
    else if typeof(attackResult) == "file" then
        self.handleFile(attackResult, exploitID, output)
    else if typeof(attackResult) == "number" then
        self.handlePayload(attackResult, exploitID, output)
    else
        self.handleFailedAttempt(attackResult, exploitID, output)
    end if
end function

Proxima.exploit.execute = function (exploitID, output = true)
    targetIP = Proxima.sessions.getSessionValue("targetIP")
    targetExploits = Proxima.sessions.getSessionValue("targetExploits")
    if targetExploits.len == 0 then
        if output then print(Proxima.cli.addOutputEntry(Proxima.cli.message.error("No exploits available, please make a scan first.")))
    else if exploitID != null and targetExploits.hasIndex(exploitID - 1) then
        targetExploit = targetExploits[exploitID - 1]
        libraryDump = null
        if output then print(Proxima.cli.addOutputEntry(Proxima.cli.message.info("Launching exploit... <b>[ID:" + targetExploit.id + "]</b>")))
        if self.isLocal() then
            if output then print(Proxima.cli.addOutputEntry(Proxima.cli.message.progress("Trying to exploit <b>" + targetExploit.lib_name + "</b> library.")))
            libraryDump = Proxima.globals.metaxploit.load(targetExploit.path)
        else
            if output then print(Proxima.cli.addOutputEntry(Proxima.cli.message.progress("Trying to connect <b>" + targetIP + "</b> on port <b>" + targetExploit.port_number + "</b>.")))
            netSession = Proxima.globals.metaxploit.net_use(targetIP, targetExploit.port_number)
            if netSession != null then
                if output then print(Proxima.cli.addOutputEntry(Proxima.cli.message.success("Connection established!")))
                libraryDump = netSession.dump_lib
                if output then print(Proxima.cli.addOutputEntry(Proxima.cli.message.progress("Attempting to exploit <b>" + libraryDump.lib_name + "</b> at port <b>" + targetExploit.port_number + "</b>.")))
            else
                if output then print(Proxima.cli.addOutputEntry(Proxima.cli.message.error("Unable to connect to port <b>" + targetExploit.port_number + "</b>, it has firewall protection.")))
            end if
        end if
        if output then print(Proxima.cli.addOutputEntry(Proxima.cli.message.progress("Injecting values into the library... <b>[MEM_ADDR:" + targetExploit.memAddr + "|UNSEC_ZONE:" + targetExploit.unsecZone + "]</b>")))
        attackResult = null
        payloadInjection = Proxima.sessions.getSessionValue("payloadInjection")
        if payloadInjection then
            attackResult = libraryDump.overflow(targetExploit.memAddr, targetExploit.unsecZone, Proxima.settings.injectionPassword)
        else
            attackResult = libraryDump.overflow(targetExploit.memAddr, targetExploit.unsecZone)
        end if
        Proxima.cli.clearCLI()
        wait(0.5)
        self.handleAttackResult(attackResult, exploitID, output)
    else
        if output then print(Proxima.cli.addOutputEntry(Proxima.cli.message.error("No exploit found with specified ID. <b>[ID:" + exploitID + "]</b>")))
    end if
end function

Proxima.exploit.autoExecute = function ()
    targetExploits = Proxima.sessions.getSessionValue("targetExploits")
    if targetExploits.len == 0 then
        print(Proxima.cli.addOutputEntry(Proxima.cli.message.error("No exploits available, please make a scan first.")))
    else
        print(Proxima.cli.addOutputEntry(Proxima.cli.message.progress("Launching all exploits...")))
        for targetExploit in targetExploits
            self.execute(targetExploit.id, false)
        end for
        print(Proxima.cli.addOutputEntry(Proxima.cli.message.success("Execution process completed!")))
    end if
end function

// ------------------------------------------------------------------------------------------------------------

Proxima.exploit.launchShell = function (shellID)
    targetShells = Proxima.sessions.getSessionValue("targetShells")
    if targetShells.len > 0 then
        if shellID != null and targetShells.hasIndex(shellID - 1) then
            targetShell = targetShells[shellID - 1]
            print(Proxima.cli.addOutputEntry(Proxima.cli.message.progress("Launching shell on <b>" + targetShell.public_ip + "|" + targetShell.local_ip + "</b> via <b>" + targetShell.owner + "</b> privilege. <b>[ID:" + targetShell.id + "]</b>")))
            wait(0.5)
            targetShell.shell_object.start_terminal
        else
            print(Proxima.cli.addOutputEntry(Proxima.cli.message.error("No open shell found with specified ID. <b>[ID:" + shellID + "]</b>")))
        end if
    else
        print(Proxima.cli.addOutputEntry(Proxima.cli.message.error("No open shells found to connect, please execute an exploit first.")))
    end if
end function

Proxima.exploit.executeBinary = function (binaryPath, launchParameters = null, output = true)
    targetShells = Proxima.sessions.getSessionValue("targetShells")
    if targetShells.len > 0 then
        targetShell = targetShells[0]
        if targetShell.owner != "guest" then
            fileName = binaryPath.split("/")[-1].trim

            launchBinary = null
            if launchParameters != null then
                launchBinary = targetShell.shell_object.launch(binaryPath, launchParameters)
            else
                launchBinary = targetShell.shell_object.launch(binaryPath)
            end if

            if launchBinary == null or launchBinary == 0 or typeof(launchBinary) == "string" then
                print(Proxima.cli.addOutputEntry(Proxima.cli.message.error("Couldn't launch desired binary file!")))
                if typeof(launchBinary) == "string" then print(Proxima.cli.addOutputEntry(Proxima.cli.message.error("Reason of failure: " + launchBinary)))
            else
                print(Proxima.cli.addOutputEntry(Proxima.cli.message.success("Successfuly launched <b>" + fileName + "</b>!")))
            end if
        else
            print(Proxima.cli.addOutputEntry(Proxima.cli.message.error("Couldn't execute desired binary file due to insufficent user privilege!")))
        end if
    else
        print(Proxima.cli.addOutputEntry(Proxima.cli.message.error("No open shells found, please execute an exploit first.")))
    end if
end function

Proxima.exploit.getFile = function (remoteFilePath, downloadTo = null, output = true)
    targetShells = Proxima.sessions.getSessionValue("targetShells")
    if targetShells.len > 0 then
        targetShell = targetShells[0]
        downloadTo = Proxima.globals.myPC.File(Proxima.settings.downloadsFolder)
        if localPath != null then downloadTo = localPath
        if downloadTo != null and downloadTo.has_permission("w") then
            fileName = filePath.split("/")[-1].trim
            remoteFile = targetShell.shell_object.host_computer.File(filePath)
            if remoteFile != null then
                print(Proxima.cli.addOutputEntry(Proxima.cli.message.progress("Attempting to download <b>" + fileName + "</b>...")))
                if remoteFile.has_permission("r") then
                    downloadFile = targetShell.shell_object.scp(filePath, downloadTo.path, Proxima.globals.myShell)
                    Proxima.cli.clearCLI()
                    wait(0.5)
                    if typeof(downloadFile) == "string" or typeof(downloadFile) == null then
                        print(Proxima.cli.addOutputEntry(Proxima.cli.message.error("Couldn't download <b>" + fileName + "</b>!")))
                        print(Proxima.cli.addOutputEntry(Proxima.cli.message.error("Reason of failure: " + downloadFile)))
                    else
                        print(Proxima.cli.addOutputEntry(Proxima.cli.message.success("Successfuly downloaded <b>" + fileName + "</b>!")))
                        Proxima.cli.addTransferProcess(remoteFile.size)
                    end if
                else
                    print(Proxima.cli.addOutputEntry(Proxima.cli.message.error("Couldn't download requested file due to insufficent user privilege!")))
                end if
            else
                print(Proxima.cli.addOutputEntry(Proxima.cli.message.error("Couldn't download <b>" + fileName + "</b>. Remote file does not exist!")))
            end if
        else
            print(Proxima.cli.addOutputEntry(Proxima.cli.message.error("Couldn't find downloads folder! You can change desired location via <b>settings.src</b>")))
        end if
    else
        print(Proxima.cli.addOutputEntry(Proxima.cli.message.error("No open shells found, please execute an exploit first.")))
    end if
end function

Proxima.exploit.putFile = function (localFilePath, uploadTo = null, output = true)
    targetShells = Proxima.sessions.getSessionValue("targetShells")
    if targetShells.len > 0 then
        targetShell = targetShells[0]
        uploadTo = "/home/" + targetShell.owner
        if remotePath != null then uploadTo = remotePath
        getUploadFile = Proxima.globals.myPC.File(filePath)
        if getUploadFile != null and getUploadFile.has_permission("r") then
            fileName = filePath.split("/")[-1].trim
            print(Proxima.cli.addOutputEntry(Proxima.cli.message.progress("Attempting to upload <b>" + fileName + "</b>...")))
            checkRemotePath = targetShell.shell_object.host_computer.File(uploadTo)
            if checkRemotePath != null then
                if checkRemotePath.has_permission("w") then
                    uploadFile = Proxima.globals.myShell.scp(getUploadFile.path, remoteUploadFolder, remoteShell.shell_object)
                    Proxima.cli.clearCLI()
                    wait(0.5)
                    if typeof(uploadFile) == "string" or typeof(uploadFile) == null then
                        print(Proxima.cli.addOutputEntry(Proxima.cli.message.error("Couldn't upload <b>" + fileName + "</b>!")))
                        print(Proxima.cli.addOutputEntry(Proxima.cli.message.error("Reason of failure: " + uploadFile)))
                    else
                        print(Proxima.cli.addOutputEntry(Proxima.cli.message.success("Successfuly uploaded <b>" + fileName + "</b>!")))
                    end if
                else
                    print(Proxima.cli.addOutputEntry(Proxima.cli.message.error("Couldn't download requested file due to insufficent user privilege!")))
                end if
            else
                print(Proxima.cli.addOutputEntry(Proxima.cli.message.error("Couldn't upload <b>" + fileName + "</b>. Remote upload path does not exist!")))
            end if
        else
            print(Proxima.cli.addOutputEntry(Proxima.cli.message.error("No valid upload file found in given path!")))
        end if
    else
        print(Proxima.cli.addOutputEntry(Proxima.cli.message.error("No open shells found, please execute an exploit first.")))
    end if
end function

Proxima.exploit.deleteFile = function (filePath, output = true)
    targetComputer = null
    if self.isLocal() then
        if Proxima.globals.activeUser != "guest" then
            targetComputer = Proxima.globals.myPC
        else
            targetComputer = null
        end if
    else
        targetShells = Proxima.sessions.getSessionValue("targetShells")
        if targetShells.len > 0 then
            targetShell = targetShells[0]
            if targetShell.owner != "guest" then
                targetComputer = targetShell.shell_object.host_computer
            else
                targetComputer = null
            end if
        else
            targetComputer = false
        end if
    end if
    if typeof(targetComputer) == "computer" then
        fileName = filePath.split("/")[-1].trim
        print(Proxima.cli.addOutputEntry(Proxima.cli.message.progress("Attempting to delete <b>" + fileName + "</b>...")))
        remoteFile = targetComputer.File(filePath)
        if remoteFile != null then
            deletionFileResult = remoteFile.delete
            if typeof(deletionFileResult) == "string" and deletionFileResult.len > 0 then
                print(Proxima.cli.addOutputEntry(Proxima.cli.message.error("There was an error while deleting a file: " + deletionFileResult)))
            else
                print(Proxima.cli.addOutputEntry(Proxima.cli.message.success("<b>" + fileName + "</b> file got deleted successfully.")))
            end if
        else
            print(Proxima.cli.addOutputEntry(Proxima.cli.message.error("Couldn't delete <b>" + fileName + "</b>. Remote file does not exist!")))
        end if
    else
        if targetComputer == null then
            print(Proxima.cli.addOutputEntry(Proxima.cli.message.error("Couldn't delete file due to insufficient user privileges!")))
        else if targetComputer == false then
            print(Proxima.cli.addOutputEntry(Proxima.cli.message.error("No open shells found!")))
        end if
    end if
end function

// ------------------------------------------------------------------------------------------------------------

Proxima.exploit.isSSHAvailable = function ()
    isConnectableViaSSH = false
    targetPorts = Proxima.sessions.getSessionValue("targetPorts")
    for targetPort in targetPorts
        if targetPort.port_number == 22 and targetPort.state == "OPEN" then
            isConnectableViaSSH = true
            break
        end if
    end for
    return isConnectableViaSSH
end function

Proxima.exploit.isFTPAvailable = function ()
    isConnectableViaFTP = false
    targetPorts = Proxima.sessions.getSessionValue("targetPorts")
    for targetPort in targetPorts
        if targetPort.port_number == 21 and targetPort.state == "OPEN" then
            isConnectableViaFTP = true
            break
        end if
    end for
    return isConnectableViaFTP
end function

Proxima.exploit.getShellViaSSH = function (username, password)
    if self.isSSHAvailable() then
        targetIP = Proxima.sessions.getSessionValue("targetIP")
        connectionResult = Proxima.globals.myShell.connect_service(targetIP, 22, username, password)
        Proxima.cli.clearCLI()
        wait(0.5)
        if typeof(connectionResult) == "shell" then return connectionResult
    else
        return null
    end if
end function

Proxima.exploit.getShellViaFTP = function (username, password)
    if self.isFTPAvailable() then
        targetIP = Proxima.sessions.getSessionValue("targetIP")
        connectionResult = Proxima.globals.myShell.connect_service(targetIP, 21, username, password)
        Proxima.cli.clearCLI()
        wait(0.5)
        if typeof(connectionResult) == "shell" then return connectionResult
    else
        return null
    end if
end function

Proxima.exploit.tunnelConnection = function ()
    targetIP = Proxima.sessions.getSessionValue("targetIP")
    targetUsers = Proxima.sessions.getSessionValue("targetUsers")
    targetShell = null
    if targetUsers.len > 0 and Proxima.utils.mapHasValue(targetUsers, "password", "UNKNOWN") == false then
        targetUser = targetUsers[0]

        if targetUser.password.len == 32 then
            print(Proxima.cli.addOutputEntry(Proxima.cli.message.error("User password is not deciphered yet! Deciphering password...")))
            self.decipherUserPassword(targetUser.id)
        end if
        
        print(Proxima.cli.addOutputEntry(Proxima.cli.message.progress("Trying to tunnel shell by SSH or FTP protocol via <b>" + targetUser.username + "</b> privilege. <b>[IP:" + targetIP + "]</b>")))
        sshShell = self.getShellViaSSH(targetUser.username, targetUser.password)
        ftpShell = self.getShellViaFTP(targetUser.username, targetUser.password)

        if sshShell != null then
            targetShell = sshShell
        else
            if ftpShell != null then
                targetShell = ftpShell
            end if
        end if

        if typeof(targetShell) == "shell" then
            additionResult = self.addShellConnection(targetShell, targetUser.username)
            if additionResult then
                print(Proxima.cli.addOutputEntry(Proxima.cli.message.success("Tunneled target via shell successfuly!")))
            else
                print(Proxima.cli.addOutputEntry(Proxima.cli.message.warning("This shell connection is already in the target shells list. Skipping...")))
            end if
        else
            print(Proxima.cli.addOutputEntry(Proxima.cli.message.error("Couldn't tunnel via SSH or FTP, ports are closed.")))
        end if
    else if targetUsers.len > 0 and Proxima.utils.mapHasValue(targetUsers, "password", "UNKNOWN") == true then
        targetExploits = Proxima.sessions.getSessionValue("targetExploits")
        if Proxima.utils.mapHasValue(targetExploits, "result", 3) then
            for targetUser in targetUsers
                print(Proxima.cli.addOutputEntry(Proxima.cli.message.progress("Trying to tunnel shell by SSH or FTP protocol via <b>" + targetUser.username + "</b> privilege. <b>[IP:" + targetIP + "]</b>")))
                sshShell = self.getShellViaSSH(targetUser.username, targetUser.password)
                ftpShell = self.getShellViaFTP(targetUser.username, targetUser.password)
        
                if sshShell != null then
                    targetShell = sshShell
                else
                    if ftpShell != null then
                        targetShell = ftpShell
                    end if
                end if
        
                if typeof(targetShell) == "shell" then
                    additionResult = self.addShellConnection(targetShell, targetUser.username)
                    if additionResult then
                        print(Proxima.cli.addOutputEntry(Proxima.cli.message.success("Tunneled target via shell successfuly!")))
                    else
                        print(Proxima.cli.addOutputEntry(Proxima.cli.message.warning("This shell connection is already in the target shells list. Skipping...")))
                    end if
                else
                    print(Proxima.cli.addOutputEntry(Proxima.cli.message.error("Couldn't tunnel via SSH or FTP, ports are closed.")))
                end if
            end for
        else
            print(Proxima.cli.addOutputEntry(Proxima.cli.message.error("No user information found to be used for tunnelling, please execute an exploit first...")))
        end if
    else
        print(Proxima.cli.addOutputEntry(Proxima.cli.message.error("No user information found to be used for tunnelling, please execute an exploit first...")))
    end if
end function

Proxima.exploit.createJumpFile = function (targetShell, userPassword)
    targetComputer = targetShell.host_computer
    shellCode = "rootShell = get_shell(" + char(34) + "root" + char(34) + ", " + char(34) + str(userPassword) + char(34) + ")" + char(10)
    shellCode = shellCode + "get_custom_object.acquiredShell = rootShell"
    createJumpFile = targetComputer.touch(Proxima.settings.remoteUploadFolder, "root_shell.src")
    setContent = targetComputer.File(Proxima.settings.remoteUploadFolder + "/root_shell.src").set_content(shellCode)
    if typeof(setContent) == "string" or setContent == 0 then
        // ERROR
    else
        if createJumpFile == 1 then
            // SUCCESS
        else
            // ERROR
        end if
    end if
    buildScript = targetShell.build(Proxima.settings.remoteUploadFolder + "/root_shell.src", Proxima.settings.remoteUploadFolder)
    if buildScript != "" then
        return false
    else
        return true
    end if
end function

Proxima.exploit.jumpShell = function ()
    targetShells = Proxima.sessions.getSessionValue("targetShells")
    if targetShells.len > 0 then
        targetUsers = Proxima.sessions.getSessionValue("targetUsers")
        if Proxima.utils.mapHasValue(targetUsers, "password", "UNKNOWN") == false then     
            targetShell = targetShells[0].shell_object
            createJumpFile = self.createJumpFile(targetShell, targetUsers[0].password)
            if createJumpFile then
                launchScript = targetShell.launch(Proxima.settings.remoteUploadFolder + "/root_shell")
                if launchScript == 0 or typeof(launchScript) == "string" then
                    print(Proxima.cli.addOutputEntry(Proxima.cli.message.error("Couldn't launch jump file!")))
                else
                    print(Proxima.cli.addOutputEntry(Proxima.cli.message.success("Successfuly launched <b>root_shell</b>.")))    
                    acquiredShell = get_custom_object.acquiredShell
                    additionResult = self.addShellConnection(acquiredShell, targetUsers[0].username)
                    print(Proxima.cli.addOutputEntry(Proxima.cli.message.success("Tunneled target via shell successfuly!")))
                    print(Proxima.cli.addOutputEntry(Proxima.cli.message.info("Updated the target shells list.")))
                end if
            else
                print(Proxima.cli.addOutputEntry(Proxima.cli.message.error("Couldn't create jump file!")))
            end if
        else if Proxima.utils.mapHasValue(self.targetUsers, "password", "UNKNOWN") == true then
            for targetUser in self.targetUsers
                targetShell = targetShells[0].shell_object
                createJumpFile = self.createJumpFile(targetShell, targetUser.password)
                if createJumpFile then
                    launchScript = targetShell.launch(Proxima.settings.remoteUploadFolder + "/root_shell")
                    if launchScript == 0 or typeof(launchScript) == "string" then
                        print(Proxima.cli.addOutputEntry(Proxima.cli.message.error("Couldn't launch jump file!")))
                    else
                        print(Proxima.cli.addOutputEntry(Proxima.cli.message.success("Successfuly launched <b>root_shell</b>.")))    
                        acquiredShell = get_custom_object.acquiredShell
                        additionResult = self.addShellConnection(acquiredShell, targetUser.username)
                        print(Proxima.cli.addOutputEntry(Proxima.cli.message.success("Tunneled target via shell successfuly!")))
                        print(Proxima.cli.addOutputEntry(Proxima.cli.message.info("Updated the target shells list.")))
                    end if
                else
                    print(Proxima.cli.addOutputEntry(Proxima.cli.message.error("Couldn't create jump file!")))
                end if
            end for
        end if
    else
        print(Proxima.cli.addOutputEntry(Proxima.cli.message.error("No open shells found to perform a jump!")))
    end if
end function

// ------------------------------------------------------------------------------------------------------------

Proxima.exploit.cleanUpLogs = function ()
    targetShells = Proxima.sessions.getSessionValue("targetShells")
    if targetShells.len > 0 then
        targetShell = targetShells[0]
        if targetShell.owner == "root" then
            logFile = targetShell.shell_object.host_computer.File("/var/system.log")
            deletionResultLog = logFile.delete
            if typeof(deletionResultLog) == "string" and deletionResultLog.len > 0 then
                print(Proxima.cli.addOutputEntry(Proxima.cli.message.error("Couldn't delete system logs: " + deletionResultLog)))
            else
                print(Proxima.cli.addOutputEntry(Proxima.cli.message.success("Cleaned up system logs successfuly!")))
            end if
        else
            print(Proxima.cli.addOutputEntry(Proxima.cli.message.error("Couldn't delete system logs due to insufficent user privilege!")))
        end if
    else
        print(Proxima.cli.addOutputEntry(Proxima.cli.message.error("No open shells found, please execute an exploit first.")))
    end if
end function

Proxima.exploit.corruptComputer = function ()
    targetShells = Proxima.sessions.getSessionValue("targetShells")
    if targetShells.len > 0 then
        targetShell = targetShells[0]
        if targetShell.owner == "root" then
            targetComputer = targetShell.shell_object.host_computer
            imgFile = targetComputer.File("/boot/kernel.img")
            deletionResultImage = imgFile.delete
            if typeof(deletionResultImage) == "string" and deletionResultImage.len > 0 then
                print(Proxima.cli.addOutputEntry(Proxima.cli.message.error("There was an error while deleting <b>kernel.img</b> file: " + deletionResultImage)))
            else
                print(Proxima.cli.addOutputEntry(Proxima.cli.message.success("<b>kernel.img</b> file got deleted successfully!")))
            end if
            print(Proxima.cli.addOutputEntry(Proxima.cli.message.success("Deleting system logs to leave no trace...")))
            logFile = targetComputer.File("/var/system.log")
            deletionResultLog = logFile.delete
            if typeof(deletionResultLog) == "string" and deletionResultLog.len > 0 then
                print(Proxima.cli.addOutputEntry(Proxima.cli.message.error("There was an error while deleting <b>system.log</b> file: " + deletionResultLog)))
            else
                print(Proxima.cli.addOutputEntry(Proxima.cli.message.success("<b>system.log</b> file got deleted successfully.")))
            end if
            print(Proxima.cli.addOutputEntry(Proxima.cli.message.progress("Rebooting the remote computer to complete system corruption...")))
            launchBinary = targetShell.shell_object.launch("/bin/reboot")
            if launchBinary == null or launchBinary == 0 or typeof(launchBinary) == "string" then
                print(Proxima.cli.addOutputEntry(Proxima.cli.message.error("Couldn't reboot desired computer! You have to do it manually...")))
                if typeof(launchBinary) == "string" then print(Proxima.cli.addOutputEntry(Proxima.cli.message.error("Reason of failure: " + launchBinary)))
            else
                print(Proxima.cli.addOutputEntry(Proxima.cli.message.success("Successfuly rebooted! <b>[IP:" + targetShell.public_ip + "]</b>")))
            end if
        else
            print(Proxima.cli.addOutputEntry(Proxima.cli.message.error("Couldn't delete boot image due to insufficent user privilege!")))
        end if
    else
        print(Proxima.cli.addOutputEntry(Proxima.cli.message.error("No open shells found, please execute an exploit first.")))
    end if
end function

Proxima.exploit.putTools = function ()
    targetShells = Proxima.sessions.getSessionValue("targetShells")
    if targetShells.len > 0 then
        remoteShell = targetShells[0]
    
        remoteUploadFolder = Proxima.settings.remoteUploadFolder
        toolsFolder = Proxima.globals.myPC.File(Proxima.settings.toolsFolder)
    
        if remoteUploadFolder != null and toolsFolder != null then
            fileList = Proxima.utils.collectFiles(toolsFolder)
            if fileList.len > 0 then
                for filePath in fileList
                    fileName = filePath.split("/")[-1].trim
                    print(Proxima.cli.addOutputEntry(Proxima.cli.message.progress("Attempting to upload <b>" + fileName + "</b>...")))
                    print(Proxima.cli.addOutputEntry("+------------------------------------+"))
                    uploadFile = Proxima.globals.myShell.scp(filePath, remoteUploadFolder, remoteShell.shell_object)
                    print(Proxima.cli.addOutputEntry("+------------------------------------+"))
                    if typeof(uploadFile) == "string" or typeof(uploadFile) == null then
                        print(Proxima.cli.addOutputEntry(Proxima.cli.message.error("Couldn't upload <b>" + fileName + "</b>!")))
                        print(Proxima.cli.addOutputEntry(Proxima.cli.message.error("Reason of failure: " + uploadFile)))
                    else
                        print(Proxima.cli.addOutputEntry(Proxima.cli.message.success("Successfuly uploaded <b>" + fileName + "</b>!")))
                    end if
                end for
            else
                print(Proxima.cli.addOutputEntry(Proxima.cli.message.error("No file or folder found in given local upload folder!")))
            end if
        else
            print(Proxima.cli.addOutputEntry(Proxima.cli.message.error("No valid upload folder found in given directory!")))
        end if
    else
        print(Proxima.cli.addOutputEntry(Proxima.cli.message.error("No open shells found, please execute an exploit first.")))
    end if
end function

// ------------------------------------------------------------------------------------------------------------

Proxima.exploit.colorizePrivilegeLevel = function (shellPrivilege)
    if shellPrivilege == 0 then
        return "ROOT#9370DB"
    else if shellPrivilege == 1 then
        return "USER#08FF57"
    else if shellPrivilege == 2 then
        return "GUEST#FFDD00"
    end if
end function

Proxima.exploit.colorizeExploitResult = function (exploitResult)
    if exploitResult == 0 then
        return "SHELL#9370DB"
    else if exploitResult == 1 then
        return "COMPUTER#08FF57"
    else if exploitResult == 2 then
        return "FILE#00FFBB"
    else if exploitResult == 3 then
        return "PAYLOAD#FFDD00"
    else if exploitResult == 4 then
        return "FAILED#FF1548"
    else
        return "UNKNOWN#0091FF"
    end if
end function

Proxima.exploit.colorizePassword = function (userPassword)
    if userPassword == "UNKNOWN" then
        return userPassword + "#0091FF"
    else if userPassword.len == 32 then
        return userPassword + "#FFDD00"
    else if userPassword.len < 32 then
        return userPassword + "#08FF57"
    end if
end function

Proxima.exploit.displayPortInfo = function ()
    header_list = ["ID", "PORT", "STATE", "SERVICE", "VERSION", "PUBLIC_IP", "LAN_IP"]
    content_list = []
    targetPorts = Proxima.sessions.getSessionValue("targetPorts")
    for targetPort in targetPorts
        p_id = str(targetPort.id)
        p_number = str(targetPort.port_number)
        p_state = null
        if targetPort.state == "OPEN" then p_state = "OPEN#08FF57"
        if targetPort.state == "CLOSED" then p_state = "CLOSED#FF1548"
        p_service = targetPort.service
        p_version = targetPort.version
        p_public_ip = targetPort.public_ip
        p_lan_ip = targetPort.lan_ip
        content_list.push([ p_id, p_number, p_state, p_service, p_version, p_public_ip, p_lan_ip ])
    end for

    Proxima.utils.formatList(header_list, content_list)
end function

Proxima.exploit.displayLibraryInfo = function ()
    header_list = ["ID", "LIBRARY_NAME", "VERSION", "PATH"]
    content_list = []
    targetLibraries = Proxima.sessions.getSessionValue("targetLibraries")
    for targetLibrary in targetLibraries
        l_id = str(targetLibrary.id)
        l_name = targetLibrary.lib_name
        l_version = targetLibrary.version
        l_path = targetLibrary.path
        content_list.push([ l_id, l_name, l_version, l_path ])
    end for

    Proxima.utils.formatList(header_list, content_list)
end function

Proxima.exploit.displayExploitInfo = function ()
    header_list = []
    if self.isLocal() then
        header_list = ["ID", "LIBRARY_NAME", "MEM_ADDRESS", "UNSEC_ZONE", "RESULT"]
    else
        header_list = ["ID", "PORT", "MEM_ADDRESS", "UNSEC_ZONE", "RESULT"]
    end if

    content_list = []
    targetExploits = Proxima.sessions.getSessionValue("targetExploits")
    for targetExploit in targetExploits
        e_id = str(targetExploit.id)
        e_mem = targetExploit.memAddr
        e_uz = targetExploit.unsecZone
        e_result = self.colorizeExploitResult(targetExploit.result)
        if self.isLocal() then
            e_name = targetExploit.lib_name
            content_list.push([ e_id, e_name, e_mem, e_uz, e_result ])
        else
            e_port_number = str(targetExploit.port_number)
            content_list.push([ e_id, e_port_number, e_mem, e_uz, e_result ])
        end if
    end for

    Proxima.utils.formatList(header_list, content_list)
end function

Proxima.exploit.displayUserInfo = function ()
    header_list = ["ID", "USERNAME", "PASSWORD"]
    content_list = []
    targetUsers = Proxima.sessions.getSessionValue("targetUsers")
    for targetUser in targetUsers
        u_id = str(targetUser.id)
        u_username = targetUser.username
        u_password = self.colorizePassword(targetUser.password)
        content_list.push([ u_id, u_username, u_password ])
    end for

    Proxima.utils.formatList(header_list, content_list)
end function

Proxima.exploit.displayShellInfo = function ()
    header_list = ["ID", "OWNER", "PRIVILEGE", "PUBLIC_IP", "LOCAL_IP"]
    content_list = []
    targetShells = Proxima.sessions.getSessionValue("targetShells")
    for targetShell in targetShells
        s_id = str(targetShell.id)
        s_owner = targetShell.owner
        s_privilege_level = self.colorizePrivilegeLevel(targetShell.privilege_level)
        s_public_ip = targetShell.public_ip
        s_local_ip = targetShell.local_ip
        content_list.push([ s_id, s_owner, s_privilege_level, s_public_ip, s_local_ip ])
    end for

    Proxima.utils.formatList(header_list, content_list)
end function

Proxima.exploit.displayMailInfo = function ()
    header_list = ["ID", "OWNER", "MAIL", "PASSWORD"]
    content_list = []
    targetMails = Proxima.sessions.getSessionValue("targetMails")
    for targetMail in targetMails
        m_id = str(targetMail.id)
        m_owner = targetMail.owner
        m_mail_addr = targetMail.mail_addr
        m_password = self.colorizePassword(targetMail.password)
        content_list.push([ m_id, m_owner, m_mail_addr, m_password ])
    end for

    Proxima.utils.formatList(header_list, content_list)
end function

Proxima.exploit.displayBankInfo = function ()
    header_list = ["ID", "OWNER", "ACCOUNT", "PASSWORD"]
    content_list = []
    targetBanks = Proxima.sessions.getSessionValue("targetBanks")
    for targetBank in targetBanks
        b_id = str(targetBank.id)
        b_owner = targetBank.owner
        b_account = targetBank.account
        b_password = self.colorizePassword(targetBank.password)
        content_list.push([ b_id, b_owner, b_account, b_password ])
    end for

    Proxima.utils.formatList(header_list, content_list)
end function