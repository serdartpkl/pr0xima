Proxima.exploit = {}

Proxima.exploit.router = null
Proxima.exploit.targetIP = null

Proxima.exploit.targetPort = null
Proxima.exploit.targetPorts = []

Proxima.exploit.targetLibrary = null
Proxima.exploit.targetLibraries = []

Proxima.exploit.targetExploit = null
Proxima.exploit.targetExploits = []

Proxima.exploit.targetShell = null
Proxima.exploit.targetShells = []

Proxima.exploit.targetUser = null
Proxima.exploit.targetUsers = []

Proxima.exploit.targetMail = null
Proxima.exploit.targetMails = []

Proxima.exploit.targetBank = null
Proxima.exploit.targetBanks = []

Proxima.exploit.portID = 1
Proxima.exploit.libraryID = 1
Proxima.exploit.exploitID = 1
Proxima.exploit.userID = 1
Proxima.exploit.shellID = 1
Proxima.exploit.mailID = 1
Proxima.exploit.bankID = 1

Proxima.exploit.payloadInjection = true

// ------------------------------------------------------------------------------------------------------------

Proxima.exploit.resetLists = function ()
    self.targetPort = null
    self.targetPorts = []

    self.targetLibrary = null
    self.targetLibraries = []

    self.targetExploit = null
    self.targetExploits = []

    self.targetShell = null
    self.targetShells = []

    self.targetUser = null
    self.targetUsers = []

    self.targetMail = null
    self.targetMails = []

    self.targetBank = null
    self.targetBanks = []
end function

Proxima.exploit.resetValues = function ()
    self.portID = 1
    self.libraryID = 1
    self.exploitID = 1
    self.userID = 1
    self.shellID = 1
    self.mailID = 1
    self.bankID = 1
    self.payloadInjection = true
end function

Proxima.exploit.setTargetIP = function (targetIP)
    self.targetIP = targetIP
end function

Proxima.exploit.checkTargetIP = function ()
    if self.targetIP != null then
        self.router = get_router(self.targetIP)
        if self.router != null then
            return true
        else
            self.targetIP = null
            return false
        end if
    else
        return false
    end if
end function

Proxima.exploit.setTargetPort = function (targetPort)
    self.targetPort = targetPort
end function

Proxima.exploit.setTargetLibrary = function (targetLibrary)
    self.targetLibrary = targetLibrary
end function

Proxima.exploit.setTargetExploit = function (targetExploit)
    self.targetExploit = targetExploit
end function

Proxima.exploit.setTargetUser = function (targetUser)
    self.targetUser = targetUser
end function

Proxima.exploit.setTargetShell = function (targetShell)
    self.targetShell = targetShell
end function

Proxima.exploit.setTargetMail = function (targetMail)
    self.targetMail = targetMail
end function

Proxima.exploit.setTargetBank = function (targetBank)
    self.targetBank = targetBank
end function

// ------------------------------------------------------------------------------------------------------------

Proxima.exploit.checkPorts = function ()
    if self.checkTargetIP() then
        scannedPorts = used_ports(self.router)
        if scannedPorts.len == 0 or scannedPorts == null then
            return false
        else
            self.resetLists()
            self.resetValues()
            for scannedPort in scannedPorts
                portNumber = scannedPort.port_number
                portState = Proxima.utils.message.colorize("OPEN", "#08FF57")
                if is_closed(scannedPort) then portState = Proxima.utils.message.colorize("CLOSED", "#FF1548")
                portInfo = self.router.port_info(scannedPort).split(" ")
                portService = portInfo[0]
                portVersion = portInfo[1]
                portIP = scannedPort.get_lan_ip
                self.targetPorts.push({ "id": self.portID, "port_number": portNumber, "state": portState, "service": portService, "version": portVersion, "lan_ip": portIP  })
                self.portID = self.portID + 1
            end for
            Proxima.globals.cliMarker = Proxima.utils.message.colorize("[" + self.targetIP + "]", "#FFC466") + Proxima.utils.message.colorize("@" + Proxima.globals.applicationName, "#FC8403") + Proxima.utils.message.colorize("> ", "#008DFF")
            return true
        end if
    else
        return null
    end if
end function

Proxima.exploit.dumpPort = function (targetPort)
    totalExploits = 0
    if targetPort.state == "OPEN" then
        netSession = Proxima.globals.metaxploit.net_use(self.targetIP, targetPort.port_number)
        if netSession != null then
            libraryDump = netSession.dump_lib
            print(Proxima.utils.message.progress("Attempting to scan vulnerabilities... <b>[IP:" + self.targetIP + "|PORT:" + targetPort.port_number + "]</b>"))
            print(Proxima.utils.message.info("Library version found: <b>" + libraryDump.lib_name + " -> " + libraryDump.version + "</b>"))
            scanResult = Proxima.globals.metaxploit.scan(libraryDump)
            totalExploits = self.parseScanEntries(scanResult, libraryDump, targetPort)
        else
            print(Proxima.utils.message.error("Unable to connect to port <b>" + targetPort.port_number + "</b>. It has firewall protection."))
        end if 
    else
        print(Proxima.utils.message.error("Unable to connect to port <b>" + targetPort.port_number + "</b>. It is closed."))
    end if
    return totalExploits
end function

Proxima.exploit.scanPort = function ()
    if self.targetPorts.len > 0 then
        if self.targetPort != null and self.targetPorts.hasIndex(self.targetPort - 1) then
            totalExploits = 0
            targetPort = self.targetPorts[self.targetPort - 1]
            if self.targetExploits.len > 0 and Proxima.utils.hasValue(self.targetExploits, targetPort.port_number) then
                print(Proxima.utils.message.warning("This port is already scanned for exploits. Skipping... <b>[IP:" + self.targetIP + "|PORT:" + targetPort.port_number + "]</b>"))
                print(Proxima.utils.message.info("You can use 'exploits' command to view found exploits."))
            else
                totalExploits = self.dumpPort(targetPort)
                if totalExploits == 0 then
                    print(Proxima.utils.message.error("No useful vulnerabilities found on port <b>" + targetPort.port_number + "</b>!"))
                else if totalExploits > 0 then
                    print(Proxima.utils.message.success("<b>" + totalExploits + "</b> exploits found. Use 'exploits' command to view available exploits."))
                end if
            end if
        else
            print(Proxima.utils.message.error("No port found with the specified ID. <b>[ID:" + self.targetPort + "]</b>"))
        end if
    else
        if self.targetIP != null then
            print(Proxima.utils.message.error("No open ports found at the specified target IP address. <b>[IP:" + self.targetIP + "]</b>"))
        else
            print(Proxima.utils.message.error("There is no specified target IP address yet, please set a target IP address first."))
        end if
    end if
end function

Proxima.exploit.scanPorts = function ()
    if self.targetPorts.len > 0 then
        totalExploits = 0
        for targetPort in self.targetPorts
            if self.targetExploits.len > 0 and Proxima.utils.hasValue(self.targetExploits, targetPort.port_number) then
                print(Proxima.utils.message.info("This port is already scanned for exploits. Skipping... <b>[IP:" + self.targetIP + "|PORT:" + targetPort.port_number + "]</b>"))
                for targetExploit in self.targetExploits
                    if targetExploit.values[1] == targetPort.port_number then
                        totalExploits = totalExploits + 1
                    end if
                end for
            else
                totalExploits = totalExploits + self.dumpPort(targetPort)
            end if
        end for
        if totalExploits == 0 then
            print(Proxima.utils.message.error("No useful vulnerabilities found on any port."))
        else if totalExploits > 0 then
            print(Proxima.utils.message.success("<b>" + totalExploits + "</b> exploits found. Use 'exploits' command to view available exploits."))
        end if
    else
        if self.targetIP != null then
            print(Proxima.utils.message.error("No open ports found at the specified target IP address. <b>[IP:" + self.targetIP + "]</b>"))
        else
            print(Proxima.utils.message.error("There is no specified target IP address yet, please set a target IP address first."))
        end if
    end if
end function

// ------------------------------------------------------------------------------------------------------------

Proxima.exploit.checkLibraries = function ()
    librariesFolder = Proxima.globals.myPC.File("/lib")
    localLibraries = librariesFolder.get_files
    self.resetLists()
    self.resetValues()
    for localLibrary in localLibraries
        libraryInfo = Proxima.globals.metaxploit.load(localLibrary.path)
        self.targetLibraries.push({ "id": self.libraryID , "lib_name": libraryInfo.lib_name, "version": libraryInfo.version, "path": localLibrary.path })
        self.libraryID = self.libraryID + 1
    end for
end function

Proxima.exploit.dumpLibrary = function (targetLibrary)
    totalExploits = 0
    libraryDump = Proxima.globals.metaxploit.load(targetLibrary.path)
    print(Proxima.utils.message.progress("Attempting to scan vulnerabilities at <b>" + libraryDump.lib_name + "</b>!"))
    print(Proxima.utils.message.info("Library version found: <b>" + libraryDump.lib_name + " -> " + libraryDump.version + "</b>"))
    scanResult = Proxima.globals.metaxploit.scan(libraryDump)
    totalExploits = self.parseScanEntries(scanResult, libraryDump, targetLibrary)
    return totalExploits
end function

Proxima.exploit.scanLibrary = function ()
    if self.targetLibraries.len > 0 then
        if self.targetLibrary != null and self.targetLibraries.hasIndex(self.targetLibrary - 1) then
            totalExploits = 0
            targetLibrary = self.targetLibraries[self.targetLibrary - 1]
            if self.targetExploits.len > 0 and Proxima.utils.hasValue(self.targetExploits, targetLibrary.lib_name) then
                print(Proxima.utils.message.info("This library is already scanned for exploits. Skipping... <b>[LIB_NAME:" + targetLibrary.lib_name + "]</b>"))
                print(Proxima.utils.message.info("You can use 'exploits' command to view found exploits."))
            else
                totalExploits = self.dumpLibrary(targetLibrary)
                if totalExploits == 0 then
                    print(Proxima.utils.message.error("No useful vulnerabilities found at <b>" + targetLibrary.lib_name + "</b>!"))
                else if totalExploits > 0 then
                    print(Proxima.utils.message.success("<b>" + totalExploits + "</b> exploits found. Use the 'exploits' command to view available exploits."))
                end if
            end if
        else
            print(Proxima.utils.message.error("No library found with specified ID. <b>[ID:" + self.targetLibrary + "]</b>"))
        end if
    else
        print(Proxima.utils.message.error("No libraries found to scan, please make a scan first."))
    end if
end function

Proxima.exploit.scanLibraries = function ()
    if self.targetLibraries.len > 0 then
        totalExploits = 0
        for targetLibrary in self.targetLibraries
            if self.targetExploits.len > 0 and Proxima.utils.hasValue(self.targetExploits, targetLibrary.lib_name) then
                print(Proxima.utils.message.info("This library is already scanned for exploits. Skipping... <b>[LIB_NAME:" + targetLibrary.lib_name + "]</b>"))
                for targetExploit in self.targetExploits
                    if targetExploit.values[1] == targetLibrary.lib_name then
                        totalExploits = totalExploits + 1
                    end if
                end for
            else
                totalExploits = totalExploits + self.dumpLibrary(targetLibrary)
            end if
        end for
        if totalExploits == 0 then
            print(Proxima.utils.message.error("No useful vulnerabilities found at any libraries."))
        else if totalExploits > 0 then
            print(Proxima.utils.message.success("<b>" + totalExploits + "</b> exploits found. Use the 'list vulns' command to view and execute them."))
        end if
    else
        print(Proxima.utils.message.error("No libraries found fo scan, please make a scan first."))
    end if
end function

// ------------------------------------------------------------------------------------------------------------

Proxima.exploit.setExploitResult = function (exploitID, exploitResult)
    for targetExploit in self.targetExploits
        if targetExploit.values[0] == exploitID then
            targetExploit.result = exploitResult
            break
        end if
    end for
end function

Proxima.exploit.reorderShells = function ()
    reorderedShells = self.targetShells.sort("privilege_level")
    id = 1
    for shell in reorderedShells
        if shell.id != id then shell.id = id
        id = id + 1
    end for
    self.targetShells = reorderedShells
end function

Proxima.exploit.handleShell = function (attackResult, exploitID)
    targetComputer = attackResult.host_computer
    acquiredUser = self.acquireUser(targetComputer)
    print(Proxima.utils.message.success("Shell access granted via user: <b>" + acquiredUser + "</b>! Updating the shell list..."))

    privilegeLevel = self.getPrivilegeLevel(acquiredUser)

    duplicateShell = Proxima.utils.hasValue(self.targetShells, acquiredUser)
    if duplicateShell then
        print(Proxima.utils.message.warning("This shell connection is already in the target shells list. Skipping..."))
    else
        self.targetShells.push({ "id": self.shellID, "shell_object": attackResult, "owner": acquiredUser, "privilege_level": privilegeLevel, "public_ip": targetComputer.public_ip, "local_ip": targetComputer.local_ip })
        self.shellID = self.shellID + 1
        if self.targetShells.len > 1 then
            self.reorderShells()
        end if
        print(Proxima.utils.message.info("Updated the target shells list!"))
        self.setExploitResult(exploitID, 0)
    end if

    if self.targetUsers.len > 0 then
        print(Proxima.utils.message.info("Skipping password search, we already accessed account informations..."))
    else
        if acquiredUser != "guest" then
            print(Proxima.utils.message.info("Trying to access /etc/passwd file..."))
            passwdFile = targetComputer.File("/etc/passwd")
            accessPasswdFile = self.accessPasswdFile(passwdFile)
            if accessPasswdFile then
                print(Proxima.utils.message.success("Accessed the /etc/passwd file!"))
                print(Proxima.utils.message.info("Updated the target users list!"))
                print(Proxima.utils.message.progress("Accessing all mail and bank informations..."))
                homeFolder = targetComputer.File("/home")
                self.getMailInfo(homeFolder)
                self.getBankInfo(homeFolder)
                print(Proxima.utils.message.success("Accessed and updated mail and bank informations! Updating lists..."))
                self.payloadInjection = false
                print(Proxima.utils.message.info("Disabled password injection method to prevent future conflicts..."))
            else
                print(Proxima.utils.message.warning("Coulnd't access /etc/passwd file, you have to gain root access with a different method."))
            end if
        else
            if Proxima.utils.isLocal() then
                print(Proxima.utils.message.warning("Couldn't access root privileges by shell, you have to gain root access with a different method."))
            else
                print(Proxima.utils.message.warning("You can upload a local library scanner to gain root access. To upload the scanner, type command: <b>upload</b>"))
            end if
        end if
    end if
end function

Proxima.exploit.handleComputer = function (attackResult, exploitID)
    acquiredUser = self.acquireUser(attackResult)
    print(Proxima.utils.message.success("Computer access granted via user: <b>" + acquiredUser + "</b>!"))
    if self.targetUsers.len > 0 then
        print(Proxima.utils.message.info("Skipping password search, we already accessed account informations..."))
    else
        if acquiredUser != "guest" then
            print(Proxima.utils.message.info("Trying to access /etc/passwd file..."))
            passwdFile = attackResult.File("/etc/passwd")
            accessPasswdFile = self.accessPasswdFile(passwdFile)
            if accessPasswdFile then
                print(Proxima.utils.message.success("Accessed the /etc/passwd file!"))
                print(Proxima.utils.message.info("Updated the target users list!"))
                print(Proxima.utils.message.progress("Accessing all mail and bank informations..."))
                homeFolder = attackResult.File("/home")
                self.getMailInfo(homeFolder)
                self.getBankInfo(homeFolder)
                print(Proxima.utils.message.success("Accessed and updated mail and bank informations! Updating lists..."))
                self.payloadInjection = false
                print(Proxima.utils.message.info("Disabled password injection method to prevent future conflicts..."))
            else
                print(Proxima.utils.message.warning("Coulnd't access /etc/passwd file, you have to gain root access with a different method."))
            end if
        else
            print(Proxima.utils.message.error("Coulnd't access /etc/passwd file, you have to gain root access with a different method."))
        end if
    end if
    self.setExploitResult(exploitID, 1)
end function

Proxima.exploit.handleFile = function (attackResult, exploitID)
    if self.targetUsers.len > 0 then
        print(Proxima.utils.message.info("Skipping password search, we already accessed account informations..."))
    else
        print(Proxima.utils.message.progress("Acquired file, trying to access /etc/passwd file..."))
        passwdFile = self.reachPasswdFile(attackResult)
        accessPasswdFile = self.accessPasswdFile(passwdFile)
        if accessPasswdFile then
            print(Proxima.utils.message.success("Accessed the /etc/passwd file!"))
            print(Proxima.utils.message.info("Updated the target users list!"))
            print(Proxima.utils.message.progress("Accessing all mail and bank informations..."))
            homeFolder = self.reachHomeDirectory(attackResult)
            self.getMailInfo(homeFolder)
            self.getBankInfo(homeFolder)
            print(Proxima.utils.message.success("Accessed and updated mail and bank informations! Updating lists..."))
            self.payloadInjection = false
            print(Proxima.utils.message.info("Disabled password injection method to prevent future conflicts..."))
        else
            print(Proxima.utils.message.warning("Coulnd't access /etc/passwd through incoming file, you have to gain root access with a different method."))
        end if
    end if
    self.setExploitResult(exploitID, 2)
end function

Proxima.exploit.handlePayload = function (attackResult, exploitID)
    if self.payloadInjection then
        if attackResult == 1 then
            self.setExploitResult(exploitID, 3)
            print(Proxima.utils.message.success("Payload successfuly worked, injection completed! <b>[PASSWORD:" + Proxima.settings.injectionPassword + "]</b>"))
        else if attackResult == 0 or attackResult == null then
            print(Proxima.utils.message.error("Payload didn't work correctly! Failed to inject password..."))
        end if
    else
        print(Proxima.utils.message.error("Payload injection option is disabled! Didn't inject password..."))
    end if
end function

Proxima.exploit.handleFailedAttempt = function (attackResult, exploitID)
    self.setExploitResult(exploitID, 4)
    print(Proxima.utils.message.error("Exploit did not work correctly, please try another one if it has any."))
end function

Proxima.exploit.handleAttackResult = function (attackResult, exploitID)
    if typeof(attackResult) == "shell" then
        self.handleShell(attackResult, exploitID)
    else if typeof(attackResult) == "computer" then
        self.handleComputer(attackResult, exploitID)
    else if typeof(attackResult) == "file" then
        self.handleFile(attackResult, exploitID)
    else if typeof(attackResult) == "number" then
        self.handlePayload(attackResult, exploitID)
    else
        self.handleFailedAttempt(attackResult, exploitID)
    end if
end function

Proxima.exploit.execute = function ()
    if self.targetExploits.len == 0 then
        print(Proxima.utils.message.error("No exploits available, please make a scan first."))
    else if self.targetExploit != null and self.targetExploits.hasIndex(self.targetExploit - 1) then
        targetExploit = self.targetExploits[self.targetExploit - 1]
        libraryDump = null
        print(Proxima.utils.message.info("Launching exploit... <b>[ID:" + targetExploit.id + "]</b>"))
        if Proxima.utils.isLocal() then
            print(Proxima.utils.message.progress("Trying to exploit <b>" + targetExploit.lib_name + "</b> library."))
            libraryDump = Proxima.globals.metaxploit.load(targetExploit.path)
        else
            print(Proxima.utils.message.progress("Trying to connect <b>" + self.targetIP + "</b> on port <b>" + targetExploit.port_number + "</b>."))
            netSession = Proxima.globals.metaxploit.net_use(self.targetIP, targetExploit.port_number)
            if netSession != null then
                print(Proxima.utils.message.success("Connection established!"))
                libraryDump = netSession.dump_lib
                print(Proxima.utils.message.progress("Attempting to exploit <b>" + libraryDump.lib_name + "</b> at port <b>" + targetExploit.port_number + "</b>."))
            else
                print(Proxima.utils.message.error("Unable to connect to port <b>" + targetExploit.port_number + "</b>, it has firewall protection."))
            end if
        end if
        print("+------------------------------------+")
        print(Proxima.utils.message.progress("Injecting values into the library... <b>[MEM_ADDR:" + targetExploit.memAddr + "|UNSEC_ZONE:" + targetExploit.unsecZone + "]</b>"))
        attackResult = null
        if self.payloadInjection then
            attackResult = libraryDump.overflow(targetExploit.memAddr, targetExploit.unsecZone, Proxima.settings.injectionPassword)
        else
            attackResult = libraryDump.overflow(targetExploit.memAddr, targetExploit.unsecZone)
        end if
        print("+------------------------------------+")
        self.handleAttackResult(attackResult, targetExploit.id)
    else
        print(Proxima.utils.message.error("No exploit found with specified ID. <b>[ID:" + self.targetExploit + "]</b>"))
    end if
end function

Proxima.exploit.autoExecute = function ()
    if self.targetExploits.len == 0 then
        print(Proxima.utils.message.error("No exploits available, please make a scan first."))
    else
        for targetExploit in self.targetExploits
            self.setTargetExploit(targetExploit.id)
            if self.targetExploit != 1 then
                print(Proxima.utils.message.colorize("+------------------------------------+", "#FFC466"))
            end if
            self.execute()
            if self.targetExploit - 1 == self.targetExploits.len then
                print(Proxima.utils.message.colorize("+------------------------------------+", "#FFC466"))
            end if
        end for
    end if
end function

Proxima.exploit.parseScanEntries = function (scanResult, libraryDump, targetObject)
    totalExploits = 0
    for entry in scanResult
        scanAddress = scan_address(Proxima.globals.metaxploit, libraryDump, entry)
        segments = split(scanAddress, "Unsafe check: ")[1:]
        exploits = []

        for segment in segments
            labelStart = indexOf(segment, "<b>")
            labelEnd = indexOf(segment, "</b>")
            push(exploits, segment[labelStart + 3: labelEnd])
        end for

        for exploit in exploits
            if Proxima.utils.isLocal() then
                self.targetExploits.push({ "id": self.exploitID, "lib_name": libraryDump.lib_name, "version": libraryDump.version, "path": targetObject.path, "memAddr": entry, "unsecZone": exploit, "result": 5 })
            else
                self.targetExploits.push({ "id": self.exploitID, "port_number": targetObject.port_number, "memAddr": entry, "unsecZone": exploit, "result": 5 })
            end if
            self.exploitID = self.exploitID + 1
            totalExploits = totalExploits + 1
        end for
    end for
    return totalExploits
end function

// ------------------------------------------------------------------------------------------------------------

Proxima.exploit.isSSHAvailable = function ()
    isConnectableViaSSH = false
    for targetPort in self.targetPorts
        if targetPort.values[1] == 22 and targetPort.values[2] == "open" then
            isConnectableViaSSH = true
            break
        end if
    end for
    return isConnectableViaSSH
end function

Proxima.exploit.isFTPAvailable = function ()
    isConnectableViaFTP = false
    for targetPort in self.targetPorts
        if targetPort.values[1] == 21 and targetPort.values[2] == "open" then
            isConnectableViaFTP = true
            break
        end if
    end for
    return isConnectableViaFTP
end function

Proxima.exploit.tunnelConnection = function ()
    if self.isSSHAvailable() or self.isFTPAvailable() then
        if self.targetUsers.len > 0 then
            targetUser = self.targetUsers[0]
            if targetUser.password.len == 32 then
                print(Proxima.utils.message.error("User password is not deciphered yet! You can decipher it by: <b>" + Proxima.commands.decipher.usage + "<b>"))
            else
                print(Proxima.utils.message.progress("Trying to tunnel shell by SSH or FTP protocol via <b>" + targetUser.username + "</b> privilege. <b>[IP:" + self.targetIP + "]</b>"))
                connectionResult = Proxima.globals.myShell.connect_service(self.targetIP, 22, targetUser.username, targetUser.password)
                if typeof(connectionResult) != "shell" then
                    print(Proxima.utils.message.error("Couldn't connect via SSH, trying to connect by FTP protocol..."))
                    connectionResult = Proxima.globals.myShell.connect_service(self.targetIP, 21, targetUser.username, targetUser.password)
                    if typeof(connectionResult) != "shell" then
                        print(Proxima.utils.message.error("Couldn't connect via FTP too, failed to tunnel target!"))
                    else
                        duplicateShell = Proxima.utils.hasValue(self.targetShells, targetUser.username)
                        if duplicateShell then
                            print(Proxima.utils.message.warning("This shell connection is already in the target shells list. Skipping..."))
                        else
                            self.targetShells.push({ "id": self.shellID, "owner": targetUser.username, "privilege_level": self.getPrivilegeLevel(targetUser.username), "shell_object": connectionResult})
                            self.shellID = self.shellID + 1
                            if self.targetShells.len > 1 then
                                self.reorderShells()
                            end if
                            print(Proxima.utils.message.success("Tunneled target successfuly via FTP!"))
                            print(Proxima.utils.message.info("Updated the target shells list!"))
                        end if
                    end if
                else
                    duplicateShell = Proxima.utils.hasValue(self.targetShells, targetUser.username)
                    if duplicateShell then
                        print(Proxima.utils.message.warning("This shell connection is already in the target shells list. Skipping..."))
                    else
                        self.targetShells.push({ "id": self.shellID, "owner": targetUser.username, "privilege_level": self.getPrivilegeLevel(targetUser.username), "shell_object": connectionResult})
                        self.shellID = self.shellID + 1
                        if self.targetShells.len > 1 then
                            self.reorderShells()
                        end if
                        print(Proxima.utils.message.success("Tunneled target successfuly via SSH!"))
                        print(Proxima.utils.message.info("Updated the target shells list!"))
                    end if
                end if
            end if
        else
            print(Proxima.utils.message.error("No user information found to be used for tunnelling, please execute an exploit first..."))
        end if
    else
        print(Proxima.utils.message.error("No ports found for tunnelling, you can try to connect by another method..."))
    end if
end function

Proxima.exploit.launchShell = function ()
    if self.targetShells.len > 0 then
        if self.targetShell != null and self.targetShells.hasIndex(self.targetShell - 1) then
            targetShell = self.targetShells[self.targetShell - 1]
            print(Proxima.utils.message.progress("Connecting to shell on <b>" + self.targetIP + "</b> via <b>" + targetShell.owner + "</b> privilege. <b>[ID:" + targetShell.id + "]</b>"))
            wait(1)
            targetShell.shell_object.start_terminal
        else
            print(Proxima.utils.message.error("No open shell found with specified ID. <b>[ID:" + self.targetShell + "]</b>"))
        end if
    else
        print(Proxima.utils.message.error("No open shells found to connect, please execute an exploit first."))
    end if
end function

// ------------------------------------------------------------------------------------------------------------

Proxima.exploit.cleanUpLogs = function ()
    if self.targetShells.len > 0 then
        targetShell = self.targetShells[0]
        if targetShell.owner == "root" then
            logFile = targetShell.shell_object.host_computer.File("/var/system.log")
            deletionResultLog = logFile.delete
            if typeof(deletionResultLog) == "string" and deletionResultLog.len > 0 then
                print(Proxima.utils.message.error("Couldn't delete system logs: " + deletionResultLog))
            else
                print(Proxima.utils.message.success("Cleaned up system logs successfuly!"))
            end if
        else
            print(Proxima.utils.message.error("Couldn't delete system logs due to insufficent user privilege!"))
        end if
    else
        print(Proxima.utils.message.error("No open shells found, please execute an exploit first."))
    end if
end function

Proxima.exploit.corruptComputer = function ()
    if self.targetShells.len > 0 then
        targetShell = self.targetShells[0]
        if targetShell.owner == "root" then
            targetComputer = targetShell.shell_object.host_computer
            imgFile = targetComputer.File("/boot/kernel.img")
            deletionResultImage = imgFile.delete
            if typeof(deletionResultImage) == "string" and deletionResultImage.len > 0 then
                print(Proxima.utils.message.error("There was an error while deleting <b>kernel.img</b> file: " + deletionResultImage))
            else
                print(Proxima.utils.message.success("<b>kernel.img</b> file got deleted successfully!"))
            end if
            print(Proxima.utils.message.success("Deleting system logs to leave no trace..."))
            logFile = targetComputer.File("/var/system.log")
            deletionResultLog = logFile.delete
            if typeof(deletionResultLog) == "string" and deletionResultLog.len > 0 then
                print(Proxima.utils.message.error("There was an error while deleting <b>system.log</b> file: " + deletionResultLog))
            else
                print(Proxima.utils.message.success("<b>system.log</b> file got deleted successfully."))
            end if
            print(Proxima.utils.message.warning("You still have to reboot the remote computer to complete the system corruption."))
            print(Proxima.utils.message.info("Type <b>reboot</b> to cause system failure."))
            print(Proxima.utils.message.progress("Connecting to shell via <b>" + targetShell.owner + "</b> privilege. <b>[IP:" + self.targetIP + "]</b>"))
            wait(1)
            targetShell.shell_object.start_terminal
        else
            print(Proxima.utils.message.error("Couldn't delete boot image due to insufficent user privilege!"))
        end if
    else
        print(Proxima.utils.message.error("No open shells found, please execute an exploit first."))
    end if
end function

Proxima.exploit.putTools = function ()
    if self.targetShells.len > 0 then
        remoteShell = self.targetShells[0]
    
        uploadTo = Proxima.settings.uploadTo
        toolsDirectory = Proxima.globals.myPC.File(Proxima.settings.uploadFrom)
    
        if uploadTo != null and toolsDirectory != null then
            fileList = Proxima.utils.collectFiles(toolsDirectory)
            if fileList.len > 0 then
                for filePath in fileList
                    
                    fileName = filePath.split("/")[-1].trim
                    print(Proxima.utils.message.progress("Attempting to upload <b>" + fileName + "</b>..."))
                    print("+------------------------------------+")
                    uploadFile = Proxima.globals.myShell.scp(filePath, uploadTo, remoteShell.shell_object)
                    print("+------------------------------------+")
                    if typeof(uploadFile) == "string" or typeof(uploadFile) == null then
                        print(Proxima.utils.message.error("Couldn't upload <b>" + fileName + "</b>!"))
                        print(Proxima.utils.message.error("Reason of failure: " + uploadFile))
                    else
                        print(Proxima.utils.message.success("Successfuly uploaded <b>" + fileName + "</b>!"))
                    end if
                end for
            else
                print(Proxima.utils.message.error("No file or folder found in given local upload folder!"))
            end if
        else
            print(Proxima.utils.message.error("No valid upload folder found in given directory!"))
        end if
    else
        print(Proxima.utils.message.error("No open shells found, please execute an exploit first."))
    end if
end function

Proxima.exploit.runBinaryFile = function (binaryPath, launchParameters = null)
    if self.targetShells.len > 0 then
        targetShell = self.targetShells[0]
        if targetShell.owner != "guest" then
            fileName = binaryPath.split("/")[-1].trim

            launchBinary = null
            if launchParameters != null then
                launchBinary = targetShell.shell_object.launch(binaryPath, launchParameters)
            else
                launchBinary = targetShell.shell_object.launch(binaryPath)
            end if

            if launchBinary == null or launchBinary == 0 or typeof(launchBinary) == "string" then
                print(Proxima.utils.message.error("Couldn't launch desired binary file!"))
                if typeof(launchBinary) == "string" then print(Proxima.utils.message.error("Reason of failure: " + launchBinary))
            else
                print(Proxima.utils.message.success("Successfuly launched <b>" + fileName + "</b>!"))
            end if
        else
            print(Proxima.utils.message.error("Couldn't execute desired binary file due to insufficent user privilege!"))
        end if
    else
        print(Proxima.utils.message.error("No open shells found, please execute an exploit first."))
    end if
end function

// ------------------------------------------------------------------------------------------------------------

Proxima.exploit.getFile = function (filePath)
    if self.targetShells.len > 0 then
        targetShell = self.targetShells[0]
        if targetShell.owner != "guest" then
            downloadTo = Proxima.globals.myPC.File(Proxima.settings.downloadTo)
            if downloadTo != null then
                fileName = filePath.split("/")[-1].trim
                print(Proxima.utils.message.progress("Attempting to download <b>" + fileName + "</b>..."))
                downloadFile = targetShell.shell_object.scp(filePath, Proxima.settings.downloadTo, Proxima.globals.myShell)
                if typeof(downloadFile) == "string" or typeof(downloadFile) == null then
                    print(Proxima.utils.message.error("Couldn't download <b>" + fileName + "</b>!"))
                    print(Proxima.utils.message.error("Reason of failure: " + downloadFile))
                else
                    print(Proxima.utils.message.success("Successfuly downloaded <b>" + fileName + "</b>!"))
                end if
            else
                print(Proxima.utils.message.error("Couldn't find download folder! You can change desired location via <b>settings.src</b>"))
            end if
        else
            print(Proxima.utils.message.error("Couldn't download requested file due to insufficent user privilege!"))
        end if
    end if
end function

Proxima.exploit.putFile = function (filePath)
    if self.targetShells.len > 0 then
        remoteShell = self.targetShells[0]
        uploadTo = Proxima.settings.uploadTo
        uploadFile = Proxima.globals.myPC.File(filePath)
        if uploadTo != null and uploadFile != null then
            fileName = filePath.split("/")[-1].trim
            print(Proxima.utils.message.progress("Attempting to upload <b>" + fileName + "</b>..."))
            print("+------------------------------------+")
            uploadFile = Proxima.globals.myShell.scp(filePath, uploadTo, remoteShell.shell_object)
            print("+------------------------------------+")
            if typeof(uploadFile) == "string" or typeof(uploadFile) == null then
                print(Proxima.utils.message.error("Couldn't upload <b>" + fileName + "</b>!"))
                print(Proxima.utils.message.error("Reason of failure: " + uploadFile))
            else
                print(Proxima.utils.message.success("Successfuly uploaded <b>" + fileName + "</b>!"))
            end if
        else
            print(Proxima.utils.message.error("No valid upload file found in given path!"))
        end if
    else
        print(Proxima.utils.message.error("No open shells found, please execute an exploit first."))
    end if
end function

Proxima.exploit.deleteFile = function (filePath)
    targetComputer = null
    if Proxima.utils.isLocal() then
        if Proxima.globals.activeUser != "guest" then
            targetComputer = Proxima.globals.myPC
        else
            targetComputer = null
        end if
    else
        if self.targetShells.len > 0 then
            targetShell = self.targetShells[0]
            if targetShell.owner != "guest" then
                targetComputer = targetShell.shell_object.host_computer
            else
                targetComputer = null
            end if
        else
            targetComputer = false
        end if
    end if
    if typeof(targetComputer) == "computer" then
        fileName = filePath.split("/")[-1].trim
        print(Proxima.utils.message.progress("Attempting to delete <b>" + fileName + "</b>..."))
        remoteFile = targetComputer.File(filePath)
        deletionFileResult = remoteFile.delete
        if typeof(deletionFileResult) == "string" and deletionFileResult.len > 0 then
            print(Proxima.utils.message.error("There was an error while deleting a file: " + deletionFileResult))
        else
            print(Proxima.utils.message.success("<b>" + fileName + "</b> file got deleted successfully."))
        end if
    else
        if targetComputer == null then
            print(Proxima.utils.message.error("Couldn't delete file due to insufficient user privileges!"))
        else if targetComputer == false then
            print(Proxima.utils.message.error("No open shells found!"))
        end if
    end if
end function

// ------------------------------------------------------------------------------------------------------------

Proxima.exploit.decipherHash = function (encryptedHash)
    decryptedHash = Proxima.globals.crypto.decipher(encryptedHash)
    return decryptedHash
end function

Proxima.exploit.decipherUserPassword = function ()
    if self.targetUsers.len > 0 then
        if self.targetUser != null and self.targetUsers.hasIndex(self.targetUser - 1) then
            targetUser = self.targetUsers[self.targetUser - 1]
            if targetUser.password.len < 32 then
                print(Proxima.utils.message.warning("This password is already deciphered. Skipping..."))
            else
                decryptedPassword = self.decipherHash(targetUser.password)
                if decryptedPassword != null then
                    targetUser.password = decryptedPassword
                    print(Proxima.utils.message.success("Password decrypted successfuly!. <b>[USER:" + targetUser.username + "|PASSWORD:" + targetUser.password + "]</b>"))
                    print(Proxima.utils.message.info("Updated user information, you can view it later by using command: <b>users</b>"))
                else
                    print(Proxima.utils.message.info("Couldn't decrypt password! Please try another one..."))
                end if
            end if
        else
            print(Proxima.utils.message.error("No user found with specified ID. <b>[ID:" + self.targetUser + "]</b>"))
        end if
    else
        print(Proxima.utils.message.error("No user information found to decipher, please execute an exploit first."))
    end if
end function

Proxima.exploit.decipherMailPassword = function ()
    if self.targetMails.len > 0 then
        if self.targetMail != null and self.targetMails.hasIndex(self.targetMail - 1) then
            targetMail = self.targetMails[self.targetMail - 1]
            if targetMail.password.len < 32 then
                print(Proxima.utils.message.warning("This password is already deciphered. Skipping..."))
            else
                decryptedPassword = self.decipherHash(targetMail.password)
                if decryptedPassword != null then
                    targetMail.password = decryptedPassword
                    print(Proxima.utils.message.success("Password decrypted successfuly!. <b>[MAIL_ADDR:" + targetMail.mail_addr + "|PASSWORD:" + targetMail.password + "]</b>"))
                    print(Proxima.utils.message.info("Updated mail information, you can view it later by using command: <b>mails</b>"))
                else
                    print(Proxima.utils.message.info("Couldn't decrypt password! Please try another one..."))
                end if
            end if
        else
            print(Proxima.utils.message.error("No mail information found with specified ID. <b>[ID:" + self.targetMail + "]</b>"))
        end if
    else
        print(Proxima.utils.message.error("No mail information found to decipher, please execute an exploit first."))
    end if
end function

Proxima.exploit.decipherBankPassword = function ()
    if self.targetBanks.len > 0 then
        if self.targetBank != null and self.targetBanks.hasIndex(self.targetBank - 1) then
            targetBank = self.targetBanks[self.targetBank - 1]
            if targetBank.password.len < 32 then
                print(Proxima.utils.message.warning("This password is already deciphered. Skipping..."))
            else
                decryptedPassword = self.decipherHash(targetBank.password)
                if decryptedPassword != null then
                    targetBank.password = decryptedPassword
                    print(Proxima.utils.message.success("Password decrypted successfuly!. <b>[ACCOUNT:" + targetBank.account + "|PASSWORD:" + targetBank.password + "]</b>"))
                    print(Proxima.utils.message.info("Updated bank information, you can view it later by using command: <b>banks</b>"))
                else
                    print(Proxima.utils.message.info("Couldn't decrypt password! Please try another one..."))
                end if
            end if
        else
            print(Proxima.utils.message.error("No bank information found with specified ID. <b>[ID:" + self.targetBank + "]</b>"))
        end if
    else
        print(Proxima.utils.message.error("No bank information found to decipher, please execute an exploit first."))
    end if
end function

Proxima.exploit.accessPasswdFile = function (passwdFile)
    self.userID = 1
    self.targetUsers = []
    if passwdFile.get_content != null and passwdFile.has_permission("r") then
        encryptedContent = passwdFile.get_content
        userList = encryptedContent.split(char(10))
        for userInfo in userList
            if userInfo.len > 1 then
                parsedUser = userInfo.split(":")
                userName = parsedUser[0]
                userPassword = parsedUser[1]
                userMap = { "id": self.userID, "username": userName, "password": userPassword }
                self.targetUsers.push(userMap)
                self.userID = self.userID + 1
            end if
        end for
        return true
    else
        return false
    end if
end function

Proxima.exploit.reachPasswdFile = function (givenDirectory)
    while givenDirectory.path != "/"
        givenDirectory = givenDirectory.parent
    end while

    rootFolders = givenDirectory.get_folders
    for rootFolder in rootFolders
        if rootFolder.name == "etc" then
            for etcFile in rootFolder.get_files
                if etcFile.name == "passwd" then
                    return etcFile
                end if
            end for
        end if
    end for
end function

Proxima.exploit.getPrivilegeLevel = function (acquiredUser)
    acquiredUserNum = 2
    if acquiredUser == "guest" then
        acquiredUserNum = 2
    else if acquiredUser == "root" then
        acquiredUserNum = 0
    else 
        acquiredUserNum = 1
    end if
    return acquiredUserNum
end function

Proxima.exploit.acquireUser = function (targetComputer)
    rootDirectory = targetComputer.File("/")
    acquiredUser = "guest"
    if rootDirectory != null and rootDirectory.has_permission("w") then
        acquiredUser = "root"
    else
        homeDirectory = targetComputer.File("/home")
        if homeDirectory != null then
            for userFolder in homeDirectory.get_folders
                if userFolder.name == "guest" then continue
                if userFolder.has_permission("w") then acquiredUser = userFolder.name
            end for
        end if
    end if
    return acquiredUser
end function

Proxima.exploit.reachHomeDirectory = function (givenDirectory)
    while givenDirectory.path != "/"
        givenDirectory = givenDirectory.parent
    end while

    rootFolders = givenDirectory.get_folders
    for rootFolder in rootFolders
        if rootFolder.name == "home" then
            return rootFolder
            break
        end if
    end for
end function

Proxima.exploit.getMailInfo = function (homeFolder)
    self.mailID = 1    
    self.targetMails = []
    for userFolders in homeFolder.get_folders
        if userFolders.name != "guest" then
            infoMap = {}
            infoMap.id = self.mailID
            infoMap.owner = userFolders.name
            for userFolder in userFolders.get_folders
                if userFolder.name == "Config" then
                    for configFile in userFolder.get_files
                        if configFile.name == "Mail.txt" then
                            splitInfo = configFile.get_content.split(":")
                            infoMap.mail_addr = splitInfo[0]
                            infoMap.password = splitInfo[1]
                        end if
                    end for
                end if
            end for
            self.targetMails.push(infoMap)
            self.mailID = self.mailID + 1
        end if
    end for
end function

Proxima.exploit.getBankInfo = function (homeFolder)
    self.bankID = 1
    self.targetBanks = []
    for userFolders in homeFolder.get_folders
        if userFolders.name != "guest" then
            infoMap = {}
            infoMap.id = self.bankID
            infoMap.owner = userFolders.name
            for userFolder in userFolders.get_folders
                if userFolder.name == "Config" then
                    for configFile in userFolder.get_files
                        if configFile.name == "Bank.txt" then
                            splitInfo = configFile.get_content.split(":")
                            infoMap.account = splitInfo[0]
                            infoMap.password = splitInfo[1]
                        end if
                    end for
                end if
            end for
            self.targetBanks.push(infoMap)
            self.bankID = self.bankID + 1
        end if
    end for
end function

// ------------------------------------------------------------------------------------------------------------

Proxima.exploit.beautifyPrivilegeLevel = function (shellPrivilege)
    if shellPrivilege == 0 then
        return Proxima.utils.message.colorize("ROOT", "#9370DB")
    else if shellPrivilege == 1 then
        return Proxima.utils.message.colorize("USER", "#08FF57")
    else if shellPrivilege == 2 then
        return Proxima.utils.message.colorize("GUEST", "#FFDD00")
    end if
end function

Proxima.exploit.beautifyExploitResult = function (exploitResult)
    if exploitResult == 0 then
        return Proxima.utils.message.colorize("SHELL", "#9370DB")
    else if exploitResult == 1 then
        return Proxima.utils.message.colorize("COMPUTER", "#08FF57")
    else if exploitResult == 2 then
        return Proxima.utils.message.colorize("FILE", "#00FFBB")
    else if exploitResult == 3 then
        return Proxima.utils.message.colorize("PAYLOAD", "#FFDD00")
    else if exploitResult == 4 then
        return Proxima.utils.message.colorize("FAILED", "#FF1548")
    else
        return Proxima.utils.message.colorize("UNKNOWN", "#0091FF")
    end if
end function

Proxima.exploit.displayPortInfo = function ()
    header_list = ["ID", "PORT", "STATE", "SERVICE", "VERSION", "LAN_IP"]
    content_list = []
    for targetPort in self.targetPorts
        p_id = str(targetPort.id)
        p_number = str(targetPort.port_number)
        p_state = targetPort.state
        p_service = targetPort.service
        p_version = targetPort.version
        p_lan_ip = targetPort.lan_ip
        content_list.push([ p_id, p_number, p_state, p_service, p_version, p_lan_ip ])
    end for

    Proxima.utils.displayList(header_list, content_list)
end function

Proxima.exploit.displayLibraryInfo = function ()
    header_list = ["ID", "LIBRARY_NAME", "VERSION", "PATH"]
    content_list = []
    for targetLibrary in self.targetLibraries
        l_id = str(targetLibrary.id)
        l_name = targetLibrary.lib_name
        l_version = targetLibrary.version
        l_path = targetLibrary.path
        content_list.push([ l_id, l_name, l_version, l_path ])
    end for

    Proxima.utils.displayList(header_list, content_list)
end function

Proxima.exploit.displayExploitInfo = function ()
    header_list = []
    if Proxima.utils.isLocal() then
        header_list = ["ID", "LIBRARY_NAME", "MEM_ADDRESS", "UNSEC_ZONE", "RESULT"]
    else
        header_list = ["ID", "PORT", "MEM_ADDRESS", "UNSEC_ZONE", "RESULT"]
    end if

    content_list = []
    for targetExploit in self.targetExploits
        e_id = str(targetExploit.id)
        e_mem = targetExploit.memAddr
        e_uz = targetExploit.unsecZone
        e_result = self.beautifyExploitResult(targetExploit.result)
        if Proxima.utils.isLocal() then
            e_name = targetExploit.lib_name
            content_list.push([ e_id, e_name, e_mem, e_uz, e_result ])
        else
            e_port_number = str(targetExploit.port_number)
            content_list.push([ e_id, e_port_number, e_mem, e_uz, e_result ])
        end if
    end for

    Proxima.utils.displayList(header_list, content_list)
end function

Proxima.exploit.displayUserInfo = function ()
    header_list = ["ID", "USERNAME", "PASSWORD"]
    content_list = []
    for targetUser in self.targetUsers
        u_id = str(targetUser.id)
        u_username = targetUser.username
        u_password = targetUser.password
        content_list.push([ u_id, u_username, u_password ])
    end for

    Proxima.utils.displayList(header_list, content_list)
end function

Proxima.exploit.displayShellInfo = function ()
    header_list = ["ID", "OWNER", "PRIVILEGE", "PUBLIC_IP", "LOCAL_IP"]
    content_list = []
    for targetShell in self.targetShells
        s_id = str(targetShell.id)
        s_owner = targetShell.owner
        s_privilege_level = self.beautifyPrivilegeLevel(targetShell.privilege_level)
        s_public_ip = targetShell.public_ip
        s_local_ip = targetShell.local_ip
        content_list.push([ s_id, s_owner, s_privilege_level, s_public_ip, s_local_ip ])
    end for

    Proxima.utils.displayList(header_list, content_list)
end function

Proxima.exploit.displayMailInfo = function ()
    header_list = ["ID", "OWNER", "MAIL", "PASSWORD"]
    content_list = []
    for targetMail in self.targetMails
        m_id = str(targetMail.id)
        m_owner = targetMail.owner
        m_mail_addr = targetMail.mail_addr
        m_password = targetMail.password
        content_list.push([ m_id, m_owner, m_mail_addr, m_password ])
    end for

    Proxima.utils.displayList(header_list, content_list)
end function

Proxima.exploit.displayBankInfo = function ()
    header_list = ["ID", "OWNER", "ACCOUNT", "PASSWORD"]
    content_list = []
    for targetBank in self.targetBanks
        b_id = str(targetBank.id)
        b_owner = targetBank.owner
        b_account = targetBank.account
        b_password = targetBank.password
        content_list.push([ b_id, b_owner, b_account, b_password ])
    end for

    Proxima.utils.displayList(header_list, content_list)
end function