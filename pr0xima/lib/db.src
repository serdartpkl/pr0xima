Proxima.db = {}

// ------------------------------------------------------------------------------------------------------------

Proxima.db.createDatabase = function (databaseName)
end function

Proxima.db.getDatabase = function (databaseName)
    databaseFile = Proxima.globals.myPC.File(home_dir + "/pr0xima/databases/" + databaseName)
    if databaseFile != null and databaseFile.get_content() != "" then return databaseFile
    return null
end function

Proxima.db.resetDatabase = function (databaseName)
    databaseFile = self.getDatabase(databaseName)
    if databaseFile != null then
        resetFile = databaseFile.set_content("")
        if resetFile == 1 then return true
    end if
    return null
end function

// ------------------------------------------------------------------------------------------------------------

Proxima.db.reorderRecords = function (databaseRecords)
    idCounter = 1
    for acquiredRecord in databaseRecords
        if acquiredRecord.id != idCounter then acquiredRecord.id = idCounter
        idCounter = idCounter + 1
    end for
    return databaseRecords
end function

Proxima.db.getRecords = function (databaseName)
    databaseFile = self.getDatabase(databaseName)
    if databaseFile != null then
        recordsList = []
        deserializedDatabase = Proxima.utils.deserializeMap(databaseFile.get_content())
        return deserializedDatabase.records
    end if
    return null
end function

Proxima.db.setRecords = function (databaseName, mutatedRecords)
    databaseFile = self.getDatabase(databaseName)
    if databaseFile != null then
        deserializedDatabase = Proxima.utils.deserializeMap(databaseFile.get_content())
        deserializedDatabase.records = mutatedRecords
        serializeRecords = Proxima.utils.serializeMap(deserializedDatabase)
        setRecords = databaseFile.set_content(serializeRecords)
        if setRecords == 1 then return true
    end if
    return null
end function

Proxima.db.deleteRecord = function (databaseName, recordID)
    databaseFile = self.getDatabase(databaseName)
    if databaseFile != null then
        deserializedDatabase = Proxima.utils.deserializeMap(databaseFile.get_content())
        for acquiredRecord in deserializedDatabase.records
            if acquiredRecord.id == recordID then
                foundedRecord = deserializedDatabase.records.indexOf(acquiredRecord)
                removeRecord = deserializedDatabase.records.remove(foundedRecord)
                reorderedRecords = self.reorderRecords(deserializedDatabase.records)
                setDatabase = self.setRecords(databaseName, reorderedRecords)
                if setDatabase != null then return true
            end if
        end for
    end if
    return null
end function

Proxima.db.searchRecord = function (databaseName, recordKey, recordValue)
    databaseFile = self.getDatabase(databaseName)
    if databaseFile != null then
        deserializedDatabase = Proxima.utils.deserializeMap(databaseFile.get_content())
        foundedRecords = Proxima.utils.mapHasValue(deserializedDatabase.records, recordKey, recordValue)
        if foundedRecords.len > 0 then
            return foundedRecords
        end if
    end if
    return null
end function

// ------------------------------------------------------------------------------------------------------------

Proxima.db.getRecordValue = function (databaseName, recordID, recordKey)
    databaseFile = self.getDatabase(databaseName)
    if databaseFile != null then
        deserializedDatabase = Proxima.utils.deserializeMap(databaseFile.get_content())
        for acquiredRecord in deserializedDatabase.records
            if acquiredRecord.id == recordID then
                for key in acquiredRecord.indexes
                    if key == recordKey then return acquiredRecord[recordKey]
                end for
            end if
        end for
    end if
    return null
end function

Proxima.db.setRecordValue = function (databaseName, recordID, recordKey, recordValue)
    databaseFile = self.getDatabase(databaseName)
    if databaseFile != null then
        deserializedDatabase = Proxima.utils.deserializeMap(databaseFile.get_content())
        for acquiredRecord in deserializedDatabase.records
            if acquiredRecord.id == recordID then
                for key in acquiredRecord.indexes
                    if key == recordKey then
                        acquiredRecord[recordKey] = recordValue
                        setDatabase = self.setRecords(databaseName, deserializedDatabase.records)
                        if setDatabase then return true
                    end if
                end for
            end if
        end for
    end if
    return null
end function