Proxima.utils = {}

Proxima.utils.loadMetaxploit = function ()
    isValidLocation = false
    for location in Proxima.settings.metaxploitLocations
        includeMetaxploit = include_lib(location)
        if includeMetaxploit != null then
            Proxima.globals.metaxploit = includeMetaxploit
            isValidLocation = true
            break
        end if
    end for
    if isValidLocation then
        print(Proxima.cli.addOutputEntry(Proxima.cli.message.success("<b>metaxploit.so</b> is loaded.")))
    else
        exit(Proxima.cli.message.error("Unable to find <b>metaxploit.so</b> library."))
    end if
end function

Proxima.utils.loadCrypto = function ()
    isValidLocation = false
    for location in Proxima.settings.cryptoLocations
        includeCrypto = include_lib(location)
        if includeCrypto != null then
            Proxima.globals.crypto = includeCrypto
            isValidLocation = true
            break
        end if
    end for
    if isValidLocation then
        print(Proxima.cli.addOutputEntry(Proxima.cli.message.success("<b>crypto.so</b> is loaded.")))
    else
        exit(Proxima.cli.message.error("Unable to find <b>crypto.so</b> library."))
    end if
end function

Proxima.utils.loadAptClient = function ()
    isValidLocation = false
    for location in Proxima.settings.cryptoLocations
        includeAptClient = include_lib(location)
        if includeAptClient != null then
            Proxima.globals.aptclient = includeAptClient
            isValidLocation = true
            break
        end if
    end for
    if isValidLocation then
        print(Proxima.cli.addOutputEntry(Proxima.cli.message.success("<b>aptclient.so</b> is loaded.")))
    else
        exit(Proxima.cli.message.error("Unable to find <b>aptclient.so</b> library."))
    end if
end function

// ------------------------------------------------------------------------------------------------------------

Proxima.utils.formatList = function (headerList, contentList)
    maxLengths = []

    for i in headerList
        maxLen = i.len
        for row in contentList
            if row[headerList.indexOf(i)].split("#")[0].len > maxLen then maxLen = row[headerList.indexOf(i)].split("#")[0].len
        end for
        maxLengths.push(maxLen)
    end for

    padRight = function(str, length, rowColor)
        padding = " " * (length - str.len)
        if rowColor != null then
            return Proxima.cli.message.colorize(str + padding, "#" + rowColor)
        else
            return str + padding
        end if
    end function

    separator = "+"
    headerRow = "|"
    for i in headerList
        idx = headerList.indexOf(i)
        separator = separator + "-" * (maxLengths[idx] + 2) + "+"
        headerRow = headerRow + " " + padRight(i, maxLengths[idx], null) + " |"
    end for
    print(Proxima.cli.addOutputEntry(separator))
    print(Proxima.cli.addOutputEntry(headerRow))
    print(Proxima.cli.addOutputEntry(separator))

    for row in contentList
        rowStr = "|"
        for i in headerList
            idx = headerList.indexOf(i)
            splitRow = row[idx].split("#")
            rowColor = null
            if splitRow.len > 1 then
                row[idx] = splitRow[0]
                rowColor = splitRow[1]
            end if
            rowStr = rowStr + " " + padRight(row[idx], maxLengths[idx], rowColor) + " |"
        end for
        print(Proxima.cli.addOutputEntry(rowStr))
        print(Proxima.cli.addOutputEntry(separator))
    end for
end function

Proxima.utils.mapHasValue = function (givenList, searchValue)
    hasFoundValue = false
    for mapItem in givenList
        for key in mapItem.indexes
            if mapItem[key] == searchValue then
                hasFoundValue = true
                break
            end if
        end for
    end for
    return hasFoundValue
end function

Proxima.utils.collectFiles = function (parentDir)
    allFiles = []

    scanDir = function (dir)
        files = dir.get_files
        if files.len > 0 then
            for file in files
                allFiles.push(file.path)
            end for
        end if
        folders = dir.get_folders
        if folders.len > 0 then
            for folder in folders  
                scanDir(folder)
            end for
        end if
    end function

    scanDir(parentDir)

    return allFiles
end function