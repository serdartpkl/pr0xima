Proxima.utils = {}

Proxima.utils.message = {}

Proxima.utils.loadMetaxploit = function ()
    isValidLocation = false
    for location in self.settings.metaxploitLocations
        includeMetaxploit = include_lib(location)
        if includeMetaxploit != null then
            self.globals.metaxploit = includeMetaxploit
            isValidLocation = true
            break
        end if
    end for
    if isValidLocation then
        print(Proxima.screen.addOutputEntry(self.utils.message.success("<b>metaxploit.so</b> is loaded.")))
    else
        exit(self.utils.message.error("Unable to find <b>metaxploit.so</b> library."))
    end if
end function

Proxima.utils.loadCrypto = function ()
    isValidLocation = false
    for location in self.settings.cryptoLocations
        includeCrypto = include_lib(location)
        if includeCrypto != null then
            self.globals.crypto = includeCrypto
            isValidLocation = true
            break
        end if
    end for
    if isValidLocation then
        print(Proxima.screen.addOutputEntry(self.utils.message.success("<b>crypto.so</b> is loaded.")))
    else
        exit(self.utils.message.error("Unable to find <b>crypto.so</b> library."))
    end if
end function

Proxima.utils.loadRshell = function ()
    isValidLocation = false
    for location in self.settings.cryptoLocations
        includeRshell = include_lib(location)
        if includeRshell != null then
            self.globals.librshell = includeRshell
            isValidLocation = true
            break
        end if
    end for
    if isValidLocation then
        print(Proxima.screen.addOutputEntry(self.utils.message.success("<b>librshell.so</b> is loaded.")))
    else
        exit(self.utils.message.error("Unable to find <b>librshell.so</b> library."))
    end if
end function

Proxima.utils.loadAptClient = function ()
    isValidLocation = false
    for location in self.settings.cryptoLocations
        includeAptClient = include_lib(location)
        if includeAptClient != null then
            self.globals.aptclient = includeAptClient
            isValidLocation = true
            break
        end if
    end for
    if isValidLocation then
        print(Proxima.screen.addOutputEntry(self.utils.message.success("<b>aptclient.so</b> is loaded.")))
    else
        exit(self.utils.message.error("Unable to find <b>aptclient.so</b> library."))
    end if
end function

Proxima.utils.printHeader = function ()
    V = Proxima.globals.version
    print(self.screen.addOutputEntry("v"+V+"       ___       _                 "))
    print(self.screen.addOutputEntry(" _ __  _ __ / _ \__  _(_)_ __ ___   __ _ "))
    print(self.screen.addOutputEntry("| '_ \| '__| | | \ \/ / | '_ ` _ \ / _` |"))
    print(self.screen.addOutputEntry("| |_) | |  | |_| |>  <| | | | | | | (_| |"))
    print(self.screen.addOutputEntry("| .__/|_|   \___//_/\_\_|_| |_| |_|\__,_|"))
    print(self.screen.addOutputEntry("|_|    A simple all-purpose hacking tool."))
    print(self.screen.addOutputEntry("+---------------------------------------+"))
end function

Proxima.utils.displayList = function (header_list, content_list)
    max_lengths = []

    for i in header_list
        max_len = i.len
        for row in content_list
            if row[header_list.indexOf(i)].split("#")[0].len > max_len then max_len = row[header_list.indexOf(i)].split("#")[0].len
        end for
        max_lengths.push(max_len)
    end for

    pad_right = function(str, length, row_color)
        padding = " " * (length - str.len)
        if row_color != null then
            return Proxima.utils.message.colorize(str + padding, "#" + row_color)
        else
            return str + padding
        end if
    end function

    separator = "+"
    header_row = "|"
    for i in header_list
        idx = header_list.indexOf(i)
        separator = separator + "-" * (max_lengths[idx] + 2) + "+"
        header_row = header_row + " " + pad_right(i, max_lengths[idx], null) + " |"
    end for
    print(Proxima.screen.addOutputEntry(separator))
    print(Proxima.screen.addOutputEntry(header_row))
    print(Proxima.screen.addOutputEntry(separator))

    for row in content_list
        row_str = "|"
        for i in header_list
            idx = header_list.indexOf(i)
            split_row = row[idx].split("#")
            row_color = null
            if split_row.len > 1 then
                row[idx] = split_row[0]
                row_color = split_row[1]
            end if
            row_str = row_str + " " + pad_right(row[idx], max_lengths[idx], row_color) + " |"
        end for
        print(Proxima.screen.addOutputEntry(row_str))
        print(Proxima.screen.addOutputEntry(separator))
    end for
end function

Proxima.utils.hasValue = function (givenList, searchValue)
    hasFoundValue = false
    for listItem in givenList
        for key in listItem.indexes
            if listItem[key] == searchValue then
                hasFoundValue = true
                break
            end if
        end for
    end for
    return hasFoundValue
end function

Proxima.utils.collectFiles = function (parentDir)
    allFiles = []

    scanDir = function (dir)
        files = dir.get_files
        if files.len > 0 then
            for file in files
                allFiles.push(file.path)
            end for
        end if
        folders = dir.get_folders
        if folders.len > 0 then
            for folder in folders  
                scanDir(folder)
            end for
        end if
    end function

    scanDir(parentDir)

    return allFiles
end function

Proxima.utils.getAdminContact = function ()
    adminInfo = whois(Proxima.exploit.targetIP)
    infoLines = adminInfo.split(char(10))
    infoObject = {}
    infoObject.domainName = infoLines[0].split(":")[1].trim
    infoObject.administrativeContact = infoLines[1].split(":")[1].trim
    infoObject.emailAddress = infoLines[2].split(":")[1].trim
    infoObject.phone = infoLines[3].split(":")[1].trim
    print(Proxima.screen.addOutputEntry("<b>Domain Name:</b> " + infoObject.domainName))
    print(Proxima.screen.addOutputEntry("<b>Administrative Contact:</b> " + infoObject.administrativeContact))
    print(Proxima.screen.addOutputEntry("<b>Email Address:</b> " + infoObject.emailAddress))
    print(Proxima.screen.addOutputEntry("<b>Phone Number:</b> " + infoObject.phone))
end function

Proxima.utils.findHackShop = function ()
    hackShopIP = null
    
    generateRandomIP = function()
        firstByteRange = range(0,	255)
        firstByteRange.remove(192) //reserved
        firstByteRange.remove(191) //reserved
        firstByteRange.remove(0) //reserved
        firstByteRange.remove(10) //private
        firstByteRange.remove(172) //private
        firstByteRange.remove(128) //reserved
        firstByteRange.remove(223) //reserved

        restByteRange = range(0,255)
        
        generatedIP = []
        generatedIP.push(floor(rnd() * firstByteRange.len))
        for i in range(2)
            generatedIP.push(floor(rnd() * restByteRange.len))
        end for
        generatedIP = generatedIP.join(".")

        if is_valid_ip(generatedIP) and get_router(generatedIP) and get_shell.ping(generatedIP) then
            return generatedIP
        end if
        return generateRandomIP
    end function

    while true
        generatedIP = generateRandomIP
        targetRouter = get_router(ip)
        targetPorts = router.used_ports
        isHackShop = false
        for targetPort in targetPorts
            portInfo = targetRouter.port_info(targetPort)
            if portInfo.indexOf("repository") != null then
                hackShopIP = generatedIP
                break
            end if
        end for
    end while

    if hackShopIP != null then return hackShopIP
    return null
end function

Proxima.utils.message.colorize = function (txt, color)
    return "<color=" + color + ">" + txt + "</color>"
end function

Proxima.utils.message.info = function (txt)
    return self.colorize("[i] " + txt, "#0091FF")
end function

Proxima.utils.message.progress = function (txt)
    return self.colorize("[*] " + txt, "#00FFBB")
end function

Proxima.utils.message.warning = function (txt)
    return self.colorize("[!] " + txt, "#FFDD00")
end function

Proxima.utils.message.error = function (txt)
    return self.colorize("[!] " + txt, "#FF1548")
end function

Proxima.utils.message.success = function (txt)
    return self.colorize("[+] " + txt, "#08FF57")
end function