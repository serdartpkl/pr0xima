Proxima.utils = {}

// ------------------------------------------------------------------------------------------------------------

Proxima.utils.formatList = function (headerList, contentList)
    maxLengths = []

    for i in headerList
        maxLen = i.len
        for row in contentList
            if row[headerList.indexOf(i)].split("#") != null then
                if row[headerList.indexOf(i)].split("#")[0].len > maxLen then maxLen = row[headerList.indexOf(i)].split("#")[0].len
            else
                if row[headerList.indexOf(i)].len > maxLen then maxLen = row[headerList.indexOf(i)].len
            end if
        end for
        maxLengths.push(maxLen)
    end for

    padRight = function(str, length, rowColor)
        padding = " " * (length - str.len)
        if rowColor != null then
            return Proxima.cli.message.colorize(str + padding, "#" + rowColor)
        else
            return str + padding
        end if
    end function

    separator = "+"
    headerRow = "|"
    for i in headerList
        idx = headerList.indexOf(i)
        separator = separator + "-" * (maxLengths[idx] + 2) + "+"
        headerRow = headerRow + " " + padRight(i, maxLengths[idx], null) + " |"
    end for
    print(Proxima.cli.addOutputEntry(separator))
    print(Proxima.cli.addOutputEntry(headerRow))
    print(Proxima.cli.addOutputEntry(separator))

    for row in contentList
        rowStr = "|"
        for i in headerList
            idx = headerList.indexOf(i)
            splitRow = row[idx].split("#")
            rowColor = null
            if splitRow.len > 1 then
                row[idx] = splitRow[0]
                rowColor = splitRow[1]
            end if
            rowStr = rowStr + " " + padRight(row[idx], maxLengths[idx], rowColor) + " |"
        end for
        print(Proxima.cli.addOutputEntry(rowStr))
        print(Proxima.cli.addOutputEntry(separator))
    end for
end function

Proxima.utils.mapHasValue = function (givenList, searchKey, searchValue)
    hasFoundValue = false
    if givenList.len > 0 then
        for mapItem in givenList
            for key in mapItem.indexes
                if key == searchKey and mapItem[key] == searchValue then
                    hasFoundValue = true
                    break
                end if
            end for
        end for
    end if
    return hasFoundValue
end function

Proxima.utils.collectFiles = function (parentDir)
    allFiles = []

    scanDir = function (dir)
        files = dir.get_files
        if files.len > 0 then
            for file in files
                allFiles.push(file.path)
            end for
        end if
        folders = dir.get_folders
        if folders.len > 0 then
            for folder in folders  
                scanDir(folder)
            end for
        end if
    end function

    scanDir(parentDir)

    return allFiles
end function

Proxima.utils.isInList = function(item, list)
    for element in list
        if element == item then
            return true
        end if
    end for
    return false
end function

Proxima.utils.serialize = function(data, excludeKeys=[])
    dataType = typeof(data)
    if dataType == "map" then
        serialized = "{"
        for key in data.indexes
            if isInList(key, excludeKeys) then
                continue
            end if
            value = data[key]
            serialized = serialized + char(34) + key + char(34) + ":"
            serialized = serialized + serialize(value, excludeKeys)
            serialized = serialized + ","
        end for
        if serialized.hasIndex(serialized.len - 1) and serialized[-1] == "," then
            serialized = serialized[:serialized.len - 1]
        end if
        serialized = serialized + "}"
    else if dataType == "list" then
        serialized = "["
        for value in data
            serialized = serialized + serialize(value, excludeKeys)
            serialized = serialized + ","
        end for
        if serialized.hasIndex(serialized.len - 1) and serialized[-1] == "," then
            serialized = serialized[:serialized.len - 1]
        end if
        serialized = serialized + "]"
    else if dataType == "string" then
        serialized = char(34) + data + char(34)
    else
        serialized = str(data)
    end if
    return serialized
end function

Proxima.utils.splitSerializedItems = function(serialized, delimiter)
    items = []
    currentItem = ""
    depth = 0
    for char in serialized
        if char == "{" or char == "[" then
            depth = depth + 1
        else if char == "}" or char == "]" then
            depth = depth - 1
        end if
        if char == delimiter and depth == 0 then
            items.push(currentItem.trim)
            currentItem = ""
        else
            currentItem = currentItem + char
        end if
    end for
    if currentItem.trim != "" then
        items.push(currentItem.trim)
    end if
    return items
end function

Proxima.utils.deserialize = function(serialized, excludeKeys=[])
    serialized = serialized.trim
    if serialized.hasIndex(0) and serialized[0] == "{" and serialized.hasIndex(serialized.len - 1) and serialized[-1] == "}" then
        return self.deserializeMap(serialized, excludeKeys)
    else if serialized.hasIndex(0) and serialized[0] == "[" and serialized.hasIndex(serialized.len - 1) and serialized[-1] == "]" then
        return self.deserializeList(serialized, excludeKeys)
    else if serialized.hasIndex(0) and serialized[0] == char(34) and serialized.hasIndex(serialized.len - 1) and serialized[-1] == char(34) then
        return serialized[1:-1]
    else
        value = serialized.to_int
        if typeof(value) == "string" then
            value = serialized * 1
        end if
        return value
    end if
end function

Proxima.utils.deserializeMap = function(serialized, excludeKeys=[])
    if not serialized.hasIndex(1) or not serialized.hasIndex(serialized.len - 2) then
        return {}
    end if
    serialized = serialized[1:-1].trim
    map = {}
    items = self.splitSerializedItems(serialized, ",")
    for item in items
        keyValue = self.splitSerializedItems(item, ":")
        if keyValue.len != 2 then
            continue
        end if
        key = keyValue[0].trim
        if key.hasIndex(0) and key[0] == char(34) and key.hasIndex(key.len - 1) and key[-1] == char(34) then
            key = key[1:-1]
        end if
        if self.isInList(key, excludeKeys) then
            continue
        end if
        valueStr = keyValue[1].trim
        value = self.deserialize(valueStr, excludeKeys)
        map[key] = value
    end for
    return map
end function

Proxima.utils.deserializeList = function(serialized, excludeKeys=[])
    if not serialized.hasIndex(1) or not serialized.hasIndex(serialized.len - 2) then
        return []
    end if
    serialized = serialized[1:-1].trim
    list = []
    items = self.splitSerializedItems(serialized, ",")
    for item in items
        valueStr = item.trim
        value = self.deserialize(valueStr, excludeKeys)
        list.push(value)
    end for
    return list
end function

Proxima.utils.exportMapToFile = function(map, filePath, excludeKeys=[])
    pathComponents = filePath.split("/")
    fileName = pathComponents.pop()
    directory = pathComponents.join("/")
    serializedMap = serialize(map, excludeKeys)
    file = shell.host_computer.File(filePath)
    if not file then
        shell.host_computer.touch(directory, fileName)
        file = shell.host_computer.File(filePath)
    end if
    file.set_content(serializedMap)
end function

Proxima.utils.importMapFromFile = function(filePath, excludeKeys=[])
    file = shell.host_computer.File(filePath)
    if not file then
        return null
    end if
    content = file.get_content()
    if content == null then
        return null
    end if
    map = deserializeMap(content, excludeKeys)
    return map
end function