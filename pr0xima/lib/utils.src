Proxima.utils = {}

// ------------------------------------------------------------------------------------------------------------

Proxima.utils.formatList = function (headerList, contentList)
    maxLengths = []

    for i in headerList
        maxLen = i.len
        for row in contentList
            if row[headerList.indexOf(i)].split("#") != null then
                if row[headerList.indexOf(i)].split("#")[0].len > maxLen then maxLen = row[headerList.indexOf(i)].split("#")[0].len
            else
                if row[headerList.indexOf(i)].len > maxLen then maxLen = row[headerList.indexOf(i)].len
            end if
        end for
        maxLengths.push(maxLen)
    end for

    padRight = function(str, length, rowColor)
        padding = " " * (length - str.len)
        if rowColor != null then
            return Proxima.cli.message.colorize(str + padding, "#" + rowColor)
        else
            return str + padding
        end if
    end function

    separator = "+"
    headerRow = "|"
    for i in headerList
        idx = headerList.indexOf(i)
        separator = separator + "-" * (maxLengths[idx] + 2) + "+"
        headerRow = headerRow + " " + padRight(i, maxLengths[idx], null) + " |"
    end for
    print(Proxima.cli.addOutputEntry(separator))
    print(Proxima.cli.addOutputEntry(headerRow))
    print(Proxima.cli.addOutputEntry(separator))

    for row in contentList
        rowStr = "|"
        for i in headerList
            idx = headerList.indexOf(i)
            splitRow = row[idx].split("#")
            rowColor = null
            if splitRow.len > 1 then
                row[idx] = splitRow[0]
                rowColor = splitRow[1]
            end if
            rowStr = rowStr + " " + padRight(row[idx], maxLengths[idx], rowColor) + " |"
        end for
        print(Proxima.cli.addOutputEntry(rowStr))
        print(Proxima.cli.addOutputEntry(separator))
    end for
end function

Proxima.utils.mapHasValue = function (givenList, searchKey, searchValue)
    hasFoundValue = false
    if givenList.len > 0 then
        for mapItem in givenList
            for key in mapItem.indexes
                if key == searchKey and mapItem[key] == searchValue then
                    hasFoundValue = true
                    break
                end if
            end for
        end for
    end if
    return hasFoundValue
end function

Proxima.utils.collectFiles = function (parentDir)
    allFiles = []

    scanDir = function (dir)
        files = dir.get_files
        if files.len > 0 then
            for file in files
                allFiles.push(file.path)
            end for
        end if
        folders = dir.get_folders
        if folders.len > 0 then
            for folder in folders  
                scanDir(folder)
            end for
        end if
    end function

    scanDir(parentDir)

    return allFiles
end function

Proxima.utils.treeDirectory = function(targetComputer, givenDirectory, entryIndent = "")
    treeLines = []
    fileHandler = targetComputer.File(givenDirectory)

    if fileHandler.is_folder() then
        getFolders = fileHandler.get_folders()
        getFiles = fileHandler.get_files()
        allEntries = getFolders + getFiles
        for entryItem in allEntries
            isLast = false
            if entryItem.name == allEntries[allEntries.len - 1].name then isLast = true

            entryPrefix = entryIndent
            if isLast then
                entryPrefix = entryPrefix + "`-- "
            else
                entryPrefix = entryPrefix + "|-- "
            end if

            treeLines.push(entryPrefix + entryItem.name)

            if entryItem.is_folder() then
                newIndent = entryIndent
                if isLast then
                    newIndent = newIndent + "    "
                else
                    newIndent = newIndent + "|   "
                end if
                subtreeLines = treeDirectory(targetComputer, entryItem.path, newIndent)
                treeLines = treeLines + subtreeLines
            end if
        end for
    end if

    return treeLines
end function

Proxima.utils.getProcesses = function (targetComputer)
    showProcs = targetComputer.show_procs
    processesList = showProcs.split(char(10))[1:]

    activeProcesses = []
    for processItem in processesList
        parsedItem = processItem.split(" ")
        processMap = {}
        processMap.pid = parsedItem[1]
        processMap.name = parsedItem[4]
        processMap.owner = parsedItem[0]
        processMap.cpu_usage = parsedItem[2]
        processMap.mem_usage = parsedItem[3]
        activeProcesses.push(processMap)
    end for

    return activeProcesses
end function

Proxima.utils.isInList = function(givenItem, givenList)
    for item in givenList
        if item == givenItem then
            return true
        end if
    end for
    return false
end function

Proxima.utils.serializeMap = function(sessionData, excludeKeys = [])
    dataType = typeof(sessionData)
    if dataType == "map" then
        serialized = "{"
        for key in sessionData.indexes
            if self.isInList(key, excludeKeys) then
                continue
            end if
            value = sessionData[key]
            serialized = serialized + char(34) + key + char(34) + ":"
            serialized = serialized + self.serializeMap(value, excludeKeys)
            serialized = serialized + ","
        end for
        if serialized.hasIndex(serialized.len - 1) and serialized[-1] == "," then
            serialized = serialized[:serialized.len - 1]
        end if
        serialized = serialized + "}"
    else if dataType == "list" then
        serialized = "["
        for value in sessionData
            serialized = serialized + self.serializeMap(value, excludeKeys)
            serialized = serialized + ","
        end for
        if serialized.hasIndex(serialized.len - 1) and serialized[-1] == "," then
            serialized = serialized[:serialized.len - 1]
        end if
        serialized = serialized + "]"
    else if dataType == "string" then
        serialized = char(34) + sessionData + char(34)
    else
        serialized = str(sessionData)
    end if
    return serialized
end function

Proxima.utils.deserialize = function(serialized, excludeKeys = [])
    serialized = serialized.trim
    if serialized.hasIndex(0) and serialized[0] == "{" and serialized.hasIndex(serialized.len - 1) and serialized[-1] == "}" then
        return self.deserializeMap(serialized, excludeKeys)
    else if serialized.hasIndex(0) and serialized[0] == "[" and serialized.hasIndex(serialized.len - 1) and serialized[-1] == "]" then
        return self.deserializeList(serialized, excludeKeys)
    else if serialized.hasIndex(0) and serialized[0] == char(34) and serialized.hasIndex(serialized.len - 1) and serialized[-1] == char(34) then
        return serialized[1:-1]
    else
        value = serialized.to_int
        if typeof(value) == "string" then
            value = serialized * 1
        end if
        return value
    end if
end function

Proxima.utils.splitSerializedItems = function(serializedData, delimiter)
    items = []
    currentItem = ""
    depth = 0
    for char in serializedData
        if char == "{" or char == "[" then
            depth = depth + 1
        else if char == "}" or char == "]" then
            depth = depth - 1
        end if
        if char == delimiter and depth == 0 then
            items.push(currentItem.trim)
            currentItem = ""
        else
            currentItem = currentItem + char
        end if
    end for
    if currentItem.trim != "" then
        items.push(currentItem.trim)
    end if
    return items
end function

Proxima.utils.deserializeList = function(serialized, excludeKeys = [])
    if not serialized.hasIndex(1) or not serialized.hasIndex(serialized.len - 2) then
        return []
    end if
    serialized = serialized[1:-1].trim
    list = []
    items = self.splitSerializedItems(serialized, ",")
    for item in items
        valueStr = item.trim
        value = self.deserialize(valueStr, excludeKeys)
        list.push(value)
    end for
    return list
end function

Proxima.utils.deserializeMap = function(serialized, excludeKeys = [])
    if not serialized.hasIndex(1) or not serialized.hasIndex(serialized.len - 2) then
        return {}
    end if
    serialized = serialized[1:-1].trim
    map = {}
    items = self.splitSerializedItems(serialized, ",")
    for item in items
        keyValue = self.splitSerializedItems(item, ":")
        if keyValue.len != 2 then
            continue
        end if
        key = keyValue[0].trim
        if key.hasIndex(0) and key[0] == char(34) and key.hasIndex(key.len - 1) and key[-1] == char(34) then
            key = key[1:-1]
        end if
        if self.isInList(key, excludeKeys) then
            continue
        end if
        valueStr = keyValue[1].trim
        value = self.deserialize(valueStr, excludeKeys)
        map[key] = value
    end for
    return map
end function

Proxima.utils.createPortMap = function (portObject, targetRouter)
    portMap = {}
    portMap["status"] = "open"
    if is_closed(portObject) then portMap["status"] = "closed"
    lanIP = "unknown"
    if targetRouter.port_info(portObject).indexOf(" ") != null then
        portInfo = targetRouter.port_info(portObject)
        lanIP = portObject.get_lan_ip
    end if
    portInfo = targetRouter.port_info(portObject)
    parsedInfo = portInfo.split(" ")
    portMap["port_number"] = portObject.port_number
    portMap["service_name"] = parsedInfo[0]
    portMap["service_version"] = parsedInfo[1]
    portMap["lan_ip"] = lanIP
    return portMap
end function

Proxima.utils.softNetworkScan = function (targetIP)
    scanData = { "ip": targetIP, "is_reachable": true, "ports": [], "devices": [], "main_router": true, "type": "router", "kernel_version": null, "has_firewall": false, "is_owner": false }
    targetRouter = get_router(targetIP)
    if targetRouter != null then
        scanData["ip"] = targetRouter.local_ip

        for port in targetRouter.device_ports(targetRouter.local_ip)
            portMap = self.createPortMap(port, targetRouter)
            scanData["ports"].push(portMap)
        end for

        routerFirewalls = targetRouter.firewall_rules()
        if typeof(routerFirewalls) == "list" and routerFirewalls.len > 0 then scanData["has_firewall"] = true
        scanData["kernel_version"] = targetRouter.kernel_version

        targetDevices = targetRouter.devices_lan_ip
        for deviceIP in targetDevices
            if deviceIP == targetRouter.local_ip then
                continue
            end if
            deviceMap = { "ip": deviceIP, "is_reachable": true, "ports": [], "devices": [], "main_router": false, "type": "device", "kernel_version": null, "has_firewall": false, "is_owner": false } 
            for port in targetRouter.device_ports(deviceIP)
                if port.port_number == 8080 then deviceMap["type"] = "router"
                devicePortMap = self.createPortMap(port, targetRouter)
                deviceMap["ports"].push(devicePortMap)
            end for
            scanData["devices"].push(deviceMap)
        end for
    else
        scanData["is_reachable"] = false
    end if

    return [scanData]
end function

Proxima.utils.deepNetworkScan = function (targetIP, scannedIPs)
    scanResults = []

    if scannedIPs.indexOf(targetIP) != null then
        return scanResults
    end if

    isReachable = Proxima.globals.myShell.ping(targetIP)

    isOwner = false
    if targetIP == Proxima.globals.myPC.local_ip then isOwner = true

    scanData = { "ip": targetIP, "is_reachable": isReachable, "ports": [], "devices": [], "main_router": false, "type": "device", "kernel_version": null, "has_firewall": false, "is_owner": isOwner }

    if not isReachable then
        scanResults.push(scanData)
        return scanResults
    end if

    scannedIPs.push(targetIP)

    targetRouter = get_router(targetIP)
    if targetRouter == null then targetRouter = get_router(scannedIPs[0])

    for port in targetRouter.device_ports(targetIP)
        portMap = self.createPortMap(port, targetRouter)
        scanData["ports"].push(portMap)
    end for

    if targetRouter.local_ip == targetIP then
        routerFirewalls = targetRouter.firewall_rules()
        if typeof(routerFirewalls) == "list" and routerFirewalls.len > 0 then scanData["has_firewall"] = true
        if get_router(targetRouter.public_ip).local_ip == scanData["ip"] then scanData["main_router"] = true
        scanData["kernel_version"] = targetRouter.kernel_version
        scanData["type"] = "router"

        targetDevices = targetRouter.devices_lan_ip
        for device in targetDevices
            if scannedIPs.indexOf(device) != null or device == targetIP then
                continue
            end if
            deviceResults = deepNetworkScan(device, scannedIPs)
            for result in deviceResults
                scanData["devices"].push(result)
            end for
        end for
    end if

    scanResults.push(scanData)
    return scanResults
end function

Proxima.utils.beautifyNetworkScan = function (networkData)
    for data in networkData
        deviceTypePrefix = null
        portIndent = "|     "

        if not data["is_reachable"] then
            deviceTypePrefix = "|---- DEVICE"
            print("<b>" + deviceTypePrefix + " [" + data["ip"] + "]</b>")
            print("<color=#FF1548>" + portIndent + "|- IP_NOT_REACHABLE</color>")
            continue
        end if

        isCCTV = false
        for port in data["ports"]
            if port["port_number"] == 37777 then
                isCCTV = true
                break
            end if
        end for

        if isCCTV then
            deviceTypePrefix = "|---- CCTV"
            portIndent = "|     "
        else if data["type"] == "router" then
            routerPrefix = null
            if data["main_router"] then
                deviceTypePrefix = "|-- MAIN ROUTER"
            else
                deviceTypePrefix = "|-- ROUTER/SWITCH"
            end if
            portIndent = "|   "
        else
            deviceTypePrefix = "|---- COMPUTER"
            portIndent = "|     "
        end if

        if data["has_firewall"] then
            if data["kernel_version"] != null then
                print("<color=#FFC466><b>" + deviceTypePrefix + " [" + data["ip"] + "|KERNEL_V:" + data["kernel_version"] + "]</b></color>")
            else
                print("<color=#FFC466><b>" + deviceTypePrefix + " [" + data["ip"] + "]</b></color>")
            end if
        else
            if data["kernel_version"] != null then
                print("<b>" + deviceTypePrefix + " [" + data["ip"] + "|KERNEL_V:" + data["kernel_version"] + "]</b>")
            else
                isOwner = null
                if data["is_owner"] then isOwner = "<b><color=#08FF57>[YOU]</color></b>"
                print("<b>" + deviceTypePrefix + " [" + data["ip"] + "]</b>" + isOwner)
            end if
        end if

        if data["ports"].len > 0 then
            for port in data["ports"]
                portInfo = "PORT:" + port["port_number"] + "|" + port["status"].upper() + "|" + port["service_name"].upper() + "/" + port["service_version"].upper

                if data["main_router"] and port["lan_ip"] != data["ip"] then
                    portInfo = portInfo + "|ROUTED_TO:" + port["lan_ip"]
                end if

                if port["status"].upper() == "OPEN" then
                    print("<color=#08FF57>" + portIndent + "|- " + portInfo + "</color>")
                else
                    print("<color=#FF1548>" + portIndent + "|- " + portInfo + "</color>")
                end if
            end for
        else
            print("<color=#FF1548>" + portIndent + "|- NO_OPEN_PORTS</color>")
        end if

        if data["devices"].len > 0 then
            self.beautifyNetworkScan(data["devices"])
        end if
    end for
end function

Proxima.utils.scanLAN = function ()
    print("<b>/ START_SCANLAN >></b>")
    print("<b>| START_PROBE [PUBLIC_IP:" + get_router.public_ip + "]</b>")
    startingIP = get_router.local_ip
    scannedIPs = []
    networkData = deepNetworkScan(startingIP, scannedIPs)
    beautifyNetworkScan(networkData)
    print("<b>| END_PROBE</b>")
    print("<b>\ END_SCANLAN <<</b>")
end function


