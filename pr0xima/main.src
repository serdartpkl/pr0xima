import_code("env/init.src")
import_code("env/settings.src")

import_code("lib/apt.src")
import_code("lib/commands.src")
import_code("lib/exploit.src")
import_code("lib/net.src")
import_code("lib/rshell.src")
import_code("lib/screen.src")
import_code("lib/utils.src")

Proxima.loadMetaxploit = function ()
    isValidLocation = false
    for location in self.settings.metaxploitLocations
        includeMetaxploit = include_lib(location)
        if includeMetaxploit != null then
            self.globals.metaxploit = includeMetaxploit
            isValidLocation = true
            break
        end if
    end for
    if isValidLocation then
        print(Proxima.screen.addOutputEntry(self.utils.message.success("<b>metaxploit.so</b> is loaded.")))
    else
        exit(self.utils.message.error("Unable to find <b>metaxploit.so</b> library."))
    end if
end function

Proxima.loadCrypto = function ()
    isValidLocation = false
    for location in self.settings.cryptoLocations
        includeCrypto = include_lib(location)
        if includeCrypto != null then
            self.globals.crypto = includeCrypto
            isValidLocation = true
            break
        end if
    end for
    if isValidLocation then
        print(Proxima.screen.addOutputEntry(self.utils.message.success("<b>crypto.so</b> is loaded.")))
    else
        exit(self.utils.message.error("Unable to find <b>crypto.so</b> library."))
    end if
end function

Proxima.loadRshell = function ()
    isValidLocation = false
    for location in self.settings.cryptoLocations
        includeRshell = include_lib(location)
        if includeRshell != null then
            self.globals.librshell = includeRshell
            isValidLocation = true
            break
        end if
    end for
    if isValidLocation then
        print(Proxima.screen.addOutputEntry(self.utils.message.success("<b>librshell.so</b> is loaded.")))
    else
        exit(self.utils.message.error("Unable to find <b>librshell.so</b> library."))
    end if
end function

Proxima.loadAptClient = function ()
    isValidLocation = false
    for location in self.settings.cryptoLocations
        includeAptClient = include_lib(location)
        if includeAptClient != null then
            self.globals.aptclient = includeAptClient
            isValidLocation = true
            break
        end if
    end for
    if isValidLocation then
        print(Proxima.screen.addOutputEntry(self.utils.message.success("<b>aptclient.so</b> is loaded.")))
    else
        exit(self.utils.message.error("Unable to find <b>aptclient.so</b> library."))
    end if
end function

Proxima.setScanMode = function (scanMode)
    self.globals.scanMode = scanMode
end function

Proxima.printHeader = function ()
    V = Proxima.globals.version
    print(self.screen.addOutputEntry("v"+V+"       ___       _                 "))
    print(self.screen.addOutputEntry(" _ __  _ __ / _ \__  _(_)_ __ ___   __ _ "))
    print(self.screen.addOutputEntry("| '_ \| '__| | | \ \/ / | '_ ` _ \ / _` |"))
    print(self.screen.addOutputEntry("| |_) | |  | |_| |>  <| | | | | | | (_| |"))
    print(self.screen.addOutputEntry("| .__/|_|   \___//_/\_\_|_| |_| |_|\__,_|"))
    print(self.screen.addOutputEntry("|_|    A simple all-purpose hacking tool."))
    print(self.screen.addOutputEntry("+---------------------------------------+"))
end function

Proxima.startCLI = function ()
    activeTarget = null
    if self.exploit.targetIP != null then 
        activeTarget = self.exploit.targetIP 
    else
        activeTarget = self.globals.activeUser
    end if
    self.globals.cliString = self.utils.message.colorize("<b>" + activeTarget + "</b>", "#FFC466") + self.utils.message.colorize("@pr0xima", "#FC8403") + self.utils.message.colorize("> ", "#008DFF")
    while true
        userCommand = user_input(self.globals.cliString, false, false).trim
        self.screen.addInputEntry(userCommand)
        self.handleCommand(userCommand)
    end while
end function

Proxima.handleCommand = function (userCommand)
    if userCommand != null and userCommand != "" then
        parsedCommand = null
        params = null
        if typeof(split(userCommand, " ")) == "list" then
            parts = split(userCommand, " ")
            parsedCommand = parts[0]
            parts.remove(0)
            params = parts
        else
            parsedCommand = userCommand
            params = []
        end if

        selectedCommand = null
        for command in self.commands
            if command.values[0] == parsedCommand then
                selectedCommand = command.values[1]
                break
            end if
        end for

        if selectedCommand != null then
            selectedCommand.exec(params)
        else
            self.utils.throwCLIError()
        end if
    end if
end function

Proxima.initialize = function ()
    self.printHeader()
    self.startCLI()
end function