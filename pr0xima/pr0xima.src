import_code("env/init.src")
import_code("env/settings.src")

import_code("lib/commands.src")
import_code("lib/exploit.src")
import_code("lib/net.src")
import_code("lib/rshell.src")
import_code("lib/utils.src")

Proxima.loadMetaxploit = function ()
    isValidLocation = false
    for location in self.settings.metaxploitLocations
        includeMetaxploit = include_lib(location)
        if includeMetaxploit != null then
            self.globals.metaxploit = includeMetaxploit
            isValidLocation = true
            break
        end if
    end for
    if isValidLocation then
        print(self.utils.message.success("<b>metaxploit.so</b> is loaded."))
    else
        exit(self.utils.message.error("Unable to find <b>metaxploit.so</b> library."))
    end if
end function

Proxima.loadCrypto = function ()
    isValidLocation = false
    for location in self.settings.cryptoLocations
        includeCrypto = include_lib(location)
        if includeCrypto != null then
            self.globals.crypto = includeCrypto
            isValidLocation = true
            break
        end if
    end for
    if isValidLocation then
        print(self.utils.message.success("<b>crypto.so</b> is loaded."))
    else
        exit(self.utils.message.error("Unable to find <b>crypto.so</b> library."))
    end if
end function

Proxima.initialize = function (scanMode = 1)
    self.globals.scanMode = scanMode

    self.loadMetaxploit()
    self.loadCrypto()

    if self.globals.scanMode == 1 and not self.net.checkConnection() then exit(self.utils.message.error("You are not connected to internet! Terminating program..."))

    self.globals.cliMarker = self.utils.message.colorize("[" + self.globals.activeUser + "]", "#FFC466") + self.utils.message.colorize("@" + self.globals.applicationName, "#FC8403") + self.utils.message.colorize("> ", "#008DFF")
end function

Proxima.startCLI = function ()
    while true
        userCommand = user_input(self.globals.cliMarker, false, false).trim
        self.handleCommand(userCommand)
    end while
end function

Proxima.handleCommand = function (userCommand)
    if userCommand != null and userCommand != "" then
        parsedCommand = null
        params = null
        if typeof(split(userCommand, " ")) == "list" then
            parts = split(userCommand, " ")
            parsedCommand = parts[0]
            parts.remove(0)
            params = parts
        else
            parsedCommand = userCommand
            params = []
        end if

        selectedCommand = null
        for command in self.commands
            if command.values[0] == parsedCommand then
                selectedCommand = command.values[1]
                break
            end if
        end for

        if selectedCommand != null then
            selectedCommand.exec(params)
        else
            self.utils.throwCLIError()
        end if
    end if
end function