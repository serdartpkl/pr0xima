Proxima.commands = {}

Proxima.commands.dump = {
    "name": "dump",
    "description": "Dumps target IPs ports or local libraries to perform a scan.",
    "usage": "dump <ip|local>",
    "type": 2
}
Proxima.commands.dump.exec = function (params)
    if params.len > 0 then
        targetIP = params[0]
        checkTargetIP = Proxima.exploit.checkTargetIP(targetIP)
        if checkTargetIP then
            checkPorts = Proxima.exploit.checkPorts(targetIP)
            if checkPorts then
                Proxima.exploit.displayPortInfo()
            else
                Proxima.io.throwCLIError("No open ports found on given IP address!")
            end if
        else if checkTargetIP == false then
            Proxima.io.throwCLIError("Given IP address is not reachable or do not exist!")
        else if checkTargetIP == null then
            Proxima.io.throwCLIError("Given IP address is not valid!")
        end if
    else
        Proxima.exploit.checkLibraries()
        Proxima.exploit.displayLibraryInfo()
    end if
end function

// ------------------------------------------------------------------------------------------------------------

Proxima.commands.nmap = {
    "name": "dump",
    "description": "Dumps target IPs ports or local libraries to perform a scan.",
    "usage": "dump <ip|local>",
    "type": 2
}
Proxima.commands.nmap.exec = function (params)
    if params.len > 0 then
        targetIP = params[0]
        checkTargetIP = Proxima.exploit.checkTargetIP(targetIP)
        if checkTargetIP then
            checkPorts = Proxima.exploit.checkPorts(targetIP)
            if checkPorts then
                Proxima.exploit.displayPortInfo()
            else
                Proxima.io.throwCLIError("No open ports found on given IP address!")
            end if
        else if checkTargetIP == false then
            Proxima.io.throwCLIError("Given IP address is not reachable or do not exist!")
        else if checkTargetIP == null then
            Proxima.io.throwCLIError("Given IP address is not valid!")
        end if
    else
        Proxima.exploit.checkLibraries()
        Proxima.exploit.displayLibraryInfo()
    end if
end function

// ------------------------------------------------------------------------------------------------------------

Proxima.commands.exploits = {
    "name": "exploits",
    "description": "Lists all available exploits gathered from current remote target or local libraries.",
    "usage": "exploits",
    "type": 2
}
Proxima.commands.exploits.exec = function (params)
    targetExploits = Proxima.sessions.getSessionValue("targetExploits")
    if targetExploits.len > 0 then
        Proxima.exploit.displayExploitInfo()
    else
        Proxima.cli.throwCLIError("No exploits available, please scan an IP address first.")
    end if
end function

// ------------------------------------------------------------------------------------------------------------

Proxima.commands.users = {
    "name": "users",
    "description": "Lists all available user informations gathered from executed exploit/exploits.",
    "usage": "users",
    "type": 2
}
Proxima.commands.users.exec = function (params)
    targetUsers = Proxima.sessions.getSessionValue("targetUsers")
    if targetUsers.len > 0 then
        Proxima.exploit.displayUserInfo()
    else
        Proxima.cli.throwCLIError("No users found, please execute an exploit first.")
    end if
end function

// ------------------------------------------------------------------------------------------------------------

Proxima.commands.mails = {
    "name": "",
    "description": "Lists all available bank informations gathered from executed exploit/exploits.",
    "usage": "",
    "type": 2
}
Proxima.commands.mails.exec = function (params)
    targetMails = Proxima.sessions.getSessionValue("targetMails")
    if targetMails.len > 0 then
        Proxima.exploit.displayMailInfo()
    else
        Proxima.cli.throwCLIError("No mail information available, please execute an exploit first.")
    end if
end function

// ------------------------------------------------------------------------------------------------------------

Proxima.commands.banks = {
    "name": "mails",
    "description": "Lists all available mail informations gathered from executed exploit/exploits.",
    "usage": "mails",
    "type": 2
}
Proxima.commands.banks.exec = function (params)
    targetBanks = Proxima.sessions.getSessionValue("targetBanks")
    if targetBanks.len > 0 then
        Proxima.exploit.displayBankInfo()
    else
        Proxima.cli.throwCLIError("No bank information available, please execute an exploit first.")
    end if
end function

// ------------------------------------------------------------------------------------------------------------

Proxima.commands.shells = {
    "name": "shells",
    "description": "Lists all available shell connections gathered from executed exploit/exploits.",
    "usage": "shells",
    "type": 2
}
Proxima.commands.shells.exec = function (params)
    targetShells = Proxima.sessions.getSessionValue("targetShells")
    if targetShells.len > 0 then
        Proxima.exploit.displayShellInfo()
    else
        Proxima.cli.throwCLIError("No open shells available, please execute an exploit first.")
    end if
end function

// ------------------------------------------------------------------------------------------------------------

Proxima.commands.execute = {
    "name": "execute",
    "description": "Executes specified exploit with given ID.",
    "usage": "execute <id>",
    "type": 2
}
Proxima.commands.execute.exec = function (params)
    if params.len == 0 then
        Proxima.cli.throwCLIError("No exploit ID provided.", self.usage)
    else
        if params[0] == "all" then
            Proxima.exploit.autoExecute()
        else
            Proxima.exploit.execute(params[0].to_int)
        end if
    end if
end function

// ------------------------------------------------------------------------------------------------------------

Proxima.commands.decipher = {
    "name": "decipher",
    "description": "Deciphers ",
    "usage": "decipher <list> <id>",
    "type": 2
}
Proxima.commands.decipher.exec = function (params)
    if params.len < 2 then
        Proxima.cli.throwCLIError("No target list or ID provided.", self.usage)
    else if params.len == 2 then
        if params[0] == "users" then
            Proxima.exploit.decipherUserPassword(params[1].to_int)
        else if params[0] == "mails" then
            Proxima.exploit.decipherMailPassword(params[1].to_int)
        else if params[0] == "banks" then
            Proxima.exploit.decipherBankPassword(params[1].to_int)
        else
            Proxima.cli.throwCLIError("Unknown list type.", self.usage)
        end if
    else if params.len > 2 then
        Proxima.cli.throwCLIError("Too many arguements.", self.usage)
    end if
end function

// ------------------------------------------------------------------------------------------------------------

Proxima.commands.shell = {
    "name": "shell",
    "description": "Starts terminal for specified shell with given ID.",
    "usage": "shell <id>",
    "type": 2
}
Proxima.commands.shell.exec = function (params)
    if params.len == 0 then
        Proxima.cli.throwCLIError("No shell ID provided.", self.usage)
    else
        Proxima.exploit.launchShell(params[0].to_int)
    end if
end function

Proxima.commands.delete = {
    "name": "delete",
    "description": "Deletes specified remote or local file.",
    "usage": "delete <path>",
    "type": 2
}
Proxima.commands.delete.exec = function (params)
    if params.len == 0 then
        Proxima.throwCLIError("No file path provided.", self.usage)
    else
        Proxima.exploit.deleteFile(params[0])
    end if
end function

// ------------------------------------------------------------------------------------------------------------

Proxima.commands.launch = {
    "name": "run",
    "description": "Executes ",
    "usage": "run <path>",
    "type": 2
}
Proxima.commands.launch.exec = function (params)
    if params.len == 0 then
        Proxima.throwCLIError("No binary file path provided.", self.usage)
    else
        Proxima.exploit.runBinaryFile(params[0])
    end if
end function

// ------------------------------------------------------------------------------------------------------------

Proxima.commands.corrupt = {
    "name": "corrupt",
    "description": "Corrupts remote target's computer and makes it unable to work.",
    "usage": "corrupt",
    "type": 2
}
Proxima.commands.corrupt.exec = function (params)
    Proxima.exploit.corruptComputer()
end function

// ------------------------------------------------------------------------------------------------------------

Proxima.commands.cleanup = {
    "name": "cleanup",
    "description": "Removes remote or local system log file to leave no trace.",
    "usage": "cleanup",
    "type": 2
}
Proxima.commands.cleanup.exec = function (params)
    Proxima.exploit.cleanUpLogs()
end function

// ------------------------------------------------------------------------------------------------------------

Proxima.commands.cls = {
    "name": "cls",
    "description": "Clears terminal screen.",
    "usage": "cls",
    "type": 2
}
Proxima.commands.cls.exec = function (params)
    Proxima.io.cliEntries = []
    Proxima.io.clearScreen()
end function

// ------------------------------------------------------------------------------------------------------------

Proxima.commands.help = {
    "name": "help",
    "description": "Lists all available commands.",
    "usage": "help",
    "type": 2
}
Proxima.commands.help.exec = function (params)
    i = 0
    for command in Proxima.commands
        cmd = command.values[1]
        cmd_name = cmd.name
        cmd_description = cmd.description
        cmd_usage = cmd.usage
        print(Proxima.cli.addOutputEntry("<b>" + cmd_name + "</b>:"))
        print(Proxima.cli.addOutputEntry(cmd_description))
        print(Proxima.cli.addOutputEntry("<b>Usage:</b> " + cmd_usage))

        if i != Proxima.cli.commands.len - 1 then
            print(Proxima.cli.addOutputEntry("+------------------------------------+"))
        end if

        i = i + 1
    end for
end function

// ------------------------------------------------------------------------------------------------------------

Proxima.commands.exit = {
    "name": "exit",
    "description": "Exits from script.",
    "usage": "exit",
    "type": 2
}
Proxima.commands.exit.exec = function (params)
    exit(Proxima.io.message.success("Goodbye! Have a nice day."))
end function

// ------------------------------------------------------------------------------------------------------------

Proxima.commands.sessions = {
    "name": "sessions",
    "description": "List available sessions.",
    "usage": "sessions",
    "type": 2
}
Proxima.commands.sessions.exec = function (params)
    if params.len == 0 then
        if Proxima.sessions.targetSessions.len > 0 then
            Proxima.sessions.displaySessionInfo()
        else
            Proxima.throwCLIError("No sessions available, please perform a scan first.")
        end if
    else
        if params.len == 1 then
            if params[0] == "saved" then
            else
            end if
        else if params.len == 2 then
            if params[0] == "load" then
            else if params[0] == "save" then
            else if params[0] == "switch" then
                targetSession = Proxima.sessions.getSession(params[0].to_int)
                if targetSession != null then
                    Proxima.sessions.setSession(params[0].to_int)
                    Proxima.cli.cliString = Proxima.cli.message.colorize("<b>" + targetSession.targetIP + "</b>", "#FFC466") + Proxima.cli.message.colorize("@pr0xima", "#FC8403") + Proxima.cli.message.colorize("> ", "#008DFF")
                else
                    Proxima.cli.throwCLIError("No session found with provided ID.")
                end if
            else if params[0] == "remove" then
            else
            end if
        else if params.len == 3 then
        else
        end if
    end if
end function

// sessions - lists target sessions
// sessions saved - lists saved sessions
// sessions load 1|all - loads saved session with given id
// sessions save 1|all - saves target session|s with given id
// sessions remove 1 - removes target session with given id
// sessions remove 1 -s - removes saved session with given id
// sessions switch 1 - switches to target session with given id

Proxima.commands.whois = {
    "name": "whois",
    "description": "Performs 'whois' command to gather contact information for remote target.",
    "usage": "whois",
    "type": 2
}
Proxima.commands.whois.exec = function (params)
    adminInfo = whois(Proxima.exploit.targetIP)
    adminInfo = adminInfo.split(char(10))
    print(Proxima.cli.addOutputEntry(Proxima.cli.message.colorize("<b>Domain Name:</b> ", "#0091FF") + adminInfo[0].split(":")[1].trim))
    print(Proxima.cli.addOutputEntry(Proxima.cli.message.colorize("<b>Administrative Contact:</b> ", "#0091FF") + adminInfo[1].split(":")[1].trim))
    print(Proxima.cli.addOutputEntry(Proxima.cli.message.colorize("<b>Email Address:</b> ", "#0091FF") + adminInfo[2].split(":")[1].trim))
    print(Proxima.cli.addOutputEntry(Proxima.cli.message.colorize("<b>Phone Number:</b> ", "#0091FF") + adminInfo[3].split(":")[1].trim))
end function

Proxima.commands.rshell = {
    "name": "rshell",
    "description": "Inject reverse shell for specified open shell",
    "usage": "rshell <id>",
    "type": 2
}
Proxima.commands.rshell.exec = function (params)
    if params.len == 0 then
        Proxima.io.throwCLIError("No shell ID provided.", self.usage)
    else
        Proxima.exploit.injectRshell(params[0].to_int)
    end if
end function

Proxima.commands.analyze = {
    "name": "analyze",
    "description": "Analizes available methods.",
    "usage": "analyze",
    "type": 2
}
Proxima.commands.analyze.exec = function (params)
    analyzeResult = Proxima.exploit.analyzeExploitResults()
    Proxima.exploit.generateAnalyzeReport(analyzeResult)
end function