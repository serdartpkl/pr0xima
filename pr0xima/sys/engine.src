Proxima.engine = {}

Proxima.engine.fileSystem = [
    {
        "name": "pr0xima",
        "is_folder": true,
        "parent_dir": home_dir,
        "has_found": false
    },
    {
        "name": "databases",
        "is_folder": true,
        "parent_dir": home_dir + "/pr0xima",
        "has_found": false
    },
    {
        "name": "sessions.db",
        "is_folder": false,
        "parent_dir": home_dir + "/pr0xima/databases",
        "default_content": "{" + char(34) + "records" + char(34) + ":[]" + "}",
        "has_found": false
    },
    {
        "name": "exploits.db",
        "is_folder": false,
        "parent_dir": home_dir + "/pr0xima/databases",
        "default_content": "{" + char(34) + "records" + char(34) + ":[]" + "}",
        "has_found": false
    },
    {
        "name": "downloads",
        "is_folder": true,
        "parent_dir": home_dir + "/pr0xima",
        "has_found": false
    },
    {
        "name": "settings.conf",
        "is_folder": false,
        "parent_dir": home_dir + "/pr0xima",
        "default_content": "{" + char(34) + "rshell_ip" + char(34) + ":" + char(34) + Proxima.globals.myPC.public_ip + char(34) + "," + 
                           char(34) + "rshell_port" + char(34) + ":1222," + 
                           char(34) + "rshell_proc_name" + char(34) + ":" + char(34) + "prx" + char(34) + "," + 
                           char(34) + "injection_password" + char(34) + ":" + char(34) + "123456" + char(34) + "}",
        "has_found": false
    }
]

// ------------------------------------------------------------------------------------------------------------

Proxima.engine.scanFileSystem = function ()
    for systemFile in self.fileSystem
        getFile = Proxima.globals.myPC.File(systemFile.parent_dir + "/" + systemFile.name)
        if getFile != null then
            if systemFile.is_folder then
                if is_folder(getFile) then systemFile.has_found = true
            else
                systemFile.has_found = true
            end if
        end if
    end for
end function

Proxima.engine.createMissingFiles = function ()
    hasMissingFiles = false

    homeFolder = Proxima.globals.myPC.File(home_dir)
    if homeFolder.has_permission("w") then 
        for systemFile in self.fileSystem
            if systemFile.has_found == false then
                if systemFile.is_folder then
                    createFolder = Proxima.globals.myPC.create_folder(systemFile.parent_dir, systemFile.name)
                    if createFolder == 0 or typeof(createFolder) == "string" then hasMissingFiles = true
                else
                    createFile = Proxima.globals.myPC.touch(systemFile.parent_dir, systemFile.name)
                    if createFile == 1 then
                        setDefaultContent = Proxima.globals.myPC.File(systemFile.parent_dir + "/" + systemFile.name).set_content(systemFile.default_content)
                        if setDefaultContent == 0 or typeof(setDefaultContent) == "string" then hasMissingFiles = true
                    else
                        hasMissingFiles = true
                    end if
                end if
            end if
        end for
    else
        hasMissingFiles = true
    end if

    if hasMissingFiles == false then return true
    return false
end function

Proxima.engine.getSettings = function ()
    settingsFile = Proxima.globals.myPC.File(home_dir + "/pr0xima/settings.conf")
    if settingsFile != null then
        deserializedSettings = Proxima.serialization.deserializeMap(settingsFile.get_content())
        return deserializedSettings
    end if
    return null
end function

Proxima.engine.setSettings = function (settingKey, settingValue)
    settingsMap = self.getSettings()
    if settingsMap != null then
        settingsMap[settingKey] = settingValue
        serializedSettingsMap = Proxima.serialization.serializeMap(settingsMap)
        settingsFile = Proxima.globals.myPC.File(home_dir + "/pr0xima/settings.conf")
        setFileContent = settingsFile.set_content(serializedSettingsMap)
        if setFileContent != 0 and typeof(setFileContent) == "string" then return true
    end if
    return null
end function

Proxima.engine.includeLibraries = function (libraryList)
    libraryMap = {}

    for libraryName in libraryList
        libraryMap[libraryName] = null
    end for

    for libraryName in libraryMap.indexes
        for libraryLocation in Proxima.globals.libraryLocations
            includeLibrary = include_lib(libraryLocation + "/" + libraryName)
            Proxima.io.clearScreen()
            wait(Proxima.globals.waitTime)
            if includeLibrary != null then
                libraryMap[libraryName] = includeLibrary
                break
            end if
        end for
    end for

    return libraryMap
end function

Proxima.engine.updateLibraries = function (pendingList)
    statusMap = {"updated": [], "failed": []}
    for pendingLibrary in pendingList
        print(Proxima.io.addLine())
        updateLibrary = Proxima.apt.installLibrary(pendingLibrary)
        if updateLibrary != null then
            statusMap.updated.push(pendingLibrary)
        else
            statusMap.failed.push(pendingLibrary)
            print(Proxima.io.addOutputEntry(Proxima.io.output.error("Couldn't update <b>" + pendingLibrary + "</b>.")))
        end if
        print(Proxima.io.addLine())
    end for
    return statusMap
end function

Proxima.engine.initLibraries = function ()
    aptClient = self.includeLibraries(["aptclient.so"])["aptclient.so"]

    if aptClient != null then
        Proxima.globals.aptclient = aptClient
        print(Proxima.io.addOutputEntry(Proxima.io.output.success("Found <b>aptclient.so</b> library. <b>[LOADED]</b>")))
    else
        print(Proxima.io.addOutputEntry(Proxima.io.output.error("Couldn't locate <b>aptclient.so</b> library. <b>[FAILED]</b>")))
    end if

    print(Proxima.io.addLine())

    isGuest = true
    if Proxima.globals.activeUser != "guest" then isGuest = false

    if aptClient != null then
        if isGuest == false then
            hasShopRepository = false
            hasUpdatedRepositoryInformation = false
            
            repositoryIPs = Proxima.apt.getRepositories()
            if repositoryIPs.len > 0 then
                for repositoryIP in repositoryIPs
                    if Proxima.apt.isValidShop(repositoryIP) then
                        addRepository = Proxima.apt.addRepository(repositoryIP)
                        if addRepository then hasShopRepository = true
                    end if
                end for
            end if

            if hasShopRepository == false then
                print(Proxima.io.addOutputEntry(Proxima.io.output.warning("Couldn't find any repository IP!")))
                print(Proxima.io.addOutputEntry(Proxima.io.output.progress("Searching for a repository IP...")))
                foundedShopIP = Proxima.apt.findShop()
                if foundedShopIP != null then
                    addRepository = Proxima.apt.addRepository(foundedShopIP)
                    if addRepository then
                        hasShopRepository = true
                        print(Proxima.io.addOutputEntry(Proxima.io.output.success("Found one! Successfully added to repository sources.")))
                    else
                        print(Proxima.io.addOutputEntry(Proxima.io.output.warning("Found one, but couldn't add repository information to sources.")))
                    end if
                end if
            end if

            if hasShopRepository then
                updateRepositoryInformation = Proxima.apt.updateRepositoryInformation()
                if updateRepositoryInformation then
                    hasUpdatedRepositoryInformation = true
                    print(Proxima.io.addOutputEntry(Proxima.io.output.success("Updated repository information successfully!")))
                else
                    print(Proxima.io.addOutputEntry(Proxima.io.output.warning("Couldn't update repository information, it won't be able to check updates.")))
                end if
            end if

            if hasUpdatedRepositoryInformation then
                checkForUpdates = Proxima.apt.checkForUpdates()
                if checkForUpdates != null then
                    updateLibraries = self.updateLibraries(checkForUpdates)
                    if updateLibraries.failed.indexOf(null) != null then
                        print(Proxima.io.addOutputEntry(Proxima.io.output.warning("Couldn't update all the libraries properly due to unexpected error.")))
                    else
                        print(Proxima.io.addOutputEntry(Proxima.io.output.success("Updated all libraries successfully!")))
                    end if
                else
                    print(Proxima.io.addOutputEntry(Proxima.io.output.info("No updates available at the moment.")))
                end if
            end if

            print(Proxima.io.addLine())

            missingCrypto = false
            if self.includeLibraries(["crypto.so"])["crypto.so"] == null then
                missingCrypto = true
                print(Proxima.io.addOutputEntry(Proxima.io.output.progress("Downloading <b>crypto.so</b>...")))
                installCrypto = Proxima.apt.installLibrary("crypto.so")
                if installCrypto != null then
                    print(Proxima.io.addOutputEntry(Proxima.io.output.success("Installed <b>crypto.so</b> successfully!")))
                else
                    print(Proxima.io.addOutputEntry(Proxima.io.output.error("Couldn't install <b>crypto.so</b> library.")))
                end if
            end if

            if missingCrypto then print(Proxima.io.addLine())
            
            missingMetaxploit = false
            if self.includeLibraries(["metaxploit.so"])["metaxploit.so"] == null then
                missingMetaxploit = true
                print(Proxima.io.addOutputEntry(Proxima.io.output.progress("Downloading <b>metaxploit.so</b>...")))
                installMetaxploit = Proxima.apt.installLibrary("metaxploit.so")
                if installMetaxploit != null then
                    print(Proxima.io.addOutputEntry(Proxima.io.output.success("Installed <b>metaxploit.so</b> successfully!")))
                else
                    print(Proxima.io.addOutputEntry(Proxima.io.output.error("Couldn't install <b>metaxploit.so</b> library.")))
                end if
            end if

            if missingMetaxploit then print(Proxima.io.addLine())
        else
            print(Proxima.io.addOutputEntry(Proxima.io.output.warning("Couldn't check for updates due to insufficient user privileges.")))
        end if
    else
        print(Proxima.io.addOutputEntry(Proxima.io.output.warning("Couldn't check for updates due to missing <b>aptclient.so</b> library.")))
    end if

    includeLibraries = self.includeLibraries(["crypto.so", "metaxploit.so"])

    cryptoLib = includeLibraries["crypto.so"]
    metaxploitLib = includeLibraries["metaxploit.so"]

    if cryptoLib != null then
        Proxima.globals.crypto = cryptoLib
        print(Proxima.io.addOutputEntry(Proxima.io.output.success("Found <b>crypto.so</b> library. <b>[LOADED]</b>")))
    else
        print(Proxima.io.addOutputEntry(Proxima.io.output.error("Couldn't locate or install <b>crypto.so</b> library. <b>[FAILED]</b>")))
    end if

    if metaxploitLib != null then
        Proxima.globals.metaxploit = metaxploitLib
        print(Proxima.io.addOutputEntry(Proxima.io.output.success("Found <b>metaxploit.so</b> library. <b>[LOADED]</b>")))
    else
        print(Proxima.io.addOutputEntry(Proxima.io.output.error("Couldn't locate or install <b>metaxploit.so</b> library. <b>[FAILED]</b>")))
    end if

    if cryptoLib == null or metaxploitLib == null then exit(Proxima.io.output.error("Couldn't start script due to missing library/libraries!"))
end function

// ------------------------------------------------------------------------------------------------------------

Proxima.engine.initializeLocalSession = function ()
    localIP = Proxima.globals.myPC.local_ip
    savedSession = Proxima.sessions.getSession(localIP, true)
    if savedSession != null then
        loadSession = Proxima.sessions.loadSession(savedSession.id)
        if loadSession then return true
    else
        newLocalSession = Proxima.sessions.addSession(0, localIP, get_router())
        if newLocalSession != null and typeof(newLocalSession) == "number" then
            setActiveSession = Proxima.sessions.setSession(newLocalSession)
            if setActiveSession then return true
        end if
    end if
    return null
end function

// ------------------------------------------------------------------------------------------------------------

Proxima.engine.handleCommand = function (userCommand)
    if userCommand != null and userCommand != "" then
        parsedCommand = null
        params = null
        if typeof(split(userCommand, " ")) == "list" then
            parts = split(userCommand, " ")
            parsedCommand = parts[0]
            parts.remove(0)
            params = parts
        else
            parsedCommand = userCommand
            params = []
        end if

        selectedCommand = null
        for command in Proxima.commands
            if command.values[0] == parsedCommand then
                selectedCommand = command.values[1]
                break
            end if
        end for

        if selectedCommand != null then
            if selectedCommand.type == 2 then
                selectedCommand.exec(params)
            else
                if selectedCommand.type == Proxima.sessions.getSessionValue(Proxima.sessions.targetSession, "sessionType") then
                    selectedCommand.exec(params)
                else
                    if selectedCommand.type == 0 then
                        Proxima.io.throwInputError("This command is for local sessions.")
                    else if selectedCommand.type == 1 then
                        Proxima.io.throwInputError("This command is for remote sessions.")
                    end if
                end if
            end if
        else
            Proxima.io.throwInputError()
        end if
    end if
end function

Proxima.engine.startCLI = function ()
    targetIP = Proxima.sessions.getSessionValue(Proxima.sessions.targetSession, "targetIP")
    Proxima.io.updateInputString(Proxima.globals.activeUser, Proxima.globals.myPC.public_ip, targetIP, Proxima.sessions.targetSession, 0)
    while true
        userCommand = user_input(Proxima.io.inputString, false, false).trim
        Proxima.io.addInputEntry(userCommand)
        self.handleCommand(userCommand)
    end while
end function

Proxima.engine.isGameModeOnline = function ()
    if Proxima.globals.myPC.File("/usr/bin/Chat.exe") != null then return true
    return false
end function

Proxima.engine.startEngine = function (runTests = false)
    Proxima.io.clearScreen()
    Proxima.io.printHeader()
    Proxima.io.printInformation("pr0xima", "A simple easy to use multi purpose hacking tool.")
    
    print(Proxima.io.addLine())

    if Proxima.net.checkConnection != true then 
        print(Proxima.io.output.error("You are not connected to the internet! Terminating program..."))
        exit(Proxima.io.output.info("You can hack into any WiFi by using <b>pr0net</b> subtool."))
    end if

    self.scanFileSystem()
    initializeFileSystem = self.createMissingFiles()
    if initializeFileSystem then
        print(Proxima.io.addOutputEntry(Proxima.io.output.success("File system initialized successfully!")))
    else
        exit(Proxima.io.output.error("Couldn't initialize file system!"))
    end if

    getSettings = self.getSettings()
    if getSettings != null then
        print(Proxima.io.addOutputEntry(Proxima.io.output.success("Settings loaded successfully!")))
    else
        exit(Proxima.io.output.error("Couldn't load settings!"))
    end if

    print(Proxima.io.addLine())

    self.initLibraries()

    print(Proxima.io.addLine())

    if runTests then
        Proxima.testing.runTests()
    else
        if self.isGameModeOnline() then Proxima.globals.waitTime = 0.1
        getSavedSessions = Proxima.sessions.getSessions(true)
        if getSavedSessions != null then
            if getSavedSessions.len > 0 then
                print(Proxima.io.addOutputEntry(Proxima.io.output.info("Found <b>" + getSavedSessions.len + "</b> saved sessions.")))
                print(Proxima.io.addOutputEntry(Proxima.io.output.info("You can view saved sessions by typing: <b>sessions saved</b>.")))
            else
                print(Proxima.io.addOutputEntry(Proxima.io.output.info("No saved sessions found.")))
            end if
        else
            exit(Proxima.io.addOutputEntry(Proxima.io.output.error("Couldn't access sessions database due to unexpected error. Terminating program...")))
        end if
    
        print(Proxima.io.addOutputEntry(Proxima.io.output.line))

        initializeLocalSession = self.initializeLocalSession()
        if initializeLocalSession != null then
            print(Proxima.io.addOutputEntry(Proxima.io.output.success("Initialized local session successfully!")))
            self.startCLI()
        else
            exit(Proxima.io.output.error("Couldn't initialize local session due to unexpected error. Terminating program..."))
        end if
    end if
end function