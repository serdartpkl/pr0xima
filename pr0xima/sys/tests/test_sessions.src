Proxima.testing.tests.test_sessions = function ()
    getActiveSessions = Proxima.sessions.getSessions()
    getSavedSessions = Proxima.sessions.getSessions(true)

    if getActiveSessions != null then
        print(Proxima.io.addOutputEntry(Proxima.io.output.success("Found active sessions.")))
        print(getActiveSessions)
    else
        print(Proxima.io.addOutputEntry(Proxima.io.output.info("No active sessions found.")))
    end if
    if getSavedSessions != null then
        if getSavedSessions.len > 0 then
            print(Proxima.io.addOutputEntry(Proxima.io.output.success("Saved sessions found.")))
            print(getSavedSessions)
        else
            print(Proxima.io.addOutputEntry(Proxima.io.output.info("No saved sessions found.")))
        end if
    end if

    ipList = ["2.2.2.2", "3.3.3.3", "4.4.4.4", "5.5.5.5", "7.7.7.7", "8.8.8.8"]

    for ipIndex in range(0, ipList.len - 1)
        createSession = Proxima.sessions.createSession(1, ipList[ipIndex], get_router(ipList[ipIndex]))
        if typeof(createSession) == "number" then print(Proxima.io.addOutputEntry(Proxima.io.output.success("Created session number " + (ipIndex + 1) + " successfully.")))
    end for

    setSession = Proxima.sessions.setSession(1)
    if setSession then print(Proxima.io.addOutputEntry(Proxima.io.output.success("Set active session to ID 1.")))

    Proxima.sessions.displaySessions()

    getSessionValue = Proxima.sessions.getSessionValue(1, "payloadInjection")
    if getSessionValue != null then
        if getSessionValue == 0 then print(Proxima.io.addOutputEntry(Proxima.io.output.warning("Payload injection is off")))
        if getSessionValue == 1 then print(Proxima.io.addOutputEntry(Proxima.io.output.success("Payload injection is on")))
    end if

    setSessionValue = Proxima.sessions.setSessionValue(1, "payloadInjection", 0)
    if setSessionValue then print(Proxima.io.addOutputEntry(Proxima.io.output.info("Turned payload injection off.")))

    getSessionValue = Proxima.sessions.getSessionValue(1, "payloadInjection")
    if getSessionValue != null then
        if getSessionValue == 0 then print(Proxima.io.addOutputEntry(Proxima.io.output.warning("Payload injection is off")))
        if getSessionValue == 1 then print(Proxima.io.addOutputEntry(Proxima.io.output.success("Payload injection is on")))
    end if

    isLocal = Proxima.sessions.isSessionLocal(1)
    isRemote = Proxima.sessions.isSessionRemote(1)

    if isLocal and isRemote != true then
        print(Proxima.io.addOutputEntry(Proxima.io.output.info("Session with ID 1 is local session.")))
    else if isRemote and isLocal != true then
        print(Proxima.io.addOutputEntry(Proxima.io.output.info("Session with ID 1 is remote session.")))
    end if
end function

Proxima.testing.tests.test_sessions = function ()
    TestSuite_Database = function ()
        Test_CreateDatabase = function ()
            dbName = "test"
            createDatabase = Proxima.db.createDatabase(dbName)
            expect(createDatabase).toBeTruthy()
        end function

        Test_GetDatabases = function ()
            getDatabases = Proxima.db.getDatabases()
            expect(getDatabases).notToBeNull()
        end function

        Test_GetDatabaseRecords = function ()
            getRecords = Proxima.db.getRecords("test")
            expect(getRecords).notToBe([])
        end function

        Test_AddRecordToDatabase = function ()
            recordMap = {"name": "test_one", "value_list": [1, 2, 3]}
            addRecord = Proxima.db.addRecord("test", recordMap)
            expect(addRecord).toBeTruthy()
        end function 

        Test_GetRecordValue = function ()
            getRecordValue = Proxima.db.getRecordValue("test", 1, "name")
            expect(getRecordValue).notToBeNull()
        end function

        Test_SetRecordValue = function ()
            setRecordValue = Proxima.db.setRecordValue("test", 1, "name", "test_one_changed")
            expect(setRecordValue).toBeTruthy()
        end function

        Test_DeleteRecordFromDatabase = function ()
            deleteRecord = Proxima.db.deleteRecord("test", 1)
            expect(deleteRecord).toBeTruthy()
        end function

        Test_ResetDatabaseRecords = function ()
            resetDatabase = Proxima.db.resetRecords("test")
            expect(resetDatabase).toBeTruthy()
        end function

        Test_SearchDatabaseRecord = function ()
            recordIndex = Proxima.db.searchRecords("test", "id", 1)
            expect(recordIndex).toBe(0)
        end function

        Test_UpdateDatabaseRecord = function ()
            recordMap = {"name": "test_one_updated", "value_list": [2, 3, 4]}
            updateRecord = Proxima.db.updateRecord("test", 1, recordMap)
            expect(updateRecord).toBeTruthy()
        end function

        Test_DeleteDatabase = function ()
            deleteDatabase = Proxima.db.deleteDatabase("test")
            expect(deleteDatabase).toBeTruthy()
        end function
    
        it("CREATE_DATABASE", @Test_CreateDatabase)
        it("GET_DATABASES", @Test_GetDatabases)
        it("GET_DATABASE_RECORDS", @Test_GetDatabaseRecords)
        it("ADD_RECORD_TO_DATABASE", @Test_AddRecordToDatabase)
        it("GET_RECORD_VALUE", @Test_GetRecordValue)
        it("SET_RECORD_VALUE", @Test_SetRecordValue)
        it("GET_DATABASE_RECORDS", @Test_GetDatabaseRecords)
        it("DELETE_RECORD_FROM_DATABASE", @Test_DeleteRecordFromDatabase)
        it("GET_DATABASE_RECORDS", @Test_GetDatabaseRecords)
        it("ADD_RECORD_TO_DATABASE", @Test_AddRecordToDatabase)
        it("RESET_DATABASE_RECORDS", @Test_ResetDatabaseRecords)
        it("GET_DATABASE_RECORDS", @Test_GetDatabaseRecords)
        it("ADD_RECORD_TO_DATABASE", @Test_AddRecordToDatabase)
        it("SEARCH_DATABASE_RECORDS", @Test_SearchDatabaseRecord)
        it("UPDATE_DATABASE_RECORD", @Test_UpdateDatabaseRecord)
        it("GET_DATABASE_RECORDS", @Test_GetDatabaseRecords)
        it("DELETE_DATABASE", @Test_DeleteDatabase)
    end function

    describe("DATABASE_TEST_SUITE", @TestSuite_Database)
end function