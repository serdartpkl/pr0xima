Proxima.db = {}

// ------------------------------------------------------------------------------------------------------------

Proxima.db.getDatabase = function (databaseName)
    databaseFile = Proxima.globals.myPC.File(home_dir + "/pr0xima/databases/" + databaseName + ".db")
    if databaseFile != null and databaseFile.get_content() != "" then return databaseFile
    return null
end function

Proxima.db.createDatabase = function (databaseName) 
    if self.getDatabase == null then
        createDatabaseFile = Proxima.globals.myPC.touch(home_dir + "/pr0xima/databases", databaseName + ".db")
        if typeof(createDatabaseFile) != "string" then
            databaseFile = Proxima.globals.myPC.File(home_dir + "/pr0xima/databases/" + databaseName + ".db")
            setFileContent = databaseFile.set_content("{" + char(34) + "records" + char(34) + ":[]}")
            if setFileContent == 1 then return true
        end if
    end if
    return null
end function

// ------------------------------------------------------------------------------------------------------------

Proxima.db.reorderRecords = function (databaseRecords, sortBy = null)
    if sortBy != null then databaseRecords = databaseRecords.sort(sortBy)
    idCounter = 1
    for acquiredRecord in databaseRecords
        if acquiredRecord.id != idCounter then acquiredRecord.id = idCounter
        idCounter = idCounter + 1
    end for
    return databaseRecords
end function

Proxima.db.getRecords = function (databaseName)
    databaseFile = self.getDatabase(databaseName)
    if databaseFile != null then
        deserializedDatabase = Proxima.utils.deserializeMap(databaseFile.get_content())
        return deserializedDatabase.records
    end if
    return null
end function

Proxima.db.setRecords = function (databaseName, givenRecords)
    databaseFile = self.getDatabase(databaseName)
    if databaseFile != null then
        serializedRecords = Proxima.utils.serializeMap({"records": givenRecords})
        setRecords = databaseFile.set_content(serializedRecords)
        if setRecords == 1 then return true
    end if
    return null
end function

Proxima.db.resetRecords = function (databaseName)
    databaseFile = self.getDatabase(databaseName)
    if databaseFile != null then
        resetFile = self.setRecords(databaseName, [])
        if resetFile then return true
    end if
    return null
end function

Proxima.db.addRecord = function (databaseName, recordMap, sortBy = null)
    databaseFile = self.getDatabase(databaseName)
    if databaseFile != null then
        deserializedDatabase = Proxima.utils.deserializeMap(databaseFile.get_content())
        deserializedDatabase.records.push({"id": deserializedDatabase.records.len + 1} + recordMap)
        reorderedRecords = self.reorderRecords(deserializedDatabase.records, sortBy)
        setRecords = self.setRecords(databaseName, reorderedRecords)
        if setRecords then return true
    end if
    return null
end function

Proxima.db.searchRecords = function (databaseName, recordKey, recordValue)
    databaseFile = self.getDatabase(databaseName)
    if databaseFile != null then
        deserializedDatabase = Proxima.utils.deserializeMap(databaseFile.get_content())
        foundedRecords = Proxima.utils.indexesOf(deserializedDatabase.records, recordKey, recordValue)
        if foundedRecords.len > 0 then
            recordCounter = 0
            for recordIndex in foundedRecords
                foundedRecords[recordCounter] = foundedRecords[recordCounter] + 1
                recordCounter = recordCounter + 1
            end for
        end if
        return foundedRecords
    end if
    return null
end function

Proxima.db.deleteRecord = function (databaseName, recordID, sortBy = null)
    databaseFile = self.getDatabase(databaseName)
    if databaseFile != null then
        deserializedDatabase = Proxima.utils.deserializeMap(databaseFile.get_content())
        for acquiredRecord in deserializedDatabase.records
            if acquiredRecord.id == recordID then
                deserializedDatabase.records.remove(recordID - 1)
                reorderedRecords = self.reorderRecords(deserializedDatabase.records, sortBy)
                setDatabase = self.setRecords(databaseName, reorderedRecords)
                if setDatabase then return true
            end if
        end for
    end if
    return null
end function

// ------------------------------------------------------------------------------------------------------------

Proxima.db.getRecordValue = function (databaseName, recordID, recordKey)
    databaseFile = self.getDatabase(databaseName)
    if databaseFile != null then
        deserializedDatabase = Proxima.utils.deserializeMap(databaseFile.get_content())
        for acquiredRecord in deserializedDatabase.records
            if acquiredRecord.id == recordID then
                for key in acquiredRecord.indexes
                    if key == recordKey then return acquiredRecord[recordKey]
                end for
            end if
        end for
    end if
    return null
end function

Proxima.db.setRecordValue = function (databaseName, recordID, recordKey, recordValue)
    databaseFile = self.getDatabase(databaseName)
    if databaseFile != null then
        deserializedDatabase = Proxima.utils.deserializeMap(databaseFile.get_content())
        for acquiredRecord in deserializedDatabase.records
            if acquiredRecord.id == recordID then
                for key in acquiredRecord.indexes
                    if key == recordKey then
                        deserializedDatabase.records[acquiredRecord.id - 1][recordKey] = recordValue
                        setDatabase = self.setRecords(databaseName, deserializedDatabase.records)
                        if setDatabase then return true
                    end if
                end for
            end if
        end for
    end if
    return null
end function

// ------------------------------------------------------------------------------------------------------------

Proxima.db.displayDatabases = function ()
    header_list = ["ID", "DATABASE_NAME"]
    content_list = []

    for acquiredDatabases in Proxima.globals.myPC.File(home_dir + "/pr0xima/databases").get_files()
        for acquiredDatabase in acquiredDatabases
            s_id = str(acquiredDatabase.id)
            s_name = acquiredDatabase.name
            content_list.push([ s_id, s_name ])
        end for
    end for

    Proxima.utils.formatList(header_list, content_list)
end function

Proxima.db.displayRecords = function (databaseName)
    header_list = ["ID", "RECORD_NAME", "DATABASE_NAME", "DATE_CREATED"]
    content_list = []

    acquiredRecords = self.getRecords(databaseName)

    for acquiredRecord in acquiredRecords
        r_id = str(acquiredRecord.id) 
        r_name = acquiredRecords.indexes[acquiredRecord.id - 1]
        r_db_name = databaseName
        r_date = acquiredRecord.dateCreated
        content_list.push([ r_id, r_name, r_db_name, r_date ])
    end for

    Proxima.utils.formatList(header_list, content_list)
end function