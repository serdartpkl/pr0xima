Proxima.db = {}

// ------------------------------------------------------------------------------------------------------------

Proxima.db.getDatabases = function ()
    databaseFiles = databaseFile = Proxima.globals.myPC.File(home_dir + "/pr0xima/databases").get_files()
    if databaseFiles.len > 0 then
        databaseList = []
        idCounter = 1
        for databaseFile in databaseFiles
            databaseMap = {}
            databaseMap.id = idCounter
            databaseMap.name = databaseFile.name.replace(".db", "")
            databaseList.push(databaseMap)
            idCounter = idCounter + 1
        end for
        return databaseList
    end if
    return null
end function

Proxima.db.getDatabase = function (databaseName)
    databaseFile = Proxima.globals.myPC.File(home_dir + "/pr0xima/databases/" + databaseName + ".db")
    if databaseFile != null and databaseFile.get_content() != "" then return databaseFile
    return null
end function

Proxima.db.createDatabase = function (databaseName) 
    if self.getDatabase == null then
        createDatabaseFile = Proxima.globals.myPC.touch(home_dir + "/pr0xima/databases", databaseName + ".db")
        if typeof(createDatabaseFile) != "string" then
            databaseFile = Proxima.globals.myPC.File(home_dir + "/pr0xima/databases/" + databaseName + ".db")
            setFileContent = databaseFile.set_content("{" + char(34) + "records" + char(34) + ":[]}")
            if setFileContent == 1 then return true
        end if
    end if
    return null
end function

// ------------------------------------------------------------------------------------------------------------

Proxima.db.getRecords = function (databaseName)
    databaseFile = self.getDatabase(databaseName)
    if databaseFile != null then 
        databaseRecords = Proxima.utils.deserializeMap(databaseFile.get_content()).records
        if databaseRecords.len > 0 then return databaseRecords
    end if
    return null
end function

Proxima.db.setRecords = function (databaseName, givenRecords)
    databaseFile = self.getDatabase(databaseName)
    if databaseFile != null then
        serializedRecords = Proxima.utils.serializeMap({"records": givenRecords})
        setRecords = databaseFile.set_content(serializedRecords)
        if setRecords == 1 then return true
    end if
    return null
end function

Proxima.db.reorderRecords = function (databaseName, sortBy = null)
    acquiredRecords = self.getRecords(databaseName)
    if acquiredRecords != null then
        if sortBy != null then acquiredRecords = acquiredRecords.sort(sortBy)
        idCounter = 1
        for acquiredRecord in acquiredRecords
            if acquiredRecord.id != idCounter then acquiredRecords[acquiredRecord.id - 1].id = idCounter
            idCounter = idCounter + 1
        end for
        setRecords = self.setRecords(databaseName, acquiredRecords)
        if setRecords == 1 then return true
    end if
    return null
end function

Proxima.db.resetRecords = function (databaseName)
    databaseFile = self.getDatabase(databaseName)
    if databaseFile != null then
        setRecords = self.setRecords(databaseName, [])
        if setRecords then return true
    end if
    return null
end function

Proxima.db.addRecord = function (databaseName, recordMap, sortBy = null)
    acquiredRecords = self.getRecords(databaseName)
    if acquiredRecords != null then
        acquiredRecords.push({"id": acquiredRecords.len + 1} + recordMap)
        reorderRecords = self.reorderRecords(acquiredRecords, sortBy)
        if reorderRecords then return true
    end if
    return null
end function

Proxima.db.searchRecords = function (databaseName, recordKey, recordValue)
    acquiredRecords = self.getRecords(databaseName)
    if acquiredRecords != null then
        foundedRecords = Proxima.utils.indexesOf(acquiredRecords, recordKey, recordValue)
        if foundedRecords.len > 0 then
            recordCounter = 0
            for recordIndex in foundedRecords
                foundedRecords[recordCounter] = foundedRecords[recordCounter] + 1
                recordCounter = recordCounter + 1
            end for
            return foundedRecords
        end if
    end if
    return null
end function

Proxima.db.deleteRecord = function (databaseName, recordID)
    acquiredRecords = self.getRecords(databaseName)
    if acquiredRecords != null then
        for acquiredRecord in acquiredRecords
            if acquiredRecord.id == recordID then
                acquiredRecords.remove(recordID - 1)
                reorderRecords = self.reorderRecords(acquiredRecords, null)
                if reorderRecords then return true
            end if
        end for
    end if
    return null
end function

// ------------------------------------------------------------------------------------------------------------

Proxima.db.getRecordValue = function (databaseName, recordID, recordKey)
    acquiredRecords = self.getRecords(databaseName)
    if acquiredRecords != null then
        for acquiredRecord in acquiredRecords
            if acquiredRecord.id == recordID then
                for key in acquiredRecord.indexes
                    if key == recordKey then return acquiredRecord[recordKey]
                end for
            end if
        end for
    end if
    return null
end function

Proxima.db.setRecordValue = function (databaseName, recordID, recordKey, recordValue)
    acquiredRecords = self.getRecords(databaseName)
    if acquiredRecords != null then
        for acquiredRecord in acquiredRecords
            if acquiredRecord.id == recordID then
                for key in acquiredRecord.indexes
                    if key == recordKey then
                        acquiredRecords[acquiredRecord.id - 1][recordKey] = recordValue
                        setRecords = self.setRecords(databaseName, acquiredRecords)
                        if setRecords then return true
                    end if
                end for
            end if
        end for
    end if
    return null
end function

// ------------------------------------------------------------------------------------------------------------

Proxima.db.displayDatabases = function ()
    headerList = ["ID", "DATABASE_NAME"]
    contentList = []

    for acquiredDatabase in self.getDatabases()
        s_id = str(acquiredDatabase.id)
        s_name = acquiredDatabase.name
        content_list.push([ s_id, s_name ])
    end for

    Proxima.utils.formatList(headerList, contentList)
end function

Proxima.db.displayRecords = function (databaseName)
    headerList = ["ID", "RECORD_NAME", "DATABASE_NAME", "DATE_CREATED"]
    contentList = []

    acquiredRecords = self.getRecords(databaseName)

    for acquiredRecord in acquiredRecords
        r_id = str(acquiredRecord.id) 
        r_name = acquiredRecords.indexes[acquiredRecord.id - 1]
        r_db_name = databaseName
        r_date = acquiredRecord.dateCreated
        content_list.push([ r_id, r_name, r_db_name, r_date ])
    end for

    Proxima.utils.formatList(headerList, contentList)
end function