Proxima.io = {}

Proxima.io.inputString = null
Proxima.io.ioEntries = []

Proxima.io.output = {}

Proxima.io.output.colors = {
    "RED": "#FF1548",
    "GREEN": "#08FF57",
    "BLUE": "#008DFF",
    "CYAN": "#00FFBB",
    "YELLOW": "#FFDD00",
    "ORANGE": "#FC8403",
    "SAND": "#FFC466",
    "PURPLE": "#9370DB",
    "WHITE": "#FFFFFF",
    "GRAY": "#999999"
}

Proxima.io.output.line = "+----------------------------------------------------+"

// ------------------------------------------------------------------------------------------------------------

Proxima.io.output.colorize = function (givenString, givenColor)
    return "<color=" + givenColor + ">" + givenString + "</color>"
end function

Proxima.io.output.info = function (givenString)
    return self.colorize("[i] " + givenString, self.colors.BLUE)
end function

Proxima.io.output.progress = function (givenString)
    return self.colorize("[*] " + givenString, self.colors.CYAN)
end function

Proxima.io.output.warning = function (givenString)
    return self.colorize("[!] " + givenString, self.colors.YELLOW)
end function

Proxima.io.output.error = function (givenString)
    return self.colorize("[!] " + givenString, self.colors.RED)
end function

Proxima.io.output.success = function (givenString)
    return self.colorize("[+] " + givenString, self.colors.GREEN)
end function

// ------------------------------------------------------------------------------------------------------------

Proxima.io.addInputEntry = function (userCommand)
    self.ioEntries.push(self.inputString + userCommand)
end function

Proxima.io.addOutputEntry = function (outputString)
    self.ioEntries.push(outputString)
    return outputString
end function

Proxima.io.addProgressBar = function ()
    self.ioEntries.push("[###################################]==[ 100% ]")
end function

Proxima.io.addTransferProcess = function (fileSize)
    if fileSize.to_int >= 1000000000 then
        fileSizeGB = round((fileSize.to_int / 1000000000) * 10) / 10
        if fileSizeGB == round(fileSizeGB) then
            fileSizeGB = fileSizeGB + ".0 GB"
        else
            fileSizeGB = fileSizeGB + " GB"
        end if
        self.ioEntries.push("100%    " + str(floor(rnd * (900 - 50 + 1) + 50)) + "." + str(floor(rnd * (9 - 1 + 1) + 1)) + " KB/s" + "  0 sec (" + fileSizeGB + " of " + fileSizeGB + " copied)")
    else if fileSize.to_int >= 1000 then
        fileSizeMB = round((fileSize.to_int / 1000000) * 10) / 10 
        if fileSizeMB == round(fileSizeMB) then
            fileSizeMB = fileSizeMB + ".0 MB"
        else
            fileSizeMB = fileSizeMB + " MB"
        end if
        self.ioEntries.push("100%    " + str(floor(rnd * (900 - 50 + 1) + 50)) + "." + str(floor(rnd * (9 - 1 + 1) + 1)) + " KB/s" + "  0 sec (" + fileSizeMB + " of " + fileSizeMB + " copied)")
    else
        fileSize = fileSize + " Bytes"
        self.ioEntries.push("100%    " + str(floor(rnd * (900 - 50 + 1) + 50)) + "." + str(floor(rnd * (9 - 1 + 1) + 1)) + " KB/s" + "  0 sec (" + fileSize + " of " + fileSize + " copied)")
    end if
    self.ioEntries.push("Processing...")
end function

Proxima.io.addLine = function ()
    lineString = self.output.line
    self.ioEntries.push(lineString)
    print(lineString)
end function

Proxima.io.clearScreen = function ()
    clear_screen
    if self.ioEntries.len > 0 then
        for ioEntry in self.ioEntries
            print(ioEntry)
        end for
    end if
    wait(Proxima.globals.printInterval)
end function

// ------------------------------------------------------------------------------------------------------------

Proxima.io.colorizeUserName = function (sessionType, userName)
    userColor = self.output.colors.ORANGE

    if sessionType == 1 and userName == "NOT_SELECTED" then userColor = self.output.colors.CYAN
    if sessionType == 1 and userName == "NO_ACCESS" then userColor = self.output.colors.BLUE
    if sessionType == 1 and userName == "GUEST_ACCESS" then userColor = self.output.colors.YELLOW
    if sessionType == 1 and userName == "USER_ACCESS" then userColor = self.output.colors.GREEN
    if sessionType == 1 and userName == "ROOT_ACCESS" then userColor = self.output.colors.PURPLE

    return userColor
end function

Proxima.io.updateInputString = function (targetSession)
    publicIP = targetSession.targetIP
    localIP = targetSession.targetLAN
    if localIP == null then localIP = "?"
    
    sessionID = targetSession.id
    sessionType = targetSession.sessionType

    if sessionType == 0 then
        publicIP = Proxima.globals.myPC.public_ip
        localIP = Proxima.globals.myPC.local_ip
    end if

    userName = Proxima.globals.activeUser

    if sessionType == 1 then
        if targetSession.targetLAN != null then
            targetShells = targetSession.targetShells
            if targetShells.len > 0 then
                foundedShells = []
                for targetShell in targetShells
                    if targetShell.host_computer.local_ip == targetSession.targetLAN then foundedShells.push(targetShell)
                end for
                if foundedShells.len > 0 then
                    reorderedShells = foundedShells.sort("privilege_level")
                    if reorderedShells[0].privilege_level == 0 then userName = "ROOT_ACCESS"
                    if reorderedShells[0].privilege_level == 1 then userName = "USER_ACCESS"
                    if reorderedShells[0].privilege_level == 2 then userName = "GUEST_ACCESS"
                else
                    userName = "NO_ACCESS"
                end if
            else
                userName = "NO_ACCESS"
            end if
        else
            userName = "NOT_SELECTED"
        end if
    end if

    userColor = self.colorizeUserName(sessionType, userName)

    sessionTypeName = "LOCAL"
    if sessionType == 1 then sessionTypeName = "REMOTE"
    
    publicIPColor = self.output.colors.RED
    localIPColor = self.output.colors.GRAY

    if sessionType == 0 then
        publicIPColor = self.output.colors.GRAY
        localIPColor = self.output.colors.RED
    end if

    if sessionType == 1 and is_lan_ip(publicIP) then
        localIP = targetSession.targetRouter.public_ip
    end if

    inputString = "<pos=20><voffset=0.25em><color=" + self.output.colors.SAND + "><pos=8>——[" +
                  "<voffset=0.2em><color=" + userColor + ">" + userName + "</color>" +
                  "<voffset=0.2em>]——[" +
                  "<voffset=0.2em><color=" + publicIPColor + ">" + publicIP + "</color>" +
                  "<voffset=0.2em><color=" + localIPColor + "><color=" + self.output.colors.GRAY + ">-></color>" + localIP + "</color>" +
                  "<voffset=0.2em>]——[" +
                  "<voffset=0.2em><color=" + self.output.colors.GREEN + ">SID:" + sessionID + "|" + sessionTypeName + "</color>]" +
                  "<voffset=-0.2em><pos=0>/<pos=0><voffset=-1.05em>\<pos=4.95>" +
                  "<pos=8><voffset=-1.45em>——<color=" + self.output.colors.RED + ">$</color><color=" + self.output.colors.BLUE + ">> </color></color>"
    
    self.inputString = inputString
end function

// ------------------------------------------------------------------------------------------------------------

Proxima.io.printHeader = function ()
    print(self.addOutputEntry(self.output.colorize("<b>              _______         .__                </b>", self.output.colors.ORANGE)))
    print(self.addOutputEntry(self.output.colorize("<b>_____________ \   _  \ ___  __|__| _____ _____   </b>", self.output.colors.ORANGE)))
    print(self.addOutputEntry(self.output.colorize("<b>\____ \_  __ \/  /_\  \\  \/  /  |/     \\__  \  </b>", self.output.colors.ORANGE)))
    print(self.addOutputEntry(self.output.colorize("<b>|  |_> >  | \/\  \_/   \>    <|  |  Y Y  \/ __ \_</b>", self.output.colors.ORANGE)))
    print(self.addOutputEntry(self.output.colorize("<b>|   __/|__|    \_____  /__/\_ \__|__|_|  (____  /</b>", self.output.colors.ORANGE)))
    print(self.addOutputEntry(self.output.colorize("<b>|__|                 \/      \/        \/     \/ </b>", self.output.colors.ORANGE)))
    print(self.addOutputEntry(self.output.colorize("<b>                                                 </b>", self.output.colors.ORANGE)))
end function

Proxima.io.printInformation = function (scriptName, scriptDescription)
    print(self.addOutputEntry(self.output.colorize("<b>" + scriptName + " — v" + Proxima.globals.version + "</b>", self.output.colors.SAND)))
    print(self.addOutputEntry(self.output.colorize("<b>" + scriptDescription + "</b>", self.output.colors.WHITE)))
end function

Proxima.io.throwInputError = function (cmdMessage = null, cmdUsage = null)
    if cmdMessage != null then 
        if cmdUsage != null then
            print(self.addOutputEntry(self.output.error(cmdMessage + " Usage: " + cmdUsage)))
        else
            print(self.addOutputEntry(self.output.error(cmdMessage)))
        end if
    else
        print(self.addOutputEntry(self.output.error("Unknown command! Type <b>help</b> to list available commands.")))
    end if
end function