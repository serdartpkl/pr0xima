Proxima.apt = {}

// ------------------------------------------------------------------------------------------------------------

Proxima.apt.checkSourcesFile = function ()
    return Proxima.globals.myPC.File("/etc/apt/sources.txt")
end function

Proxima.apt.getRepositories = function ()
    repositoryIPs = []
    sourcesFile = self.checkSourcesFile()
    if sourcesFile != null then
        deserializedSources = Proxima.serialization.deserializeMap(sourcesFile.get_content)
        if deserializedSources.sourceList.len > 0 then
            for repositoryIP in deserializedSources.sourceList.indexes
                repositoryIPs.push(repositoryIP)
            end for
        end if
    end if
    return repositoryIPs
end function

Proxima.apt.checkRepository = function (repositoryIP)
    allRepositories = self.getRepositories()
    if allRepositories.len > 0 and allRepositories.indexOf(repositoryIP) != null then return true
    return null
end function

Proxima.apt.addRepository = function (repositoryIP)
    if self.checkRepository(repositoryIP) == null then
        addRepo = Proxima.globals.aptclient.add_repo(repositoryIP)
        Proxima.io.clearScreen()
        if addRepo == "" then return true
    end if
    return null
end function

Proxima.apt.deleteRepository = function (repositoryIP)
    if self.checkRepository(repositoryIP) then
        delRepo = Proxima.globals.aptclient.del_repo(repositoryIP)
        Proxima.io.clearScreen()
        if delRepo == "" then return true
    end if
    return null
end function

Proxima.apt.getPackageList = function (repositoryIP)
    if self.checkRepository(repositoryIP) then
        repositoryPackages = Proxima.globals.aptclient.show(repositoryIP)
        packageList = repositoryPackages.split(char(10) + char(10))
        packageList.pop()
        packageList.pop()
        parsedList = []
        for packageItem in packageList
            itemEntry = packageItem.split(char(10))
            packageName = itemEntry[0]
            packageName = packageName.replace("<b>", "")
            packageName = packageName.replace("</b>", "")
            parsedList.push(packageName)
        end for
        return parsedList
    end if
    return null
end function

Proxima.apt.updateRepositoryInformation = function ()
    updateRepoInfo = Proxima.globals.aptclient.update()
    Proxima.io.clearScreen()
    if updateRepoInfo == "" then return true
    return null
end function

Proxima.apt.isValidShop = function (repositoryIP)
    isValidShop = false

    repoPorts = []
    if is_valid_ip(repositoryIP) then
        getRepoPorts = get_router(repositoryIP).used_ports
        if getRepoPorts.len > 0 then repoPorts = getRepoPorts
    end if

    repoServices = []
    if repoPorts.len > 0 then
        for repoPort in repoPorts 
            serviceName = get_router(repositoryIP).port_info(repoPort).split(" ")[0]
            if is_closed(repoPort) != true then repoServices.push(serviceName)
        end for
    end if

    if repoServices.len > 0 and repoServices.indexOf("repository") != null then
        if self.checkRepository(repositoryIP) == null then 
            addRepo = self.addRepository(repositoryIP)
            if addRepo == null then return null
        end if
        if self.updateRepositoryInformation() then
            repoPackageList = self.getPackageList(repositoryIP)
            if repoPackageList != null and repoPackageList.indexOf("metaxploit.so") != null and repoPackageList.indexOf("crypto.so") != null then isValidShop = true
        end if
    end if

    deleteRepository = self.deleteRepository(repositoryIP)

    if deleteRepository != null then
        if isValidShop then return true
    end if
    return null
end function

Proxima.apt.findShop = function ()
    shopIP = null

    while shopIP == null
        generatedIP = Proxima.helpers.generateRandomIP()
        isValidShop = self.isValidShop(generatedIP)
        if isValidShop then shopIP = generatedIP
    end while

    return shopIP
end function

Proxima.apt.checkForUpdates = function ()
    pendingForUpdate = []
    libraryFiles = Proxima.helpers.collectFiles("/lib")
    for acquiredFile in libraryFiles
        isUpdateAvailable = Proxima.globals.aptclient.check_upgrade(acquiredFile)
        Proxima.io.clearScreen()
        if isUpdateAvailable then
            libraryName = acquiredFile.split("/")[-1]
            pendingForUpdate.push(libraryName)
        end if
    end for
    if pendingForUpdate.len > 0 then return pendingForUpdate
    return null
end function

Proxima.apt.installLibrary = function (libraryName)
    installLibrary = Proxima.globals.aptclient.install(libraryName)
    Proxima.io.clearScreen()
    if installLibrary == 1 then
        getLibraryFile = Proxima.globals.myPC.File("/lib/" + libraryName)
        if getLibraryFile != null then 
            Proxima.io.addTransferProcess(getLibraryFile.size())
            return true
        end if
    end if
    return null
end function