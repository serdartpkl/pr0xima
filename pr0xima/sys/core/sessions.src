Proxima.sessions = {}

Proxima.sessions.activeSession = null

Proxima.sessions.targetSessions = []
Proxima.sessions.savedSessions = []

// ------------------------------------------------------------------------------------------------------------

Proxima.sessions.getSession = function (sessionID)
    acquiredSession = null
    if self.targetSessions.len > 0 then
        for targetSession in self.targetSessions
            if targetSession.id == sessionID then
                acquiredSession = targetSession
                break
            end if
        end for
    end if
    return acquiredSession
end function

Proxima.sessions.setSession = function (sessionID)
    acquiredSession = self.getSession(sessionID)
    if acquiredSession != null then
        self.activeSession = acquiredSession.id
    else
        return null
    end if
end function

Proxima.sessions.createSession = function (sessionType, targetIP, targetRouter)
    if Proxima.utils.mapHasValue(self.targetSessions, "targetIP", targetIP) == [] then
        sessionMap = {}

        sessionMap.id = self.targetSessions.len + 1

        sessionMap.targetIP = targetIP
        sessionMap.targetRouter = targetRouter

        if sessionType == 0 then
            sessionMap.targetLibraries = []
            sessionMap.sessionType = sessionType
        else if sessionType == 1 then
            sessionMap.targetPorts = []
            sessionMap.sessionType = sessionType
        end if

        sessionMap.targetExploits = []
        sessionMap.targetShells = []
        sessionMap.targetUsers = []
        sessionMap.targetMails = []
        sessionMap.targetBanks = []

        sessionMap.payloadInjection = true

        sessionMap.autoSave = false 
        sessionMap.creationDate =  current_date
        
        self.targetSessions.push(sessionMap)
        self.setSession(sessionMap.id)
        return true
    else
        return null
    end if
end function

// ------------------------------------------------------------------------------------------------------------

Proxima.sessions.getSessionValue = function (sessionKey)
    acquiredSession = self.getSession(self.activeSession)
    if acquiredSession != null then
        return acquiredSession[sessionKey]
    else
        return null
    end if
end function

Proxima.sessions.setSessionValue = function (sessionKey, sessionValue)
    acquiredSession = self.getSession(self.activeSession)
    if acquiredSession != null then
        self.targetSessions[acquiredSession.id - 1][sessionKey] = sessionValue
    else
        return null
    end if
end function

// ------------------------------------------------------------------------------------------------------------

Proxima.sessions.loadSavedSessions = function ()
    self.savedSessions = []
    getSessionRecords = Proxima.db.getRecords("sessions")
    if getSessionRecords.len > 0 then
        for sessionRecord in getSessionRecords
            self.savedSessions.push(sessionRecord)
        end for
        return true
    else
        return false
    end if
    return null
end function

// ------------------------------------------------------------------------------------------------------------

Proxima.sessions.pushMap = function (targetList, givenMap)
    acquiredSession = self.getSession(self.activeSession)
    if acquiredSession != null then
        self.targetSessions[acquiredSession.id - 1][targetList].push(givenMap)
    else
        return null
    end if
end function

// ------------------------------------------------------------------------------------------------------------

Proxima.sessions.colorizeSessionType = function (sessionType)
    if sessionType == 0 then
        return "LOCAL#FC8403"
    else if sessionType == 1 then
        return "REMOTE#FFC466"
    end if
end function

Proxima.sessions.displaySessionInfo = function ()
    header_list = ["ID", "TARGET_IP", "TYPE"]
    content_list = []
    for targetSession in self.targetSessions 
        addColor = null
        if self.activeSession == targetSession.id then addColor = "#08FF57"
        s_id = str(targetSession.id) + addColor
        s_target_ip = targetSession.targetIP + addColor
        s_type = self.colorizeSessionType(targetSession.sessionType)
        content_list.push([ s_id, s_target_ip, s_type ])
    end for

    Proxima.utils.formatList(header_list, content_list)
end function