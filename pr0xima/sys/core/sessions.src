Proxima.sessions = {}

Proxima.sessions.activeSession = null

Proxima.sessions.targetSessions = []
Proxima.sessions.savedSessions = []

// ------------------------------------------------------------------------------------------------------------

Proxima.sessions.reorderSessions = function (targetSessions)
    idCounter = 1
    for acquiredSession in targetSessions
        if acquiredSession.id != idCounter then acquiredSession.id = idCounter
        idCounter = idCounter + 1
    end for
    return targetSessions
end function

Proxima.sessions.getSession = function (sessionID)
    acquiredSession = null
    if self.targetSessions.len > 0 then
        for targetSession in self.targetSessions
            if targetSession.id == sessionID then
                acquiredSession = targetSession
                break
            end if
        end for
    end if
    return acquiredSession
end function

Proxima.sessions.setSession = function (sessionID)
    acquiredSession = self.getSession(sessionID)
    if acquiredSession != null then
        self.activeSession = acquiredSession.id
        return true
    else
        return null
    end if
end function

Proxima.sessions.addSession = function (sessionMap)

end function

Proxima.sessions.createSession = function (sessionType, targetIP, targetRouter)
    if Proxima.utils.mapHasValue(self.targetSessions, "targetIP", targetIP) == [] then
        sessionMap = {}

        sessionMap.id = self.targetSessions.len + 1

        sessionMap.targetIP = targetIP
        sessionMap.targetRouter = targetRouter

        sessionMap.targetLAN = null
        sessionMap.targetLANs = []

        if sessionType == 0 then
            sessionMap.targetLAN = targetIP
            sessionMap.targetLANs.push(targetIP)
            sessionMap.targetLibraries = []
            sessionMap.sessionType = sessionType
        else if sessionType == 1 then
            sessionMap.targetPorts = []
            sessionMap.sessionType = sessionType
        end if

        sessionMap.targetExploits = []
        sessionMap.targetShells = []
        sessionMap.targetUsers = []
        sessionMap.targetMails = []
        sessionMap.targetBanks = []

        sessionMap.payloadInjection = true

        sessionMap.creationDate = current_date
        
        self.targetSessions.push(sessionMap)
        return sessionMap.id
    end if
    return null
end function

Proxima.sessions.deleteSession = function (sessionID)

end function

// ------------------------------------------------------------------------------------------------------------

Proxima.sessions.getSessionValue = function (sessionKey)
    acquiredSession = self.getSession(self.activeSession)
    if acquiredSession != null then return acquiredSession[sessionKey]
    return null
end function

Proxima.sessions.setSessionValue = function (sessionKey, sessionValue)
    acquiredSession = self.getSession(self.activeSession)
    if acquiredSession != null then
        self.targetSessions[acquiredSession.id - 1][sessionKey] = sessionValue
        return true
    end if
    return null
end function

// ------------------------------------------------------------------------------------------------------------

Proxima.sessions.loadSavedSessions = function ()
    self.savedSessions = []
    getSessionRecords = Proxima.db.getRecords("sessions")
    if getSessionRecords.len > 0 then
        for sessionRecord in getSessionRecords
            self.savedSessions.push(sessionRecord)
        end for
        return true
    else
        return false
    end if
    return null
end function

// ------------------------------------------------------------------------------------------------------------

Proxima.sessions.pushMap = function (targetList, givenMap)
    acquiredSession = self.getSession(self.activeSession)
    if acquiredSession != null then
        self.targetSessions[acquiredSession.id - 1][targetList].push(givenMap)
        return true
    end if
    return null
end function

// ------------------------------------------------------------------------------------------------------------

Proxima.sessions.colorizeSessionType = function (sessionType)
    if sessionType == 0 then return "LOCAL#FC8403"
    if sessionType == 1 then return "REMOTE#FFC466"
end function

Proxima.sessions.displaySessionInfo = function (displaySaved = false)
    header_list = ["ID", "TARGET_IP", "DATE", "TYPE"]
    content_list = []
    
    sessionList = self.targetSessions
    if displaySaved then sessionList = self.savedSessions

    for targetSession in sessionList
        addColor = null
        if displaySaved == false then
            if self.activeSession == targetSession.id then addColor = "#08FF57"
        end if
        s_id = str(targetSession.id) + addColor
        s_target_ip = targetSession.targetIP + addColor
        s_date = targetSession.creationDate + addColor
        s_type = self.colorizeSessionType(targetSession.sessionType)
        content_list.push([ s_id, s_target_ip, s_date, s_type ])
    end for

    Proxima.utils.formatList(header_list, content_list)
end function