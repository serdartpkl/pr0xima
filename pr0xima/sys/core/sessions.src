Proxima.sessions = {}

Proxima.sessions.targetSession = null
Proxima.sessions.activeSessions = []

// ------------------------------------------------------------------------------------------------------------

Proxima.sessions.getSessions = function (getSaved = false)
    sessionsList = null
    if getSaved then
        getSavedSessions = Proxima.db.getRecords("sessions")
        if getSavedSessions != null then sessionsList = getSavedSessions
    else
        sessionsList = self.activeSessions
    end if
    return sessionsList
end function

Proxima.sessions.getSession = function (sessionKey, getSaved = false)
    sessionsList = self.getSessions(getSaved)
    
    acquiredSession = null
    
    if sessionsList != null and sessionsList.len > 0 then
        for targetSession in sessionsList
            checkKey = "id"
            if typeof(sessionKey) == "string" then checkKey = "targetIP"

            if targetSession[checkKey] == sessionKey then
                acquiredSession = targetSession
                break
            end if
        end for
    end if

    return acquiredSession
end function

Proxima.sessions.setSession = function (sessionID)
    acquiredSession = self.getSession(sessionID)
    if acquiredSession != null then
        self.targetSession = acquiredSession.id
        return true
    end if
    return null
end function

// ------------------------------------------------------------------------------------------------------------

Proxima.sessions.resetSession = function (sessionID, resetSaved = false)
    acquiredSession = self.getSession(sessionID, resetSaved)
    if acquiredSession != null then
        createSessionMap = self.createSessionMap(acquiredSession.sessionType, acquiredSession.targetIP, acquiredSession.targetRouter)
        if resetSaved then
            updateRecord = Proxima.db.updateRecord("sessions", sessionID, createSessionMap)
            if updateRecord then return true
        else
            self.activeSessions[sessionID - 1] = {"id": acquiredSession.id} + createSessionMap + {"dateCreated": acquiredSession.dateCreated}
            return true
        end if
    end if
    return null
end function

Proxima.sessions.reorderSessions = function (sortBy = "dateCreated")
    self.activeSessions.sort(sortBy)
    idCounter = 1
    newActiveSessionID = null
    for recordIndex in range(0, self.activeSessions.len - 1)
        if self.targetSession == self.activeSessions[recordIndex].id then newActiveSessionID = self.targetSession
        if self.activeSessions[recordIndex].id != idCounter then self.activeSessions[recordIndex].id = idCounter
        idCounter = idCounter + 1
    end for
    if newActiveSessionID != null then
        setSession = self.setSession(newActiveSessionID)
        if setSession then return true
    end if
    return null
end function

Proxima.sessions.searchSessions = function (sessionKey, sessionValue, searchSaved = false)
    acquiredSessions = self.getSessions(searchSaved)
    if acquiredSessions != null then
        acquiredIndexes = Proxima.utils.indexesOf(acquiredSessions, sessionKey, sessionValue)
        if acquiredIndexes != null then return acquiredIndexes
    end if
    return null
end function

Proxima.sessions.createSessionMap = function (sessionType, targetIP, targetRouter)
    sessionMap = {}

    sessionMap.targetIP = targetIP
    sessionMap.targetRouter = targetRouter

    sessionMap.targetLAN = null
    sessionMap.targetLANs = []

    if sessionType == 0 then
        sessionMap.targetLAN = targetIP
        sessionMap.targetLANs = [targetIP]
        sessionMap.targetLibraries = []
        sessionMap.sessionType = sessionType
    else if sessionType == 1 then
        sessionMap.targetPorts = []
        sessionMap.sessionType = sessionType
    end if

    sessionMap.targetExploits = []
    sessionMap.targetShells = []
    sessionMap.targetUsers = []
    sessionMap.targetMails = []
    sessionMap.targetBanks = []

    sessionMap.payloadInjection = 1

    return sessionMap
end function

Proxima.sessions.addSession = function (sessionType, targetIP, targetRouter)
    if self.getSession(targetIP) == null then
        createSessionMap = self.createSessionMap(sessionType, targetIP, targetRouter)
        sessionID = self.activeSessions.len + 1
        sessionDateCreated = Proxima.utils.getParsedDate()
        sessionMap = {"id": sessionID} + createSessionMap + {"dateCreated": sessionDateCreated}
        self.activeSessions.push(sessionMap)
        return sessionMap.id
    end if
    return null
end function

Proxima.sessions.updateSession = function (sessionID, sessionMap, updateSaved = false)
    getSession = self.getSession(sessionID, updateSaved)
    if getSession != null then
        if updateSaved then
            updateRecord = Proxima.db.updateRecord("sessions", sessionID, sessionMap)
            if updateRecord then return true
        else
            self.activeSessions[sessionID - 1] = {"id": getSession.id} + sessionMap + {"dateCreated": getSession.dateCreated}
            return true
        end if
    end if
    return null
end function

Proxima.sessions.deleteSession = function (sessionID, deleteSaved = false)
    acquiredSession = self.getSession(sessionID, deleteSaved)
    if acquiredSession != null then
        if deleteSaved then
            deleteRecord = Proxima.db.deleteRecord("sessions", sessionID)
            if deleteRecord then return true
        else
            if self.targetSession != sessionID and acquiredSession.sessionType != 0 then
                if self.activeSessions.hasIndex(sessionID - 1) then self.activeSessions.remove(sessionID - 1)
                reorderSessions = self.reorderSessions()
                if reorderSessions then return true
            end if
        end if
    end if
    return null
end function

// ------------------------------------------------------------------------------------------------------------

Proxima.sessions.getSessionValue = function (sessionID, sessionKey, getSaved = false)
    acquiredSession = self.getSession(sessionID, getSaved)
    if acquiredSession != null then
        if acquiredSession.hasIndex(sessionKey) then return acquiredSession[sessionKey]
    end if
    return null
end function

Proxima.sessions.setSessionValue = function (sessionID, sessionKey, sessionValue, setSaved = false)
    acquiredSession = self.getSession(sessionID, setSaved)
    if acquiredSession != null then
        if setSaved then
            setRecordValue = Proxima.db.setRecordValue("sessions", sessionID, sessionKey, sessionValue)
            if setRecordValue then return true
        else
            self.activeSessions[sessionID - 1][sessionKey] = sessionValue
            return true
        end if
    end if
    return null
end function

// ------------------------------------------------------------------------------------------------------------

Proxima.sessions.saveSession = function (sessionID) 
    activeSession = self.getSession(sessionID)
    if activeSession != null then
        tempID = activeSession.id
        tempDateCreated = activeSession.dateCreated
        activeSession.remove("id")
        activeSession.remove("dateCreated")
        recordOperation = null
        savedSession = self.getSession(activeSession.targetIP, true)
        if savedSession == null then recordOperation = Proxima.db.addRecord("sessions", activeSession)
        if savedSession != null then recordOperation = Proxima.db.updateRecord("sessions", savedSession.id, activeSession)
        if recordOperation then
            self.activeSessions[sessionID - 1] = {"id": tempID} + activeSession + {"dateCreated": tempDateCreated}
            return true
        end if
    end if
    return null
end function

Proxima.sessions.loadSession = function (sessionID) 
    savedSession = self.getSession(sessionID, true)
    if savedSession != null then
        activeSession = self.getSession(savedSession.targetIP)
        if activeSession == null then
            self.activeSessions.push(savedSession)
            reorderSessions = self.reorderSessions()
            if reorderSessions then
                newActiveSessionID = self.getSession(savedSession.targetIP).id
                setActiveSession = self.setSession(newActiveSessionID)
                if setActiveSession then return true
            end if
        end if
    end if
    return null
end function

// ------------------------------------------------------------------------------------------------------------

Proxima.sessions.addMapToSession = function (sessionID, targetList, givenMap)
    acquiredSession = self.getSession(sessionID)
    if acquiredSession != null then
        self.activeSessions[acquiredSession.id - 1][targetList].push(givenMap)
        return true
    end if
    return null
end function

// ------------------------------------------------------------------------------------------------------------

Proxima.sessions.isSessionLocal = function (sessionID, checkSaved = false)
    sessionType = self.getSessionValue(sessionID, "sessionType", checkSaved)    
    if sessionType == 0 then return true
    if sessionType == 1 then return false
end function

Proxima.sessions.isSessionRemote = function (sessionID, checkSaved = false)
    sessionType = self.getSessionValue(sessionID, "sessionType", checkSaved)    
    if sessionType == 1 then return true
    if sessionType == 0 then return false
end function

// ------------------------------------------------------------------------------------------------------------

Proxima.sessions.colorizeSessionType = function (sessionType)
    if sessionType == 0 then return "LOCAL#FC8403"
    if sessionType == 1 then return "REMOTE#FFC466"
end function

Proxima.sessions.displaySessions = function (displaySaved = false)
    header_list = ["ID", "TARGET_IP", "DATE_CREATED", "SESSION_TYPE"]
    content_list = []
    
    sessionList = self.getSessions(displaySaved)

    for targetSession in sessionList
        addColor = null
        if displaySaved == false then
            if self.targetSession == targetSession.id then addColor = "#08FF57"
        end if
        s_id = str(targetSession.id) + addColor
        s_target_ip = targetSession.targetIP + addColor
        s_date = targetSession.dateCreated + addColor
        s_type = self.colorizeSessionType(targetSession.sessionType)
        content_list.push([ s_id, s_target_ip, s_date, s_type ])
    end for

    Proxima.utils.formatList(header_list, content_list)
end function