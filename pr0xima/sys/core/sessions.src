Proxima.sessions = {}

Proxima.sessions.activeSession = null
Proxima.sessions.activeSessions = []

// ------------------------------------------------------------------------------------------------------------

Proxima.sessions.getSavedSessions = function ()
    savedSessions = []
    getSessionRecords = Proxima.db.getRecords("sessions")
    if getSessionRecords.len > 0 then
        for sessionRecord in getSessionRecords
            savedSessions.push(sessionRecord)
        end for
        return savedSessions
    end if
    return null
end function

Proxima.sessions.getSession = function (sessionKey, getSaved = false)
    sessionsList = self.activeSessions
    if getSaved then 
        getSavedSessions = self.getSavedSessions()
        if getSavedSessions != null then sessionsList = getSavedSessions
    end if
    
    acquiredSession = null
    
    if sessionsList.len > 0 then
        for targetSession in sessionsList
            checkKey = "id"
            if typeof(sessionKey) == "string" then checkKey = "targetIP"

            if targetSession[checkKey] == sessionKey then
                acquiredSession = targetSession
                break
            end if
        end for
    end if

    return acquiredSession
end function

Proxima.sessions.setActiveSession = function (sessionID)
    acquiredSession = self.getSession(sessionID)
    if acquiredSession != null then
        self.activeSession = acquiredSession.id
        return true
    end if
    return null
end function

Proxima.sessions.createSession = function (sessionType, targetIP, targetRouter)
    if self.getSession(targetIP) == null then
        sessionMap = {}

        sessionMap.id = self.activeSessions.len + 1

        sessionMap.targetIP = targetIP
        sessionMap.targetRouter = targetRouter

        sessionMap.targetLAN = null
        sessionMap.targetLANs = []

        if sessionType == 0 then
            sessionMap.targetLAN = targetIP
            sessionMap.targetLANs = [targetIP]
            sessionMap.targetLibraries = []
            sessionMap.sessionType = sessionType
        else if sessionType == 1 then
            sessionMap.targetPorts = []
            sessionMap.sessionType = sessionType
        end if

        sessionMap.targetExploits = []
        sessionMap.targetShells = []
        sessionMap.targetUsers = []
        sessionMap.targetMails = []
        sessionMap.targetBanks = []

        sessionMap.payloadInjection = true

        sessionMap.creationDate = current_date
        
        self.activeSessions.push(sessionMap)
        return sessionMap.id
    end if

    return null
end function

// ------------------------------------------------------------------------------------------------------------

Proxima.sessions.sortSessions = function (sessionsList, sortBy)
end function

Proxima.sessions.reorderSessions = function (sessionsList)
    idCounter = 1
    for acquiredSession in sessionsList
        if acquiredSession.id != idCounter then acquiredSession.id = idCounter
        idCounter = idCounter + 1
    end for
    return sessionsList
end function

Proxima.sessions.updateSavedSessions = function (sessionID, saveSingle = true)
    acquiredSession = self.getSession(sessionID)
    if acquiredSession != null then
        getSavedSession = self.getSession(acquiredSession.targetIP, true)
        if getSavedSession != null then
        else
        end if
    end if
end function

Proxima.sessions.resetSession = function (sessionID)
    acquiredSession = self.getSession(sessionID)

    if acquiredSession != null then
        //... 
        return true
    end if

    return null
end function

Proxima.sessions.searchSessions = function (sessionKey, sessionValue, searchSaved = false)
end function

Proxima.sessions.deleteSession = function (sessionID, deleteSaved = false)
end function

// ------------------------------------------------------------------------------------------------------------

Proxima.sessions.getSessionValue = function (sessionKey)
    acquiredSession = self.getSession(self.activeSession)
    if acquiredSession != null then return acquiredSession[sessionKey]
    return null
end function

Proxima.sessions.setSessionValue = function (sessionKey, sessionValue)
    acquiredSession = self.getSession(self.activeSession)
    if acquiredSession != null then
        self.activeSessions[acquiredSession.id - 1][sessionKey] = sessionValue
        return true
    end if
    return null
end function

Proxima.sessions.addToSession = function (targetList, givenMap)
    acquiredSession = self.getSession(self.activeSession)
    if acquiredSession != null then
        self.activeSessions[acquiredSession.id - 1][targetList].push(givenMap)
        return true
    end if
    return null
end function

// ------------------------------------------------------------------------------------------------------------

Proxima.sessions.loadSavedSession = function (sessionID) 
    acquiredSession = self.getSession(sessionID, true)
    if acquiredSession != null then
        self.activeSessions.push(acquiredSession)
        sortedSessions = self.sortSessions(self.activeSessions)
        reorderedSessions = self.reorderSessions(sortedSessions)
        if reorderedSessions != null then
            self.activeSessions = reorderedSessions
            return true
        end if
    end if
    return null
end function

// ------------------------------------------------------------------------------------------------------------

Proxima.sessions.isLocalSession = function ()
    sessionType = Proxima.sessions.getSessionValue("sessionType")    
    if sessionType == 0 then return true
    if sessionType == 1 then return false
end function

Proxima.sessions.isRemoteSession = function ()
    sessionType = Proxima.sessions.getSessionValue("sessionType")    
    if sessionType == 1 then return true
    if sessionType == 0 then return false
end function

// ------------------------------------------------------------------------------------------------------------

Proxima.sessions.colorizeSessionType = function (sessionType)
    if sessionType == 0 then return "LOCAL#FC8403"
    if sessionType == 1 then return "REMOTE#FFC466"
end function

Proxima.sessions.displaySessionInfo = function (displaySaved = false)
    header_list = ["ID", "TARGET_IP", "DATE_CREATED", "SESSION_TYPE"]
    content_list = []
    
    sessionList = self.activeSessions
    if displaySaved then sessionList = self.savedSessions

    for targetSession in sessionList
        addColor = null
        if displaySaved == false then
            if self.activeSession == targetSession.id then addColor = "#08FF57"
        end if
        s_id = str(targetSession.id) + addColor
        s_target_ip = targetSession.targetIP + addColor
        s_date = targetSession.creationDate + addColor
        s_type = self.colorizeSessionType(targetSession.sessionType)
        content_list.push([ s_id, s_target_ip, s_date, s_type ])
    end for

    Proxima.utils.formatList(header_list, content_list)
end function