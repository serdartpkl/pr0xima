Proxima.helpers = {}

// ------------------------------------------------------------------------------------------------------------

Proxima.helpers.removeDuplicates = function(inputList)
    uniqueItems = []
    for listItem in inputList
        if uniqueItems.indexOf(listItem) == null then
            uniqueItems.push(listItem)
        end if
    end for
    return uniqueItems
end function

Proxima.helpers.formatList = function (headerList, contentList, addPrefix = false)
    prefixIndent = ""
    if addPrefix then prefixIndent = "|   "

    maxLengths = []

    for headerName in headerList
        maxLength = headerName.len
        for contentRow in contentList
            if contentRow[headerList.indexOf(headerName)].split("#") != null then
                if contentRow[headerList.indexOf(headerName)].split("#")[0].len > maxLength then maxLength = contentRow[headerList.indexOf(headerName)].split("#")[0].len
            else
                if contentRow[headerList.indexOf(headerName)].len > maxLength then maxLength = row[headerList.indexOf(headerName)].len
            end if
        end for
        maxLengths.push(maxLength)
    end for

    padRight = function(givenString, givenLength, rowColor)
        stringPadding = " " * (givenLength - givenString.len)
        if rowColor != null then
            return Proxima.io.output.colorize(givenString + stringPadding, "#" + rowColor)
        else
            return givenString + stringPadding
        end if
    end function

    separatorCharacter = "+"
    headerRow = "|"
    for headerName in headerList
        headerID = headerList.indexOf(headerName)
        separatorCharacter = separatorCharacter + "-" * (maxLengths[headerID] + 2) + "+"
        headerRow = headerRow + " " + padRight(headerName, maxLengths[headerID], null) + " |"
    end for
    print(Proxima.io.addOutputEntry(prefixIndent + separatorCharacter))
    print(Proxima.io.addOutputEntry(prefixIndent + headerRow))
    print(Proxima.io.addOutputEntry(prefixIndent + separatorCharacter))

    for contentRow in contentList
        rowString = "|"
        for headerName in headerList
            headerID = headerList.indexOf(headerName)
            splitRow = contentRow[headerID].split("#")
            rowColor = null
            if splitRow.len > 1 then
                contentRow[headerID] = splitRow[0]
                rowColor = splitRow[1]
            end if
            rowString = rowString + " " + padRight(contentRow[headerID], maxLengths[headerID], rowColor) + " |"
        end for
        print(Proxima.io.addOutputEntry(prefixIndent + rowString))
        print(Proxima.io.addOutputEntry(prefixIndent + separatorCharacter))
    end for
end function

Proxima.helpers.indexesOf = function (givenList, searchKey, searchValue)
    foundedIndexes = []
    if givenList.len > 0 then
        for mapItem in givenList
            for mapKey in mapItem.indexes
                if mapKey == searchKey and mapItem[mapKey] == searchValue then
                    foundedIndexes.push(givenList.indexOf(mapItem))
                end if
            end for
        end for
    end if
    
    if foundedIndexes.len > 0 then
        if foundedIndexes.len == 1 then return foundedIndexes[0]
        return foundedIndexes
    end if

    return null
end function

Proxima.helpers.collectFiles = function (parentDir)
    allFiles = []

    scanDirectory = function (givenDirectory)
        getFile = Proxima.globals.myPC.File(givenDirectory)
        if getFile.is_folder then
            acquireFiles = getFile.get_files()
            if acquireFiles.len > 0 then
                for acquiredFile in acquireFiles
                    allFiles.push(acquiredFile.path)
                end for
            end if
            acquireFolders = getFile.get_folders()
            if acquireFolders.len > 0 then
                for acquiredFolder in acquireFolders 
                    scanDirectory(acquiredFolder.path)
                end for
            end if
        else
            allFiles.push(getFile.path)
        end if
    end function

    scanDirectory(parentDir)

    return allFiles
end function

Proxima.helpers.getParsedDate = function ()
    currentDate = current_date

    dateSegments = currentDate.split(" - ")

    dateSegment = dateSegments[0].split("/")
    timeSegment = dateSegments[1].split(":")

    daySegment = dateSegment[0]
    if daySegment.len == 1 then daySegment = "0" + str(daySegment)

    monthMap = {
        "Jan": "01",
        "Feb": "02",
        "Mar": "03",
        "Apr": "04",
        "May": "05",
        "Jun": "06",
        "Jul": "07",
        "Aug": "08",
        "Sep": "09",
        "Oct": "10",
        "Nov": "11",
        "Dec": "12",
    }
    monthSegment = monthMap[dateSegment[1]]
    
    yearSegment = dateSegment[2]
    hourSegment = timeSegment[0]
    minuteSegment = timeSegment[1]

    parsedDate = yearSegment + monthSegment + daySegment + hourSegment + minuteSegment
    return parsedDate
end function

Proxima.helpers.isProtectedNull = function (givenValue)
    if typeof(givenValue) == "list" and givenValue.hasIndex(0) and givenValue[0] == null then return true
end function

Proxima.helpers.generateRandomIP = function()
    firstByteRange = range(0, 255)
    firstByteRange.remove(192)
    firstByteRange.remove(191)
    firstByteRange.remove(0)
    firstByteRange.remove(10)
    firstByteRange.remove(172)
    firstByteRange.remove(128)
    firstByteRange.remove(223)

    restByteRange = range(0,255)
    
    generatedIP = []
    generatedIP.push(floor(rnd() * firstByteRange.len))
    for i in range(2)
        generatedIP.push(floor(rnd() * restByteRange.len))
    end for
    generatedIP = generatedIP.join(".")

    if is_valid_ip(generatedIP) and get_router(generatedIP) and get_shell.ping(generatedIP) then return generatedIP
    return self.generateRandomIP()
end function