Proxima.testing = {}

Proxima.testing.tests = {}

// ------------------------------------------------------------------------------------------------------------

describe = function (testSuiteName, fn)
    print(Proxima.io.addOutputEntry(Proxima.io.output.colorize("<b>/ START_TEST_SUITE</b>", "#FC8403")))
    print(Proxima.io.addOutputEntry(Proxima.io.output.colorize("<b>| TEST_SUITE [" + testSuiteName + "]</b>", "#FC8403")))
    fn()
    print(Proxima.io.addOutputEntry(Proxima.io.output.colorize("<b>\ END_TEST_SUITE</b>", "#FC8403")))
end function

it = function (testName, fn)
    print(Proxima.io.addOutputEntry(Proxima.io.output.colorize("<b>|-- TEST [" + testName + "]</b>", "#FFC466")))
    fn()
    print(Proxima.io.addOutputEntry(Proxima.io.output.colorize("<b>|-- END_TEST</b>", "#FFC466")))
end function

Matchers = {}
Matchers.actualValue = null

Matchers.init = function (actualValue)
    self.actualValue = actualValue
end function

Matchers.convertActualValue = function (actualValue, onlyNullCheck = false)
    convertedValue = actualValue

    if onlyNullCheck == false and actualValue == 1 then
        convertedValue = "TRUE"
    else onlyNullCheck == false and if actualValue == 0 then
        convertedValue = "FALSE"
    else if actualValue == null then
        convertedValue = "NULL"
    end if
    
    return convertedValue
end function

Matchers.printTestOutput = function (testResult, actualValue, expectedValue, isNot = false)
    if testResult then
        print(Proxima.io.addOutputEntry(Proxima.io.output.colorize("<b>|---- TEST_RESULT: PASSED</b>", "#08FF57")))
    else
        print(Proxima.io.addOutputEntry(Proxima.io.output.colorize("<b>|---- TEST_RESULT: FAILED</b>", "#FF1548")))
    end if

    notPrefix = ""
    if isNot then notPrefix = "NOT_"

    print(Proxima.io.addOutputEntry("|     |-- ACTUAL_VALUE: " + actualValue))
    print(Proxima.io.addOutputEntry("|     |-- " + notPrefix + "EXPECTED_VALUE: " + expectedValue))

    if testResult then
        print(Proxima.io.addOutputEntry(Proxima.io.output.colorize("<b>|---- END_TEST_RESULT</b>", "#08FF57")))
    else
        print(Proxima.io.addOutputEntry(Proxima.io.output.colorize("<b>|---- END_TEST_RESULT</b>", "#FF1548")))
    end if
end function

Matchers.toBe = function (expectedValue)
    testResult = false
    if expectedValue == self.actualValue and typeof(expectedValue) == typeof(self.actualValue) then testResult = true

    self.printTestOutput(testResult, self.convertActualValue(self.actualValue, true), expectedValue)
end function

Matchers.notToBe = function (notExpectedValue)
    testResult = false
    if notExpectedValue != self.actualValue or typeof(notExpectedValue) != typeof(self.actualValue) then testResult = true

    self.printTestOutput(testResult, self.convertActualValue(self.actualValue, true), notExpectedValue, true)
end function

Matchers.toBeNull = function (expectedValue)
    testResult = false
    if self.actualValue == null then testResult = true
    
    self.printTestOutput(testResult, self.convertActualValue(self.actualValue, true), "NULL")
end function

Matchers.notToBeNull = function (expectedValue)
    testResult = false
    if self.actualValue != null then testResult = true
    
    self.printTestOutput(testResult, self.convertActualValue(self.actualValue, true), "NULL", true)
end function

Matchers.toBeTruthy = function ()
    testResult = false    
    if self.actualValue == true then testResult = true

    self.printTestOutput(testResult, self.convertActualValue(self.actualValue), "TRUE")
end function

Matchers.notToBeTruthy = function ()
    testResult = false
    if self.actualValue != true then testResult = true

    self.printTestOutput(testResult, self.convertActualValue(self.actualValue), "TRUE", true)
end function

Matchers.toBeFalsy = function ()
    testResult = false
    if self.actualValue == false then testResult = true

    self.printTestOutput(testResult, self.convertActualValue(self.actualValue), "FALSE")
end function

Matchers.notToBeFalsy = function ()
    testResult = false
    if self.actualValue != false then testResult = true

    self.printTestOutput(testResult, self.convertActualValue(self.actualValue), "FALSE", true)
end function

expect = function (actualValue)
    createMatchers = new Matchers
    createMatchers.init(actualValue)
    return createMatchers
end function

// ------------------------------------------------------------------------------------------------------------

Proxima.testing.runTest = function (testName) 
    if Proxima.testing.tests.hasIndex(testName) then Proxima.testing.tests[testName]()
    return null
end function

Proxima.testing.runTests = function ()
    for acquiredTest in self.tests.indexes
        self.runTest(acquiredTest)
    end for
end function