Proxima.apt = {}

// ------------------------------------------------------------------------------------------------------------

Proxima.apt.checkSourcesFile = function ()
    getSourcesFile = Proxima.globals.myPC.File("/etc/apt/sources.txt")
    return getSourcesFile
end function

Proxima.apt.getRepositories = function (sourcesFile)
    repositoryIPs = []
    deserializedSource = Proxima.utils.deserializeMap(sourcesFile.get_content)
    if deserializedSource.sourceList.len > 0 then
        for repositoryIP in deserializedSource.sourceList.indexes
            repositoryIPs.push(repositoryIP)
        end for
    end if
    return repositoryIPs
end function

Proxima.apt.checkRepository = function (repositoryIP)
    if self.getRepositories(self.checkSourcesFile).indexOf(repositoryIP) != null then return true
    return null
end function

Proxima.apt.addRepository = function (repositoryIP)
    if self.checkRepository(repositoryIP) == null then
        addRepo = Proxima.globals.aptclient.add_repo(repositoryIP)
        Proxima.io.clearScreen()
        wait(0.35)
        if addRepo == "" then return true
    end if
    return null
end function

Proxima.apt.deleteRepository = function (repositoryIP)
    if self.checkRepository(repositoryIP) then
        delRepo = Proxima.globals.aptclient.del_repo(repositoryIP)
        Proxima.io.clearScreen()
        wait(0.35)
        if delRepo == "" then return true
    end if
    return null
end function

Proxima.apt.getPackageList = function (repositoryIP)
    if self.checkRepository(repositoryIP) then
        repositoryPackages = Proxima.globals.aptclient.show(repositoryIP)
        packageList = repositoryPackages.split(char(10) + char(10))
        packageList.pop()
        packageList.pop()
        parsedList = []
        for packageItem in packageList
            itemEntry = packageItem.split(char(10))
            packageName = itemEntry[0]
            packageName = packageName.replace("<b>", "")
            packageName = packageName.replace("</b>", "")
            parsedList.push(packageName)
        end for
        return parsedList
    end if
    return null
end function

Proxima.apt.updateRepositoryInformation = function ()
    updateRepoInfo = Proxima.globals.aptclient.update()
    Proxima.io.clearScreen()
    wait(0.35)
    if updateRepoInfo == "" then return true
    return null
end function

Proxima.apt.isValidShop = function (repositoryIP)
    isValidShop = false

    repoPorts = []
    if is_valid_ip(repositoryIP) then
        getRepoPorts = get_router(repositoryIP).used_ports
        if getRepoPorts.len > 0 then repoPorts = getRepoPorts
    end if

    repoServices = []
    if repoPorts.len > 0 then
        for repoPort in repoPorts 
            serviceName = get_router(repositoryIP).port_info(repoPort).split(" ")[0]
            if is_closed(repoPort) != true then repoServices.push(serviceName)
        end for
    end if

    if repoServices.indexOf("repository") != null then
        if self.addRepository(repositoryIP) then 
            if self.updateRepositoryInformation() then
                repoPackageList = self.getPackageList(repositoryIP)
                if repoPackageList != null and repoPackageList.indexOf("metaxploit.so") != null and repoPackageList.indexOf("crypto.so") != null then isValidShop = true
            end if
        end if
    end if

    if self.deleteRepository(repositoryIP) and isValidShop then return repositoryIP
    return null
end function

Proxima.apt.findShop = function ()
    shopIP = null
    
    generateRandomIP = function()
        firstByteRange = range(0, 255)
        firstByteRange.remove(192)
        firstByteRange.remove(191)
        firstByteRange.remove(0)
        firstByteRange.remove(10)
        firstByteRange.remove(172)
        firstByteRange.remove(128)
        firstByteRange.remove(223)

        restByteRange = range(0,255)
        
        generatedIP = []
        generatedIP.push(floor(rnd() * firstByteRange.len))
        for i in range(2)
            generatedIP.push(floor(rnd() * restByteRange.len))
        end for
        generatedIP = generatedIP.join(".")

        if is_valid_ip(generatedIP) and get_router(generatedIP) and get_shell.ping(generatedIP) then return generatedIP
        return generateRandomIP
    end function

    while shopIP == null
        generatedIP = generateRandomIP()
        isValidShop = self.isValidShop(generatedIP)
        if typeof(isValidShop) == "string" then shopIP = generatedIP
    end while

    if shopIP != null then return shopIP
    return null
end function

Proxima.apt.checkForUpdates = function ()
    pendingForUpdate = []
    libraryFiles = Proxima.utils.collectFiles("/lib")
    for acquiredFile in libraryFiles
        isUpdateAvailable = Proxima.globals.aptclient.check_upgrade(acquiredFile)
        Proxima.io.clearScreen()
        wait(0.35)
        if isUpdateAvailable then
            libraryName = acquiredFile.split("/")[-1]
            pendingForUpdate.push(libraryName)
        end if
    end for
    if pendingForUpdate.len > 0 then
        return pendingForUpdate
    else
        return false
    end if
end function

Proxima.apt.updateLibraries = function (pendingList)
    statusMap = { "succeed": [], "failed": [] }
    for pendingLibrary in pendingList
        updateLibrary = Proxima.globals.aptclient.install(pendingLibrary)
        Proxima.io.clearScreen()
        wait(0.35)
        if updateLibrary == 1 then
            statusMap.succeed.push(pendingLibrary)
        else
            statusMap.failed.push(pendingLibrary)
        end if
    end for
    return statusMap
end function