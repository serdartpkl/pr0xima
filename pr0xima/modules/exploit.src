Proxima.exploit = {}

// ------------------------------------------------------------------------------------------------------------

Proxima.exploit.isLocal = function ()
    sessionType = Proxima.sessions.getSessionValue("sessionType")    
    if sessionType == 0 then
        return true
    else if sessionType == 1 then
        return false
    end if
end function

Proxima.exploit.parseScanEntries = function (scanResult, libraryDump, targetObject)
    totalExploits = 0
    for entry in scanResult
        scanAddress = scan_address(Proxima.globals.metaxploit, libraryDump, entry)
        segments = split(scanAddress, "Unsafe check: ")[1:]
        exploits = []

        for segment in segments
            labelStart = indexOf(segment, "<b>")
            labelEnd = indexOf(segment, "</b>")
            push(exploits, segment[labelStart + 3: labelEnd])
        end for

        for exploit in exploits
            exploitID = Proxima.sessions.getSessionValue("targetExploits").len + 1
            if self.isLocal() then
                Proxima.sessions.pushMap("targetExploits", { "id": exploitID, "lib_name": libraryDump.lib_name, "version": libraryDump.version, "path": targetObject.path, "memAddr": entry, "unsecZone": exploit, "result": 5 })
            else
                Proxima.sessions.pushMap("targetExploits", { "id": exploitID, "port_number": targetObject.port_number, "memAddr": entry, "unsecZone": exploit, "result": 5 })
            end if
            totalExploits = totalExploits + 1
        end for
    end for
    return totalExploits
end function

// ------------------------------------------------------------------------------------------------------------

Proxima.exploit.setExploitResult = function (exploitID, resultType)
    targetExploits = Proxima.sessions.getSessionValue("targetExploits")
    if targetExploits.len > 0 then
        if exploitID != null and targetExploits.hasIndex(exploitID - 1) then
            targetExploits[exploitID - 1].result = resultType
            Proxima.sessions.setSessionValue("targetExploits", targetExploits)
        end if
    end if
end function

Proxima.exploit.reorderShells = function ()
    reorderedShells = Proxima.sessions.getSessionValue("targetShells").sort("privilege_level")
    shellID = 1
    for targetShell in reorderedShells
        if targetShell.id != shellID then targetShell.id = shellID
        shellID = shellID + 1
    end for
    Proxima.sessions.setSessionValue("targetShells", reorderedShells)
end function

Proxima.exploit.addShellConnection = function (shellObject, shellOwner)
    targetShells = Proxima.sessions.getSessionValue("targetShells")
    duplicateShell = Proxima.utils.indexesOf(targetShells, "owner", shellOwner)
    if duplicateShell then
        return false
    else
        shellID = targetShells.len + 1
        Proxima.sessions.pushMap("targetShells", { "id": shellID, "shell_object": shellObject, "owner": shellOwner, "privilege_level": self.getPrivilegeLevel(shellOwner), "public_ip": shellObject.host_computer.public_ip, "local_ip": shellObject.host_computer.local_ip})
        if targetShells.len > 1 then
            self.reorderShells()
        end if
        return true
    end if
end function

Proxima.exploit.handleShell = function (attackResult, exploitID, output)
    targetComputer = attackResult.host_computer
    acquiredUser = self.acquireUser(targetComputer)
    if output then print(Proxima.io.addOutputEntry(Proxima.io.output.success("Shell access granted via user: <b>" + acquiredUser + "</b>! Updating the shell list...")))

    addShell = self.addShellConnection(attackResult, acquiredUser)
    if addShell then
        if output then print(Proxima.io.addOutputEntry(Proxima.io.output.info("Updated the target shells list!")))
    else
        if output then print(Proxima.io.addOutputEntry(Proxima.io.output.warning("This shell connection is already in the target shells list. Skipping...")))
    end if
    self.setExploitResult(exploitID, 0)

    targetUsers = Proxima.sessions.getSessionValue("targetUsers")
    if targetUsers.len > 0 and Proxima.utils.indexesOf(targetUsers, "password", "UNKNOWN") != true then
        if output then print(Proxima.io.addOutputEntry(Proxima.io.output.info("Skipping password search, we already accessed account informations...")))
    else
        homeFolder = targetComputer.File("/home")
        hasAccessedPasswd = false
        if acquiredUser != "guest" then
            if output then print(Proxima.io.addOutputEntry(Proxima.io.output.info("Trying to access /etc/passwd file...")))
            passwdFile = targetComputer.File("/etc/passwd")
            accessPasswdFile = self.accessPasswdFile(passwdFile)
            if accessPasswdFile then
                if output then print(Proxima.io.addOutputEntry(Proxima.io.output.success("Accessed the /etc/passwd file!")))
                if output then print(Proxima.io.addOutputEntry(Proxima.io.output.info("Updated the target users list!")))
                if output then print(Proxima.io.addOutputEntry(Proxima.io.output.progress("Accessing all mail and bank informations...")))
                mailInfo = self.getMailInfo(homeFolder)
                bankInfo = self.getBankInfo(homeFolder)
                if bankInfo and mailInfo then
                    if output then print(Proxima.io.addOutputEntry(Proxima.io.output.success("Accessed and updated mail and bank informations! Updating lists...")))
                else
                    if output then print(Proxima.io.addOutputEntry(Proxima.io.output.error("Couldn't access mail and bank informations!é")))
                end if
                Proxima.sessions.setSessionValue("payloadInjection", false)
                if output then print(Proxima.io.addOutputEntry(Proxima.io.output.info("Disabled password injection method to prevent future conflicts...")))
                hasAccessedPasswd = true
            end if
        end if
        if hasAccessedPasswd == false then
            if output then print(Proxima.io.addOutputEntry(Proxima.io.output.warning("Coulnd't access /etc/passwd file, you have to gain root access with a different method.")))
            self.getUsers(homeFolder)
            targetUsers = Proxima.sessions.getSessionValue("targetUsers")
            if targetUsers.len > 0 then
                if output then print(Proxima.io.addOutputEntry(Proxima.io.output.success("Accessed user names! Updating list...")))
                if output then print(Proxima.io.addOutputEntry(Proxima.io.output.info("If there is a payload injection, you can try to brute with available information.")))
            else
                if output then print(Proxima.io.addOutputEntry(Proxima.io.output.error("Couldn't access user names, you can try another method...")))
            end if
        end if
    end if
end function

Proxima.exploit.handleComputer = function (attackResult, exploitID, output)
    acquiredUser = self.acquireUser(attackResult)
    if output then print(Proxima.io.addOutputEntry(Proxima.io.output.success("Computer access granted via user: <b>" + acquiredUser + "</b>!")))
    targetUsers = Proxima.sessions.getSessionValue("targetUsers")
    if targetUsers.len > 0 and Proxima.utils.indexesOf(targetUsers, "password", "UNKNOWN") == false then
        if output then print(Proxima.io.addOutputEntry(Proxima.io.output.info("Skipping password search, we already accessed account informations...")))
    else
        homeFolder = attackResult.File("/home")
        hasAccessedPasswd = false
        if acquiredUser != "guest" then
            if output then print(Proxima.io.addOutputEntry(Proxima.io.output.info("Trying to access /etc/passwd file...")))
            passwdFile = attackResult.File("/etc/passwd")
            accessPasswdFile = self.accessPasswdFile(passwdFile)
            if accessPasswdFile then
                if output then print(Proxima.io.addOutputEntry(Proxima.io.output.success("Accessed the /etc/passwd file!")))
                if output then print(Proxima.io.addOutputEntry(Proxima.io.output.info("Updated the target users list!")))
                if output then print(Proxima.io.addOutputEntry(Proxima.io.output.progress("Accessing all mail and bank informations...")))
                mailInfo = self.getMailInfo(homeFolder)
                bankInfo = self.getBankInfo(homeFolder)
                if bankInfo and mailInfo then
                    if output then print(Proxima.io.addOutputEntry(Proxima.io.output.success("Accessed and updated mail and bank informations! Updating lists...")))
                else
                    if output then print(Proxima.io.addOutputEntry(Proxima.io.output.error("Couldn't access mail and bank informations!é")))
                end if
                Proxima.sessions.setSessionValue("payloadInjection", false)
                if output then print(Proxima.io.addOutputEntry(Proxima.io.output.info("Disabled password injection method to prevent future conflicts...")))
                hasAccessedPasswd = true
            end if
        end if
        if hasAccessedPasswd == false then
            if output then print(Proxima.io.addOutputEntry(Proxima.io.output.warning("Coulnd't access /etc/passwd file, you have to gain root access with a different method.")))
            self.getUsers(homeFolder)
            targetUsers = Proxima.sessions.getSessionValue("targetUsers")
            if targetUsers.len > 0 then
                if output then print(Proxima.io.addOutputEntry(Proxima.io.output.success("Accessed user names! Updating list...")))
                if output then print(Proxima.io.addOutputEntry(Proxima.io.output.info("If there is a payload injection, you can try to brute with available information.")))
            else
                if output then print(Proxima.io.addOutputEntry(Proxima.io.output.error("Couldn't access user names, you can try another method...")))
            end if
        end if
    end if
    self.setExploitResult(exploitID, 1)
end function

Proxima.exploit.handleFile = function (attackResult, exploitID, output)
    acquiredUser = self.reachFileOwner(attackResult)
    if output then print(Proxima.io.addOutputEntry(Proxima.io.output.success("File access granted via user: <b>" + acquiredUser + "</b>!")))
    targetUsers = Proxima.sessions.getSessionValue("targetUsers")
    if targetUsers.len > 0 and Proxima.utils.indexesOf(targetUsers, "password", "UNKNOWN") == false then
        if output then print(Proxima.io.addOutputEntry(Proxima.io.output.info("Skipping password search, we already accessed account informations...")))
    else
        homeFolder = self.reachHomeDirectory(attackResult)
        hasAccessedPasswd = false
        if acquiredUser != "guest" then
            if output then print(Proxima.io.addOutputEntry(Proxima.io.output.progress("Acquired file, trying to access /etc/passwd file...")))
            passwdFile = self.reachPasswdFile(attackResult)
            accessPasswdFile = self.accessPasswdFile(passwdFile)
            if accessPasswdFile then
                if output then print(Proxima.io.addOutputEntry(Proxima.io.output.success("Accessed the /etc/passwd file!")))
                if output then print(Proxima.io.addOutputEntry(Proxima.io.output.info("Updated the target users list!")))
                if output then print(Proxima.io.addOutputEntry(Proxima.io.output.progress("Accessing all mail and bank informations...")))
                mailInfo = self.getMailInfo(homeFolder)
                bankInfo = self.getBankInfo(homeFolder)
                if bankInfo and mailInfo then
                    if output then print(Proxima.io.addOutputEntry(Proxima.io.output.success("Accessed and updated mail and bank informations! Updating lists...")))
                else
                    if output then print(Proxima.io.addOutputEntry(Proxima.io.output.error("Couldn't access mail and bank informations!é")))
                end if
                Proxima.sessions.setSessionValue("payloadInjection", false)
                if output then print(Proxima.io.addOutputEntry(Proxima.io.output.info("Disabled password injection method to prevent future conflicts...")))
                hasAccessedPasswd = true
            end if
        end if
        if hasAccessedPasswd == false then
            if output then print(Proxima.io.addOutputEntry(Proxima.io.output.warning("Coulnd't access /etc/passwd file, you have to gain root access with a different method.")))
            self.getUsers(homeFolder)
            targetUsers = Proxima.sessions.getSessionValue("targetUsers")
            if targetUsers.len > 0 then
                if output then print(Proxima.io.addOutputEntry(Proxima.io.output.success("Accessed user names! Updating list...")))
                if output then print(Proxima.io.addOutputEntry(Proxima.io.output.info("If there is a payload injection, you can try to brute with available information.")))
            else
                if output then print(Proxima.io.addOutputEntry(Proxima.io.output.error("Couldn't access user names, you can try another method...")))
            end if
        end if
    end if
    self.setExploitResult(exploitID, 2)
end function

Proxima.exploit.handlePayload = function (attackResult, exploitID, output)
    payloadInjection = Proxima.sessions.getSessionValue("payloadInjection")
    if payloadInjection then
        if attackResult == 1 then
            if output then print(Proxima.io.addOutputEntry(Proxima.io.output.success("Payload successfuly worked, injection completed! <b>[PASSWORD:" + Proxima.engine.getSettings().injection_password + "]</b>")))
        else if attackResult == 0 or attackResult == null then
            if output then print(Proxima.io.addOutputEntry(Proxima.io.output.error("Payload didn't work correctly! Failed to inject password...")))
        end if
    else
        if output then print(Proxima.io.addOutputEntry(Proxima.io.output.error("Payload injection option is disabled! Didn't inject password...")))
    end if
    self.setExploitResult(exploitID, 3)
end function

Proxima.exploit.handleFailedAttempt = function (attackResult, exploitID, output)
    self.setExploitResult(exploitID, 4)
    if output then print(Proxima.io.addOutputEntry(Proxima.io.output.error("Exploit did not work correctly, please try another one if it has any.")))
end function

Proxima.exploit.handleAttackResult = function (attackResult, exploitID, output)
    if typeof(attackResult) == "shell" then
        self.handleShell(attackResult, exploitID, output)
    else if typeof(attackResult) == "computer" then
        self.handleComputer(attackResult, exploitID, output)
    else if typeof(attackResult) == "file" then
        self.handleFile(attackResult, exploitID, output)
    else if typeof(attackResult) == "number" then
        self.handlePayload(attackResult, exploitID, output)
    else
        self.handleFailedAttempt(attackResult, exploitID, output)
    end if
end function

Proxima.exploit.execute = function (exploitID, output = true)
    targetIP = Proxima.sessions.getSessionValue("targetIP")
    targetExploits = Proxima.sessions.getSessionValue("targetExploits")
    if targetExploits.len == 0 then
        if output then print(Proxima.io.addOutputEntry(Proxima.io.output.error("No exploits available, please make a scan first.")))
    else if exploitID != null and targetExploits.hasIndex(exploitID - 1) then
        targetExploit = targetExploits[exploitID - 1]
        libraryDump = null
        if output then print(Proxima.io.addOutputEntry(Proxima.io.output.info("Launching exploit... <b>[ID:" + targetExploit.id + "]</b>")))
        if self.isLocal() then
            if output then print(Proxima.io.addOutputEntry(Proxima.io.output.progress("Trying to exploit <b>" + targetExploit.lib_name + "</b> library.")))
            libraryDump = Proxima.globals.metaxploit.load(targetExploit.path)
        else
            if output then print(Proxima.io.addOutputEntry(Proxima.io.output.progress("Trying to connect <b>" + targetIP + "</b> on port <b>" + targetExploit.port_number + "</b>.")))
            netSession = Proxima.globals.metaxploit.net_use(targetIP, targetExploit.port_number)
            if netSession != null then
                if output then print(Proxima.io.addOutputEntry(Proxima.io.output.success("Connection established!")))
                libraryDump = netSession.dump_lib
                if output then print(Proxima.io.addOutputEntry(Proxima.io.output.progress("Attempting to exploit <b>" + libraryDump.lib_name + "</b> at port <b>" + targetExploit.port_number + "</b>.")))
            else
                if output then print(Proxima.io.addOutputEntry(Proxima.io.output.error("Unable to connect to port <b>" + targetExploit.port_number + "</b>, it has firewall protection.")))
            end if
        end if
        if output then print(Proxima.io.addOutputEntry(Proxima.io.output.progress("Injecting values into the library... <b>[MEM_ADDR:" + targetExploit.memAddr + "|UNSEC_ZONE:" + targetExploit.unsecZone + "]</b>")))
        attackResult = null
        payloadInjection = Proxima.sessions.getSessionValue("payloadInjection")
        if payloadInjection then
            attackResult = libraryDump.overflow(targetExploit.memAddr, targetExploit.unsecZone, Proxima.engine.getSettings().injection_password)
        else
            attackResult = libraryDump.overflow(targetExploit.memAddr, targetExploit.unsecZone)
        end if
        Proxima.io.clearScreen()
        wait(0.5)
        self.handleAttackResult(attackResult, exploitID, output)
    else
        if output then print(Proxima.io.addOutputEntry(Proxima.io.output.error("No exploit found with specified ID. <b>[ID:" + exploitID + "]</b>")))
    end if
end function

Proxima.exploit.autoExecute = function ()
    targetExploits = Proxima.sessions.getSessionValue("targetExploits")
    if targetExploits.len == 0 then
        print(Proxima.io.addOutputEntry(Proxima.io.output.error("No exploits available, please make a scan first.")))
    else
        print(Proxima.io.addOutputEntry(Proxima.io.output.progress("Launching all exploits...")))
        for targetExploit in targetExploits
            self.execute(targetExploit.id, false)
        end for
        print(Proxima.io.addOutputEntry(Proxima.io.output.success("Execution process completed!")))
    end if
end function

// ------------------------------------------------------------------------------------------------------------

Proxima.exploit.colorizeExploitResult = function (exploitResult)
    if exploitResult == 0 then
        return "SHELL#9370DB"
    else if exploitResult == 1 then
        return "COMPUTER#08FF57"
    else if exploitResult == 2 then
        return "FILE#00FFBB"
    else if exploitResult == 3 then
        return "PAYLOAD#FFDD00"
    else if exploitResult == 4 then
        return "FAILED#FF1548"
    else
        return "UNKNOWN#0091FF"
    end if
end function

Proxima.exploit.displayExploitInfo = function ()
    header_list = []
    if self.isLocal() then
        header_list = ["ID", "LIBRARY_NAME", "MEM_ADDRESS", "UNSEC_ZONE", "RESULT"]
    else
        header_list = ["ID", "PORT", "MEM_ADDRESS", "UNSEC_ZONE", "RESULT"]
    end if

    content_list = []
    targetExploits = Proxima.sessions.getSessionValue("targetExploits")
    for targetExploit in targetExploits
        e_id = str(targetExploit.id)
        e_mem = targetExploit.memAddr
        e_uz = targetExploit.unsecZone
        e_result = self.colorizeExploitResult(targetExploit.result)
        if self.isLocal() then
            e_name = targetExploit.lib_name
            content_list.push([ e_id, e_name, e_mem, e_uz, e_result ])
        else
            e_port_number = str(targetExploit.port_number)
            content_list.push([ e_id, e_port_number, e_mem, e_uz, e_result ])
        end if
    end for

    Proxima.utils.formatList(header_list, content_list)
end function

Proxima.exploit.displayShellInfo = function ()
    header_list = ["ID", "OWNER", "PRIVILEGE", "PUBLIC_IP", "LOCAL_IP"]
    content_list = []
    targetShells = Proxima.sessions.getSessionValue("targetShells")
    for targetShell in targetShells
        s_id = str(targetShell.id)
        s_owner = targetShell.owner
        s_privilege_level = self.colorizePrivilegeLevel(targetShell.privilege_level)
        s_public_ip = targetShell.public_ip
        s_local_ip = targetShell.local_ip
        content_list.push([ s_id, s_owner, s_privilege_level, s_public_ip, s_local_ip ])
    end for

    Proxima.utils.formatList(header_list, content_list)
end function

Proxima.exploit.analyzeExploitResults = function ()
    analyzeResult = []

    targetSession = Proxima.sessions.getSession(Proxima.sessions.getSessionValue("id"))

    targetExploits = targetSession.targetExploits
    targetShells = targetSession.targetShells
    targetUsers = targetSession.targetUsers
    targetMails = targetSession.targetMails
    targetBanks = targetSession.targetBanks

    isRshellAvailable = false
    if targetShells.len > 0 then isRshellAvailable = true

    hasRootShell = false
    hasUserShell = false
    hasGuestShell = false
    if targetShells.len > 0 and Proxima.utils.indexesOf(targetShells, "owner", "root") then hasRootShell = true
    if targetShells.len > 0 and Proxima.utils.indexesOf(targetShells, "privilege_level", 1) then hasUserShell = true
    if targetShells.len > 0 and Proxima.utils.indexesOf(targetShells, "owner", "guest") then hasGuestShell = true

    hasUsernames = false
    if targetUsers.len > 0 then hasUsernames = true

    hasPasswords = false
    if targetUsers.len > 0 and Proxima.utils.indexesOf(targetUsers, "password", "UNKNOWN") == false then hasPasswords = true

    hasMails = false
    hasBanks = false
    if targetMails.len > 0 then hasMails = true
    if targetBanks.len > 0 then hasBanks = true

    isJumpAvailable = 0
    if targetShells.len > 0 and targetUsers.len > 0 and Proxima.utils.indexesOf(targetUsers, "password", "UNKNOWN") == false then isJumpAvailable = 1
    if targetShells.len > 0 and targetUsers.len > 0 and Proxima.utils.indexesOf(targetUsers, "password", "UNKNOWN") and Proxima.utils.indexesOf(targetExploits, "result", 3) then isJumpAvailable = 2

    isTunnelAvailable = 0
    if self.isSSHAvailable() and targetUsers.len > 0 and Proxima.utils.indexesOf(targetUsers, "password", "UNKNOWN") == false then isTunnelAvailable = 1
    if self.isSSHAvailable() and targetUsers.len > 0 and Proxima.utils.indexesOf(targetUsers, "password", "UNKNOWN") and Proxima.utils.indexesOf(targetExploits, "result", 3) then isTunnelAvailable = 2

    shellNum = 0
    compNum = 0
    fileNum = 0
    payloadNum = 0
    failedNum = 0
    unknownNum = 0

    if targetExploits.len > 0 then
        for targetExploit in targetExploits
            if targetExploit.result == 0 then
                shellNum = shellNum + 1
            else if targetExploit.result == 1 then
                compNum = compNum + 1
            else if targetExploit.result == 2 then
                fileNum = fileNum + 1
            else if targetExploit.result == 3 then
                payloadNum = payloadNum + 1
            else if targetExploit.result == 4 then
                failedNum = failedNum + 1
            else if targetExploit.result == 5 then
                unknownNum = unknownNum + 1
            end if
        end for
    end if

    analyzeResult.push(shellNum)
    analyzeResult.push(compNum)
    analyzeResult.push(fileNum)
    analyzeResult.push(payloadNum)
    analyzeResult.push(failedNum)
    analyzeResult.push(unknownNum)

    if hasRootShell == true then analyzeResult.push("<color=#00FF00>" + char(164) + "</color>")
    if hasRootShell == false then analyzeResult.push("<color=#FF0000>" + char(164) + "</color>")

    if hasUserShell == true then analyzeResult.push("<color=#00FF00>" + char(164) + "</color>")
    if hasUserShell == false then analyzeResult.push("<color=#FF0000>" + char(164) + "</color>")

    if hasGuestShell == true then analyzeResult.push("<color=#00FF00>" + char(164) + "</color>")
    if hasGuestShell == false then analyzeResult.push("<color=#FF0000>" + char(164) + "</color>")

    if hasUsernames == true then analyzeResult.push("<color=#00FF00>" + char(164) + "</color>")
    if hasUsernames == false then analyzeResult.push("<color=#FF0000>" + char(164) + "</color>")

    if hasPasswords == true then analyzeResult.push("<color=#00FF00>" + char(164) + "</color>")
    if hasPasswords == false then analyzeResult.push("<color=#FF0000>" + char(164) + "</color>")

    if hasMails == true then analyzeResult.push("<color=#00FF00>" + char(164) + "</color>")
    if hasMails == false then analyzeResult.push("<color=#FF0000>" + char(164) + "</color>")

    if hasBanks == true then analyzeResult.push("<color=#00FF00>" + char(164) + "</color>")
    if hasBanks == false then analyzeResult.push("<color=#FF0000>" + char(164) + "</color>")

    if isJumpAvailable == 0 then
        analyzeResult.push("<color=#FF0000>" + char(164) + "</color>")
        analyzeResult.push("<color=#FF0000>" + char(164) + "</color>")
    else if isJumpAvailable == 1 then
        analyzeResult.push("<color=#00FF00>" + char(164) + "</color>")
        analyzeResult.push("<color=#FF0000>" + char(164) + "</color>")
    else if isJumpAvailable == 2 then
        analyzeResult.push("<color=#FF0000>" + char(164) + "</color>")
        analyzeResult.push("<color=#00FF00>" + char(164) + "</color>")
    end if

    if isTunnelAvailable == 0 then
        analyzeResult.push("<color=#FF0000>" + char(164) + "</color>")
        analyzeResult.push("<color=#FF0000>" + char(164) + "</color>")
    else if isTunnelAvailable == 1 then
        analyzeResult.push("<color=#00FF00>" + char(164) + "</color>")
        analyzeResult.push("<color=#FF0000>" + char(164) + "</color>")
    else if isTunnelAvailable == 2 then
        analyzeResult.push("<color=#FF0000>" + char(164) + "</color>")
        analyzeResult.push("<color=#00FF00>" + char(164) + "</color>")
    end if

    if isRshellAvailable == true then analyzeResult.push("<color=#00FF00>" + char(164) + "</color>")
    if isRshellAvailable == false then analyzeResult.push("<color=#FF0000>" + char(164) + "</color>")

    return analyzeResult
end function

Proxima.exploit.generateAnalyzeReport = function (analyzeResult)
    asciiTemplate = []

    asciiTemplate = asciiTemplate + ["/ START_ANALYZE"]
    exploitResults = [
        "|-- AVAILABLE_EXPLOITS",
        "|  |-- SHELL: <val0>",
        "|  |-- COMPUTER: <val1>",
        "|  |-- FILE: <val2>",
        "|  |-- PAYLOAD: <val3>",
        "|  |-- FAILED: <val4>",
        "|  |-- UNKNOWN: <val5>",
        "|-- SHELL_ACCESS",
        "|  |-- ROOT <val6>",
        "|  |-- USER <val7>",
        "|  |-- GUEST <val8>",
        "|-- USER_INFO",
        "|  |-- USERNAMES <val9>",
        "|  |-- PASSWORDS <val10>",
        "|  |-- MAILS <val11>",
        "|  |-- BANKS <val12>",
    ]
    asciiTemplate = asciiTemplate + exploitResults

    remoteResults = [
        "|---- JUMP",
        "|     |-- DIRECT_ACCESS <val13>",
        "|     |-- BRUTE_FORCE <val14>",
        "|---- TUNNEL",
        "|     |-- DIRECT_ACCESS <val15>",
        "|     |-- BRUTE_FORCE <val16>",   
    ]
    localResults = [
        "|---- SUDO",
        "|     |-- DIRECT_ACCESS <val13>",
        "|     |-- BRUTE_FORCE <val14>"
    ]

    asciiTemplate = asciiTemplate + ["|---- RSHELL <val17>"]
    asciiTemplate = asciiTemplate + ["\ END_ANALYZE"]

    for line in asciiTemplate
        for i in range(0, analyzeResult.len - 1)
            placeholderTag = "<val" + str(i) + ">"
            valueTag = line.split(" ")[-1]
            if placeholderTag == valueTag then
                line.replace(placeholderTag, analyzeResult[i])
            end if
        end for
        print(line)
    end for
end function

