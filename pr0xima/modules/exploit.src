Proxima.exploit = {}

// ------------------------------------------------------------------------------------------------------------

Proxima.exploit.isRouter = function (targetIP)
    if get_router(targetIP) != null then
        return true
    else
        return false
    end if
end function

Proxima.exploit.isPingable = function (targetIP)
    if Proxima.globals.myShell.ping(targetIP) then return true
end function

Proxima.exploit.isLocal = function ()
    sessionType = Proxima.sessions.getSessionValue("sessionType")    
    if sessionType == 0 then
        return true
    else if sessionType == 1 then
        return false
    end if
end function

Proxima.exploit.parseScanEntries = function (scanResult, libraryDump, targetObject)
    totalExploits = 0
    for entry in scanResult
        scanAddress = scan_address(Proxima.globals.metaxploit, libraryDump, entry)
        segments = split(scanAddress, "Unsafe check: ")[1:]
        exploits = []

        for segment in segments
            labelStart = indexOf(segment, "<b>")
            labelEnd = indexOf(segment, "</b>")
            push(exploits, segment[labelStart + 3: labelEnd])
        end for

        for exploit in exploits
            exploitID = Proxima.sessions.getSessionValue("targetExploits").len + 1
            if self.isLocal() then
                Proxima.sessions.pushMap("targetExploits", { "id": exploitID, "lib_name": libraryDump.lib_name, "version": libraryDump.version, "path": targetObject.path, "memAddr": entry, "unsecZone": exploit, "result": 5 })
            else
                Proxima.sessions.pushMap("targetExploits", { "id": exploitID, "port_number": targetObject.port_number, "memAddr": entry, "unsecZone": exploit, "result": 5 })
            end if
            totalExploits = totalExploits + 1
        end for
    end for
    return totalExploits
end function

// ------------------------------------------------------------------------------------------------------------

Proxima.exploit.checkTargetIP = function (targetIP = null)
    if targetIP != null and is_valid_ip(targetIP) then
        if self.isPingable(targetIP) then
            return true
        else
            return false
        end if
    else
        return null
    end if
end function

Proxima.exploit.dumpRouter = function ()
end function

Proxima.exploit.scanRouter = function ()
end function

Proxima.exploit.checkPorts = function (targetIP = null)
    if Proxima.utils.indexesOf(Proxima.sessions.activeSessions, "targetIP", targetIP) then
        for targetSession in Proxima.sessions.activeSessions
            if targetSession.id == Proxima.sessions.activeSession then
                print(Proxima.io.addOutputEntry(Proxima.io.output.info("You are already at this session. <b>[ID:" + targetSession.id + "|TYPE:REMOTE]</b>")))
            else if targetSession.targetIP == targetIP then
                Proxima.sessions.setSession(targetSession.id)
                print(Proxima.io.addOutputEntry(Proxima.io.output.progress("This session is already in the list, switching session... <b>[ID:" + targetSession.id + "|TYPE:REMOTE]</b>")))
                print(Proxima.io.addOutputEntry(Proxima.io.output.success("Loaded session successfuly!")))
                Proxima.io.inputString = Proxima.io.output.colorize("<b>" + targetSession.targetIP + "</b>", "#FFC466") + Proxima.io.output.colorize("@pr0xima", "#FC8403") + Proxima.io.output.colorize("> ", "#008DFF")
            end if
            return true
        end for
    else
        targetRouter = get_router(targetIP)
        if is_lan_ip(targetIP) and self.isRouter(targetIP) != true then targetRouter = get_router()
        mainIP = targetRouter.local_ip
        if is_lan_ip(targetIP) then mainIP = targetIP
        scannedPorts = targetRouter.device_ports(mainIP)
        createRemoteSession = Proxima.sessions.createSession(1, targetIP, targetRouter)
        if createRemoteSession != null and typeof(createRemoteSession) == "number" then
            setActiveSession = Proxima.sessions.setSession(createRemoteSession)
            if setActiveSession then
                Proxima.io.inputString = Proxima.io.output.colorize("<b>pr0xima</b>", "#FFC466") + Proxima.io.output.colorize("@", "#08FF57") + Proxima.io.output.colorize("[" + targetIP + "]", "#FF1548") + Proxima.io.output.colorize("> ", "#008DFF")
                if scannedPorts.len == 0 or scannedPorts == null then
                    return false
                else
                    for scannedPort in scannedPorts
                        portID = Proxima.sessions.getSessionValue("targetPorts").len + 1
                        portNumber = scannedPort.port_number
                        portState = "OPEN"
                        if is_closed(scannedPort) then portState = "CLOSED"
                        portInfo = targetRouter.port_info(scannedPort).split(" ")
                        portService = portInfo[0]
                        portVersion = portInfo[1]
                        portLanIP = scannedPort.get_lan_ip
                        Proxima.sessions.pushMap("targetPorts", { "id": portID, "port_number": portNumber, "state": portState, "service": portService, "version": portVersion, "lan_ip": portLanIP })
                    end for
                    return true
                end if
            else
                print(Proxima.io.addOutputEntry(Proxima.io.output.error("Couldn't switch to created session due to unexpected error.")))
            end if
        else
            print(Proxima.io.addOutputEntry(Proxima.io.output.error("Couldn't create remote session due to unexpected error.")))
        end if
    end if
end function

Proxima.exploit.dumpPort = function (targetPort)
    totalExploits = 0
    if targetPort.state == "OPEN" then
        targetIP = Proxima.sessions.getSessionValue("targetIP")
        print(Proxima.io.addOutputEntry(Proxima.io.output.progress("Connecting to <b>" + targetIP + ":" + targetPort.port_number + "</b>...")))
        netSession = Proxima.globals.metaxploit.net_use(targetIP, targetPort.port_number)
        Proxima.io.clearScreen()
        wait(0.5)
        if netSession != null then
            libraryDump = netSession.dump_lib
            print(Proxima.io.addOutputEntry(Proxima.io.output.progress("Attempting to scan vulnerabilities... <b>[IP:" + targetIP + "|PORT:" + targetPort.port_number + "]</b>")))
            print(Proxima.io.addOutputEntry(Proxima.io.output.info("Library version found: <b>" + libraryDump.lib_name + " -> " + libraryDump.version + "</b>")))
            scanResult = Proxima.globals.metaxploit.scan(libraryDump)
            Proxima.io.addProgressBar()
            Proxima.io.clearScreen()
            wait(0.5)
            totalExploits = self.parseScanEntries(scanResult, libraryDump, targetPort)
        else
            print(Proxima.io.addOutputEntry(Proxima.io.output.error("Unable to connect to port <b>" + targetPort.port_number + "</b>. It has firewall protection.")))
        end if 
    else
        print(Proxima.io.addOutputEntry(Proxima.io.output.error("Unable to connect to port <b>" + targetPort.port_number + "</b>. It is closed.")))
    end if
    return totalExploits
end function

Proxima.exploit.scanPort = function (portID)
    targetIP = Proxima.sessions.getSessionValue("targetIP")
    targetPorts = Proxima.sessions.getSessionValue("targetPorts")
    if targetPorts.len > 0 then
        if portID != null and targetPorts.hasIndex(portID - 1) then
            totalExploits = 0
            targetPort = targetPorts[portID - 1]
            targetExploits = Proxima.sessions.getSessionValue("targetExploits")
            if targetExploits.len > 0 and Proxima.utils.indexesOf(targetExploits, "port_number", targetPort.port_number) then
                print(Proxima.io.addOutputEntry(Proxima.io.output.warning("This port is already scanned for exploits. Skipping... <b>[IP:" + targetIP + "|PORT:" + targetPort.port_number + "]</b>")))
                print(Proxima.io.addOutputEntry(Proxima.io.output.info("You can use 'exploits' command to view found exploits.")))
            else
                totalExploits = self.dumpPort(targetPort)
                if totalExploits == 0 then
                    print(Proxima.io.addOutputEntry(Proxima.io.output.error("No useful vulnerabilities found on port <b>" + targetPort.port_number + "</b>!")))
                else if totalExploits > 0 then
                    print(Proxima.io.addOutputEntry(Proxima.io.output.success("<b>" + totalExploits + "</b> exploits found. Use 'exploits' command to view available exploits.")))
                end if
            end if
        else
            print(Proxima.io.addOutputEntry(Proxima.io.output.error("No port found with the specified ID. <b>[ID:" + portID + "]</b>")))
        end if
    else
        if targetIP != null then
            print(Proxima.io.addOutputEntry(Proxima.io.output.error("No open ports found at the specified target IP address. <b>[IP:" + targetIP + "]</b>")))
        else
            print(Proxima.io.addOutputEntry(Proxima.io.output.error("There is no specified target IP address yet, please set a target IP address first.")))
        end if
    end if
end function

Proxima.exploit.scanPorts = function ()
    targetIP = Proxima.sessions.getSessionValue("targetIP")
    targetPorts = Proxima.sessions.getSessionValue("targetPorts")
    if targetPorts.len > 0 then
        totalExploits = 0
        targetExploits = Proxima.sessions.getSessionValue("targetExploits")
        for targetPort in targetPorts
            if targetExploits.len > 0 and Proxima.utils.indexesOf(targetExploits, "port_number", targetPort.port_number) then
                print(Proxima.io.addOutputEntry(Proxima.io.output.info("This port is already scanned for exploits. Skipping... <b>[IP:" + targetIP + "|PORT:" + targetPort.port_number + "]</b>")))
                for targetExploit in targetExploits
                    if targetExploit.port_number == targetPort.port_number then
                        totalExploits = totalExploits + 1
                    end if
                end for
            else
                totalExploits = totalExploits + self.dumpPort(targetPort)
            end if
        end for
        if totalExploits == 0 then
            print(Proxima.io.addOutputEntry(Proxima.io.output.error("No useful vulnerabilities found on any port.")))
        else if totalExploits > 0 then
            print(Proxima.io.addOutputEntry(Proxima.io.output.success("<b>" + totalExploits + "</b> exploits found. Use 'exploits' command to view available exploits.")))
        end if
    else
        if targetIP != null then
            print(Proxima.io.addOutputEntry(Proxima.io.output.error("No open ports found at the specified target IP address. <b>[IP:" + targetIP + "]</b>")))
        else
            print(Proxima.io.addOutputEntry(Proxima.io.output.error("There is no specified target IP address yet, please set a target IP address first.")))
        end if
    end if
end function

// ------------------------------------------------------------------------------------------------------------

Proxima.exploit.checkLibraries = function ()
    Proxima.sessions.setSessionValue("targetLibraries", [])
    librariesFolder = Proxima.globals.myPC.File("/lib")
    localLibraries = librariesFolder.get_files
    for localLibrary in localLibraries
        libraryID = Proxima.sessions.getSessionValue("targetLibraries").len + 1
        libraryInfo = Proxima.globals.metaxploit.load(localLibrary.path)
        Proxima.sessions.pushMap("targetLibraries", { "id": libraryID , "lib_name": libraryInfo.lib_name, "version": libraryInfo.version, "path": localLibrary.path })
    end for
end function

Proxima.exploit.dumpLibrary = function (targetLibrary)
    totalExploits = 0
    libraryDump = Proxima.globals.metaxploit.load(targetLibrary.path)
    print(Proxima.io.addOutputEntry(Proxima.io.output.progress("Attempting to scan vulnerabilities at <b>" + libraryDump.lib_name + "</b>!")))
    print(Proxima.io.addOutputEntry(Proxima.io.output.info("Library version found: <b>" + libraryDump.lib_name + " -> " + libraryDump.version + "</b>")))
    scanResult = Proxima.globals.metaxploit.scan(libraryDump)
    Proxima.io.addProgressBar()
    totalExploits = self.parseScanEntries(scanResult, libraryDump, targetLibrary)
    return totalExploits
end function

Proxima.exploit.scanLibrary = function (libraryID)
    targetLibraries = Proxima.sessions.getSessionValue("targetLibraries")
    if targetLibraries.len > 0 then
        if libraryID != null and targetLibraries.hasIndex(libraryID - 1) then
            totalExploits = 0
            targetLibrary = targetLibraries[libraryID - 1]
            targetExploits = Proxima.sessions.getSessionValue("targetExploits")
            if targetExploits.len > 0 and Proxima.utils.indexesOf(targetExploits, "lib_name", targetLibrary.lib_name) then
                print(Proxima.io.addOutputEntry(Proxima.io.output.info("This library is already scanned for exploits. Skipping... <b>[LIB_NAME:" + targetLibrary.lib_name + "]</b>")))
                print(Proxima.io.addOutputEntry(Proxima.io.output.info("You can use 'exploits' command to view found exploits.")))
            else
                totalExploits = self.dumpLibrary(targetLibrary)
                if totalExploits == 0 then
                    print(Proxima.io.addOutputEntry(Proxima.io.output.error("No useful vulnerabilities found at <b>" + targetLibrary.lib_name + "</b>!")))
                else if totalExploits > 0 then
                    print(Proxima.io.addOutputEntry(Proxima.io.output.success("<b>" + totalExploits + "</b> exploits found. Use the 'exploits' command to view available exploits.")))
                end if
            end if
        else
            print(Proxima.io.addOutputEntry(Proxima.io.output.error("No library found with specified ID. <b>[ID:" + libraryID + "]</b>")))
        end if
    else
        print(Proxima.io.addOutputEntry(Proxima.io.output.error("No libraries found to scan, please make a scan first.")))
    end if
end function

Proxima.exploit.scanLibraries = function ()
    targetLibraries = Proxima.sessions.getSessionValue("targetLibraries")
    if targetLibraries.len > 0 then
        totalExploits = 0
        targetExploits = Proxima.sessions.getSessionValue("targetExploits")
        for targetLibrary in targetLibraries
            if targetExploits.len > 0 and Proxima.utils.indexesOf(targetExploits, "lib_name", targetLibrary.lib_name) then
                print(Proxima.io.addOutputEntry(Proxima.io.output.info("This library is already scanned for exploits. Skipping... <b>[LIB_NAME:" + targetLibrary.lib_name + "]</b>")))
                for targetExploit in targetExploits
                    if targetExploit.lib_name == targetLibrary.lib_name then
                        totalExploits = totalExploits + 1
                    end if
                end for
            else
                totalExploits = totalExploits + self.dumpLibrary(targetLibrary)
            end if
        end for
        if totalExploits == 0 then
            print(Proxima.io.addOutputEntry(Proxima.io.output.error("No useful vulnerabilities found at any libraries.")))
        else if totalExploits > 0 then
            print(Proxima.io.addOutputEntry(Proxima.io.output.success("<b>" + totalExploits + "</b> exploits found. Use the 'list vulns' command to view and execute them.")))
        end if
    else
        print(Proxima.io.addOutputEntry(Proxima.io.output.error("No libraries found fo scan, please make a scan first.")))
    end if
end function

// ------------------------------------------------------------------------------------------------------------

Proxima.exploit.accessPasswdFile = function (passwdFile)
    Proxima.sessions.setSessionValue("targetUsers", [])
    if passwdFile.get_content != null and passwdFile.has_permission("r") then
        encryptedContent = passwdFile.get_content
        userList = encryptedContent.split(char(10))
        for userInfo in userList
            if userInfo.len > 1 then
                userID = Proxima.sessions.getSessionValue("targetUsers").len + 1
                parsedUser = userInfo.split(":")
                userName = parsedUser[0]
                userPassword = parsedUser[1]
                userMap = { "id": userID, "username": userName, "password": userPassword }
                Proxima.sessions.pushMap("targetUsers", userMap)
            end if
        end for
        return true
    else
        return false
    end if
end function

Proxima.exploit.reachPasswdFile = function (givenDirectory)
    while givenDirectory.path != "/"
        givenDirectory = givenDirectory.parent
    end while

    rootFolders = givenDirectory.get_folders
    for rootFolder in rootFolders
        if rootFolder.name == "etc" then
            for etcFile in rootFolder.get_files
                if etcFile.name == "passwd" then
                    return etcFile
                end if
            end for
        end if
    end for
end function

Proxima.exploit.reachHomeDirectory = function (givenDirectory)
    while givenDirectory.path != "/"
        givenDirectory = givenDirectory.parent
    end while

    rootFolders = givenDirectory.get_folders
    for rootFolder in rootFolders
        if rootFolder.name == "home" then
            return rootFolder
            break
        end if
    end for
end function

Proxima.exploit.reachFileOwner = function (givenDirectory)
    while givenDirectory.path != "/"
        givenDirectory = givenDirectory.parent
    end while

    acquiredUser = "guest"
    if givenDirectory != null and givenDirectory.has_permission("w") then
        acquiredUser = "root"
    else
        homeDirectory = self.reachHomeDirectory(givenDirectory)
        if homeDirectory != null then
            for userFolder in homeDirectory.get_folders
                if userFolder.name == "guest" then continue
                if userFolder.has_permission("w") then acquiredUser = userFolder.name
            end for
        end if
    end if
    return acquiredUser
end function

Proxima.exploit.getPrivilegeLevel = function (acquiredUser)
    acquiredUserNum = 2
    if acquiredUser == "guest" then
        acquiredUserNum = 2
    else if acquiredUser == "root" then
        acquiredUserNum = 0
    else 
        acquiredUserNum = 1
    end if
    return acquiredUserNum
end function

Proxima.exploit.acquireUser = function (targetComputer)
    rootDirectory = targetComputer.File("/")
    acquiredUser = "guest"
    if rootDirectory != null and rootDirectory.has_permission("w") then
        acquiredUser = "root"
    else
        homeDirectory = targetComputer.File("/home")
        if homeDirectory != null then
            for userFolder in homeDirectory.get_folders
                if userFolder.name == "guest" then continue
                if userFolder.has_permission("w") then acquiredUser = userFolder.name
            end for
        end if
    end if
    return acquiredUser
end function

Proxima.exploit.getMailInfo = function (homeFolder)
    Proxima.sessions.setSessionValue("targetMails", [])
    hasAccessedMails = false
    for userFolders in homeFolder.get_folders
        if userFolders.name != "guest" then
            infoMap = {}
            infoMap.id = Proxima.sessions.getSessionValue("targetMails").len + 1
            infoMap.owner = userFolders.name
            for userFolder in userFolders.get_folders
                if userFolder.name == "Config" then
                    for configFile in userFolder.get_files
                        if configFile.name == "Mail.txt" then
                            fileContent = configFile.get_content()
                            if fileContent != null and fileContent.len > 0 then
                                splitInfo = fileContent.split(":")
                                infoMap.mail_addr = splitInfo[0]
                                infoMap.password = splitInfo[1]
                                Proxima.sessions.pushMap("targetMails", infoMap)
                                hasAccessedMails = true
                            end if
                        end if
                    end for
                end if
            end for
        end if
    end for
    return hasAccessedMails
end function

Proxima.exploit.getBankInfo = function (homeFolder)
    Proxima.sessions.setSessionValue("targetBanks", [])
    hasAccessedBanks = false
    for userFolders in homeFolder.get_folders
        if userFolders.name != "guest" then
            infoMap = {}
            infoMap.id = Proxima.sessions.getSessionValue("targetBanks").len + 1
            infoMap.owner = userFolders.name
            for userFolder in userFolders.get_folders
                if userFolder.name == "Config" then
                    for configFile in userFolder.get_files
                        if configFile.name == "Bank.txt" then
                            fileContent = configFile.get_content()
                            if fileContent != null and fileContent.len > 0 then
                                splitInfo = fileContent.split(":")
                                infoMap.account = splitInfo[0]
                                infoMap.password = splitInfo[1]
                                Proxima.sessions.pushMap("targetBanks", infoMap)
                                hasAccessedBanks = true
                            end if
                        end if
                    end for
                end if
            end for
        end if
    end for
    return hasAccessedBanks
end function

Proxima.exploit.getUsers = function (homeFolder)
    Proxima.sessions.setSessionValue("targetUsers", [])
    Proxima.sessions.pushMap("targetUsers", { "id": 1, "username": "root", "password": "UNKNOWN" })
    for userFolders in homeFolder.get_folders
        if userFolders.name != "guest" then
            userID = Proxima.sessions.getSessionValue("targetUsers").len + 1
            userMap = { "id": userID, "username": userFolders.name, "password": "UNKNOWN" }
            Proxima.sessions.pushMap("targetUsers", userMap)
        end if
    end for
end function

Proxima.exploit.decipherHash = function (encryptedHash)
    decryptedHash = Proxima.globals.crypto.decipher(encryptedHash)
    Proxima.io.addProgressBar()
    return decryptedHash
end function

Proxima.exploit.decipherUserPassword = function (userID)
    targetUsers = Proxima.sessions.getSessionValue("targetUsers")
    if targetUsers.len > 0 then
        if userID != null and targetUsers.hasIndex(userID - 1) then
            targetUser = targetUsers[userID - 1]
            if targetUser.password.len < 32 then
                print(Proxima.io.addOutputEntry(Proxima.io.output.warning("This password is already deciphered. Skipping...")))
            else
                decryptedPassword = self.decipherHash(targetUser.password)
                if decryptedPassword != null then
                    targetUsers[userID - 1].password = decryptedPassword
                    Proxima.sessions.setSessionValue("targetUsers", targetUsers)
                    print(Proxima.io.addOutputEntry(Proxima.io.output.success("Password decrypted successfuly!. <b>[USER:" + targetUser.username + "|PASSWORD:" + targetUser.password + "]</b>")))
                    print(Proxima.io.addOutputEntry(Proxima.io.output.info("Updated user information, you can view it later by using command: <b>users</b>")))
                else
                    print(Proxima.io.addOutputEntry(Proxima.io.output.info("Couldn't decrypt password! Please try another one...")))
                end if
            end if
        else
            print(Proxima.io.addOutputEntry(Proxima.io.output.error("No user found with specified ID. <b>[ID:" + userID + "]</b>")))
        end if
    else
        print(Proxima.io.addOutputEntry(Proxima.io.output.error("No user information found to decipher, please execute an exploit first.")))
    end if
end function

Proxima.exploit.decipherMailPassword = function (mailID)
    targetMails = Proxima.sessions.getSessionValue("targetMails")
    if targetMails.len > 0 then
        if mailID != null and targetMails.hasIndex(mailID - 1) then
            targetMail = targetMails[mailID - 1]
            if targetMail.password.len < 32 then
                print(Proxima.io.addOutputEntry(Proxima.io.output.warning("This password is already deciphered. Skipping...")))
            else
                decryptedPassword = self.decipherHash(targetMail.password)
                if decryptedPassword != null then
                    targetMails[mailID - 1].password = decryptedPassword
                    Proxima.sessions.setSessionValue("targetMails", targetMails)
                    print(Proxima.io.addOutputEntry(Proxima.io.output.success("Password decrypted successfuly!. <b>[MAIL_ADDR:" + targetMail.mail_addr + "|PASSWORD:" + targetMail.password + "]</b>")))
                    print(Proxima.io.addOutputEntry(Proxima.io.output.info("Updated mail information, you can view it later by using command: <b>mails</b>")))
                else
                    print(Proxima.io.addOutputEntry(Proxima.io.output.info("Couldn't decrypt password! Please try another one...")))
                end if
            end if
        else
            print(Proxima.io.addOutputEntry(Proxima.io.output.error("No mail information found with specified ID. <b>[ID:" + mailID + "]</b>")))
        end if
    else
        print(Proxima.io.addOutputEntry(Proxima.io.output.error("No mail information found to decipher, please execute an exploit first.")))
    end if
end function

Proxima.exploit.decipherBankPassword = function (bankID)
    targetBanks = Proxima.sessions.getSessionValue("targetBanks")
    if targetBanks.len > 0 then
        if bankID != null and targetBanks.hasIndex(bankID - 1) then
            targetBank = targetBanks[bankID - 1]
            if targetBank.password.len < 32 then
                print(Proxima.io.addOutputEntry(Proxima.io.output.warning("This password is already deciphered. Skipping...")))
            else
                decryptedPassword = self.decipherHash(targetBank.password)
                if decryptedPassword != null then
                    targetBanks[bankID - 1].password = decryptedPassword
                    Proxima.sessions.setSessionValue("targetBanks", targetBanks)
                    print(Proxima.io.addOutputEntry(Proxima.io.output.success("Password decrypted successfuly!. <b>[ACCOUNT:" + targetBank.account + "|PASSWORD:" + targetBank.password + "]</b>")))
                    print(Proxima.io.addOutputEntry(Proxima.io.output.info("Updated bank information, you can view it later by using command: <b>banks</b>")))
                else
                    print(Proxima.io.addOutputEntry(Proxima.io.output.info("Couldn't decrypt password! Please try another one...")))
                end if
            end if
        else
            print(Proxima.io.addOutputEntry(Proxima.io.output.error("No bank information found with specified ID. <b>[ID:" + bankID + "]</b>")))
        end if
    else
        print(Proxima.io.addOutputEntry(Proxima.io.output.error("No bank information found to decipher, please execute an exploit first.")))
    end if
end function

// ------------------------------------------------------------------------------------------------------------

Proxima.exploit.setExploitResult = function (exploitID, resultType)
    targetExploits = Proxima.sessions.getSessionValue("targetExploits")
    if targetExploits.len > 0 then
        if exploitID != null and targetExploits.hasIndex(exploitID - 1) then
            targetExploits[exploitID - 1].result = resultType
            Proxima.sessions.setSessionValue("targetExploits", targetExploits)
        end if
    end if
end function

Proxima.exploit.reorderShells = function ()
    reorderedShells = Proxima.sessions.getSessionValue("targetShells").sort("privilege_level")
    shellID = 1
    for targetShell in reorderedShells
        if targetShell.id != shellID then targetShell.id = shellID
        shellID = shellID + 1
    end for
    Proxima.sessions.setSessionValue("targetShells", reorderedShells)
end function

Proxima.exploit.addShellConnection = function (shellObject, shellOwner)
    targetShells = Proxima.sessions.getSessionValue("targetShells")
    duplicateShell = Proxima.utils.indexesOf(targetShells, "owner", shellOwner)
    if duplicateShell then
        return false
    else
        shellID = targetShells.len + 1
        Proxima.sessions.pushMap("targetShells", { "id": shellID, "shell_object": shellObject, "owner": shellOwner, "privilege_level": self.getPrivilegeLevel(shellOwner), "public_ip": shellObject.host_computer.public_ip, "local_ip": shellObject.host_computer.local_ip})
        if targetShells.len > 1 then
            self.reorderShells()
        end if
        return true
    end if
end function

Proxima.exploit.handleShell = function (attackResult, exploitID, output)
    targetComputer = attackResult.host_computer
    acquiredUser = self.acquireUser(targetComputer)
    if output then print(Proxima.io.addOutputEntry(Proxima.io.output.success("Shell access granted via user: <b>" + acquiredUser + "</b>! Updating the shell list...")))

    addShell = self.addShellConnection(attackResult, acquiredUser)
    if addShell then
        if output then print(Proxima.io.addOutputEntry(Proxima.io.output.info("Updated the target shells list!")))
    else
        if output then print(Proxima.io.addOutputEntry(Proxima.io.output.warning("This shell connection is already in the target shells list. Skipping...")))
    end if
    self.setExploitResult(exploitID, 0)

    targetUsers = Proxima.sessions.getSessionValue("targetUsers")
    if targetUsers.len > 0 and Proxima.utils.indexesOf(targetUsers, "password", "UNKNOWN") != true then
        if output then print(Proxima.io.addOutputEntry(Proxima.io.output.info("Skipping password search, we already accessed account informations...")))
    else
        homeFolder = targetComputer.File("/home")
        hasAccessedPasswd = false
        if acquiredUser != "guest" then
            if output then print(Proxima.io.addOutputEntry(Proxima.io.output.info("Trying to access /etc/passwd file...")))
            passwdFile = targetComputer.File("/etc/passwd")
            accessPasswdFile = self.accessPasswdFile(passwdFile)
            if accessPasswdFile then
                if output then print(Proxima.io.addOutputEntry(Proxima.io.output.success("Accessed the /etc/passwd file!")))
                if output then print(Proxima.io.addOutputEntry(Proxima.io.output.info("Updated the target users list!")))
                if output then print(Proxima.io.addOutputEntry(Proxima.io.output.progress("Accessing all mail and bank informations...")))
                mailInfo = self.getMailInfo(homeFolder)
                bankInfo = self.getBankInfo(homeFolder)
                if bankInfo and mailInfo then
                    if output then print(Proxima.io.addOutputEntry(Proxima.io.output.success("Accessed and updated mail and bank informations! Updating lists...")))
                else
                    if output then print(Proxima.io.addOutputEntry(Proxima.io.output.error("Couldn't access mail and bank informations!é")))
                end if
                Proxima.sessions.setSessionValue("payloadInjection", false)
                if output then print(Proxima.io.addOutputEntry(Proxima.io.output.info("Disabled password injection method to prevent future conflicts...")))
                hasAccessedPasswd = true
            end if
        end if
        if hasAccessedPasswd == false then
            if output then print(Proxima.io.addOutputEntry(Proxima.io.output.warning("Coulnd't access /etc/passwd file, you have to gain root access with a different method.")))
            self.getUsers(homeFolder)
            targetUsers = Proxima.sessions.getSessionValue("targetUsers")
            if targetUsers.len > 0 then
                if output then print(Proxima.io.addOutputEntry(Proxima.io.output.success("Accessed user names! Updating list...")))
                if output then print(Proxima.io.addOutputEntry(Proxima.io.output.info("If there is a payload injection, you can try to brute with available information.")))
            else
                if output then print(Proxima.io.addOutputEntry(Proxima.io.output.error("Couldn't access user names, you can try another method...")))
            end if
        end if
    end if
end function

Proxima.exploit.handleComputer = function (attackResult, exploitID, output)
    acquiredUser = self.acquireUser(attackResult)
    if output then print(Proxima.io.addOutputEntry(Proxima.io.output.success("Computer access granted via user: <b>" + acquiredUser + "</b>!")))
    targetUsers = Proxima.sessions.getSessionValue("targetUsers")
    if targetUsers.len > 0 and Proxima.utils.indexesOf(targetUsers, "password", "UNKNOWN") == false then
        if output then print(Proxima.io.addOutputEntry(Proxima.io.output.info("Skipping password search, we already accessed account informations...")))
    else
        homeFolder = attackResult.File("/home")
        hasAccessedPasswd = false
        if acquiredUser != "guest" then
            if output then print(Proxima.io.addOutputEntry(Proxima.io.output.info("Trying to access /etc/passwd file...")))
            passwdFile = attackResult.File("/etc/passwd")
            accessPasswdFile = self.accessPasswdFile(passwdFile)
            if accessPasswdFile then
                if output then print(Proxima.io.addOutputEntry(Proxima.io.output.success("Accessed the /etc/passwd file!")))
                if output then print(Proxima.io.addOutputEntry(Proxima.io.output.info("Updated the target users list!")))
                if output then print(Proxima.io.addOutputEntry(Proxima.io.output.progress("Accessing all mail and bank informations...")))
                mailInfo = self.getMailInfo(homeFolder)
                bankInfo = self.getBankInfo(homeFolder)
                if bankInfo and mailInfo then
                    if output then print(Proxima.io.addOutputEntry(Proxima.io.output.success("Accessed and updated mail and bank informations! Updating lists...")))
                else
                    if output then print(Proxima.io.addOutputEntry(Proxima.io.output.error("Couldn't access mail and bank informations!é")))
                end if
                Proxima.sessions.setSessionValue("payloadInjection", false)
                if output then print(Proxima.io.addOutputEntry(Proxima.io.output.info("Disabled password injection method to prevent future conflicts...")))
                hasAccessedPasswd = true
            end if
        end if
        if hasAccessedPasswd == false then
            if output then print(Proxima.io.addOutputEntry(Proxima.io.output.warning("Coulnd't access /etc/passwd file, you have to gain root access with a different method.")))
            self.getUsers(homeFolder)
            targetUsers = Proxima.sessions.getSessionValue("targetUsers")
            if targetUsers.len > 0 then
                if output then print(Proxima.io.addOutputEntry(Proxima.io.output.success("Accessed user names! Updating list...")))
                if output then print(Proxima.io.addOutputEntry(Proxima.io.output.info("If there is a payload injection, you can try to brute with available information.")))
            else
                if output then print(Proxima.io.addOutputEntry(Proxima.io.output.error("Couldn't access user names, you can try another method...")))
            end if
        end if
    end if
    self.setExploitResult(exploitID, 1)
end function

Proxima.exploit.handleFile = function (attackResult, exploitID, output)
    acquiredUser = self.reachFileOwner(attackResult)
    if output then print(Proxima.io.addOutputEntry(Proxima.io.output.success("File access granted via user: <b>" + acquiredUser + "</b>!")))
    targetUsers = Proxima.sessions.getSessionValue("targetUsers")
    if targetUsers.len > 0 and Proxima.utils.indexesOf(targetUsers, "password", "UNKNOWN") == false then
        if output then print(Proxima.io.addOutputEntry(Proxima.io.output.info("Skipping password search, we already accessed account informations...")))
    else
        homeFolder = self.reachHomeDirectory(attackResult)
        hasAccessedPasswd = false
        if acquiredUser != "guest" then
            if output then print(Proxima.io.addOutputEntry(Proxima.io.output.progress("Acquired file, trying to access /etc/passwd file...")))
            passwdFile = self.reachPasswdFile(attackResult)
            accessPasswdFile = self.accessPasswdFile(passwdFile)
            if accessPasswdFile then
                if output then print(Proxima.io.addOutputEntry(Proxima.io.output.success("Accessed the /etc/passwd file!")))
                if output then print(Proxima.io.addOutputEntry(Proxima.io.output.info("Updated the target users list!")))
                if output then print(Proxima.io.addOutputEntry(Proxima.io.output.progress("Accessing all mail and bank informations...")))
                mailInfo = self.getMailInfo(homeFolder)
                bankInfo = self.getBankInfo(homeFolder)
                if bankInfo and mailInfo then
                    if output then print(Proxima.io.addOutputEntry(Proxima.io.output.success("Accessed and updated mail and bank informations! Updating lists...")))
                else
                    if output then print(Proxima.io.addOutputEntry(Proxima.io.output.error("Couldn't access mail and bank informations!é")))
                end if
                Proxima.sessions.setSessionValue("payloadInjection", false)
                if output then print(Proxima.io.addOutputEntry(Proxima.io.output.info("Disabled password injection method to prevent future conflicts...")))
                hasAccessedPasswd = true
            end if
        end if
        if hasAccessedPasswd == false then
            if output then print(Proxima.io.addOutputEntry(Proxima.io.output.warning("Coulnd't access /etc/passwd file, you have to gain root access with a different method.")))
            self.getUsers(homeFolder)
            targetUsers = Proxima.sessions.getSessionValue("targetUsers")
            if targetUsers.len > 0 then
                if output then print(Proxima.io.addOutputEntry(Proxima.io.output.success("Accessed user names! Updating list...")))
                if output then print(Proxima.io.addOutputEntry(Proxima.io.output.info("If there is a payload injection, you can try to brute with available information.")))
            else
                if output then print(Proxima.io.addOutputEntry(Proxima.io.output.error("Couldn't access user names, you can try another method...")))
            end if
        end if
    end if
    self.setExploitResult(exploitID, 2)
end function

Proxima.exploit.handlePayload = function (attackResult, exploitID, output)
    payloadInjection = Proxima.sessions.getSessionValue("payloadInjection")
    if payloadInjection then
        if attackResult == 1 then
            if output then print(Proxima.io.addOutputEntry(Proxima.io.output.success("Payload successfuly worked, injection completed! <b>[PASSWORD:" + Proxima.engine.getSettings().injection_password + "]</b>")))
        else if attackResult == 0 or attackResult == null then
            if output then print(Proxima.io.addOutputEntry(Proxima.io.output.error("Payload didn't work correctly! Failed to inject password...")))
        end if
    else
        if output then print(Proxima.io.addOutputEntry(Proxima.io.output.error("Payload injection option is disabled! Didn't inject password...")))
    end if
    self.setExploitResult(exploitID, 3)
end function

Proxima.exploit.handleFailedAttempt = function (attackResult, exploitID, output)
    self.setExploitResult(exploitID, 4)
    if output then print(Proxima.io.addOutputEntry(Proxima.io.output.error("Exploit did not work correctly, please try another one if it has any.")))
end function

Proxima.exploit.handleAttackResult = function (attackResult, exploitID, output)
    if typeof(attackResult) == "shell" then
        self.handleShell(attackResult, exploitID, output)
    else if typeof(attackResult) == "computer" then
        self.handleComputer(attackResult, exploitID, output)
    else if typeof(attackResult) == "file" then
        self.handleFile(attackResult, exploitID, output)
    else if typeof(attackResult) == "number" then
        self.handlePayload(attackResult, exploitID, output)
    else
        self.handleFailedAttempt(attackResult, exploitID, output)
    end if
end function

Proxima.exploit.execute = function (exploitID, output = true)
    targetIP = Proxima.sessions.getSessionValue("targetIP")
    targetExploits = Proxima.sessions.getSessionValue("targetExploits")
    if targetExploits.len == 0 then
        if output then print(Proxima.io.addOutputEntry(Proxima.io.output.error("No exploits available, please make a scan first.")))
    else if exploitID != null and targetExploits.hasIndex(exploitID - 1) then
        targetExploit = targetExploits[exploitID - 1]
        libraryDump = null
        if output then print(Proxima.io.addOutputEntry(Proxima.io.output.info("Launching exploit... <b>[ID:" + targetExploit.id + "]</b>")))
        if self.isLocal() then
            if output then print(Proxima.io.addOutputEntry(Proxima.io.output.progress("Trying to exploit <b>" + targetExploit.lib_name + "</b> library.")))
            libraryDump = Proxima.globals.metaxploit.load(targetExploit.path)
        else
            if output then print(Proxima.io.addOutputEntry(Proxima.io.output.progress("Trying to connect <b>" + targetIP + "</b> on port <b>" + targetExploit.port_number + "</b>.")))
            netSession = Proxima.globals.metaxploit.net_use(targetIP, targetExploit.port_number)
            if netSession != null then
                if output then print(Proxima.io.addOutputEntry(Proxima.io.output.success("Connection established!")))
                libraryDump = netSession.dump_lib
                if output then print(Proxima.io.addOutputEntry(Proxima.io.output.progress("Attempting to exploit <b>" + libraryDump.lib_name + "</b> at port <b>" + targetExploit.port_number + "</b>.")))
            else
                if output then print(Proxima.io.addOutputEntry(Proxima.io.output.error("Unable to connect to port <b>" + targetExploit.port_number + "</b>, it has firewall protection.")))
            end if
        end if
        if output then print(Proxima.io.addOutputEntry(Proxima.io.output.progress("Injecting values into the library... <b>[MEM_ADDR:" + targetExploit.memAddr + "|UNSEC_ZONE:" + targetExploit.unsecZone + "]</b>")))
        attackResult = null
        payloadInjection = Proxima.sessions.getSessionValue("payloadInjection")
        if payloadInjection then
            attackResult = libraryDump.overflow(targetExploit.memAddr, targetExploit.unsecZone, Proxima.engine.getSettings().injection_password)
        else
            attackResult = libraryDump.overflow(targetExploit.memAddr, targetExploit.unsecZone)
        end if
        Proxima.io.clearScreen()
        wait(0.5)
        self.handleAttackResult(attackResult, exploitID, output)
    else
        if output then print(Proxima.io.addOutputEntry(Proxima.io.output.error("No exploit found with specified ID. <b>[ID:" + exploitID + "]</b>")))
    end if
end function

Proxima.exploit.autoExecute = function ()
    targetExploits = Proxima.sessions.getSessionValue("targetExploits")
    if targetExploits.len == 0 then
        print(Proxima.io.addOutputEntry(Proxima.io.output.error("No exploits available, please make a scan first.")))
    else
        print(Proxima.io.addOutputEntry(Proxima.io.output.progress("Launching all exploits...")))
        for targetExploit in targetExploits
            self.execute(targetExploit.id, false)
        end for
        print(Proxima.io.addOutputEntry(Proxima.io.output.success("Execution process completed!")))
    end if
end function

// ------------------------------------------------------------------------------------------------------------

Proxima.exploit.launchShell = function (shellID)
    targetShells = Proxima.sessions.getSessionValue("targetShells")
    if targetShells.len > 0 then
        if shellID != null and targetShells.hasIndex(shellID - 1) then
            targetShell = targetShells[shellID - 1]
            print(Proxima.io.addOutputEntry(Proxima.io.output.progress("Launching shell on <b>" + targetShell.public_ip + "|" + targetShell.local_ip + "</b> via <b>" + targetShell.owner + "</b> privilege. <b>[ID:" + targetShell.id + "]</b>")))
            wait(0.5)
            targetShell.shell_object.start_terminal
        else
            print(Proxima.io.addOutputEntry(Proxima.io.output.error("No open shell found with specified ID. <b>[ID:" + shellID + "]</b>")))
        end if
    else
        print(Proxima.io.addOutputEntry(Proxima.io.output.error("No open shells found to connect, please execute an exploit first.")))
    end if
end function

Proxima.exploit.executeBinary = function (binaryPath, launchParameters = null, output = true)
    targetShells = Proxima.sessions.getSessionValue("targetShells")
    if targetShells.len > 0 then
        targetShell = targetShells[0]
        fileName = binaryPath.split("/")[-1].trim
        getBinaryFile = targetShell.shell_object.host_computer.File(binaryPath)
        if getBinaryFile != null and is_binary(getBinaryFile) then
            if output then print(Proxima.io.addOutputEntry(Proxima.io.output.progress("Attempting to execute <b>" + fileName + "</b>...")))
            if getBinaryFile.has_permission("x") then
                launchBinary = null
                if launchParameters != null then
                    launchBinary = targetShell.shell_object.launch(binaryPath, launchParameters)
                else
                    launchBinary = targetShell.shell_object.launch(binaryPath)
                end if
                if launchBinary == null or launchBinary == 0 or typeof(launchBinary) == "string" then
                    if output then print(Proxima.io.addOutputEntry(Proxima.io.output.error("Couldn't launch desired binary file!")))
                    if output then print(Proxima.io.addOutputEntry(Proxima.io.output.error("Reason of failure: " + launchBinary)))
                else
                    if output then print(Proxima.io.addOutputEntry(Proxima.io.output.success("Successfuly launched <b>" + fileName + "</b>!")))
                end if
            else
                if output then print(Proxima.io.addOutputEntry(Proxima.io.output.error("Couldn't execute desired binary file due to insufficent user privilege!")))
            end if
        else
            if is_binary(getBinaryFile) then
                if output then print(Proxima.io.addOutputEntry(Proxima.io.output.error("Couldn't execute <b>" + fileName + "</b>. Remote binary file does not exist!")))
            else
                if output then print(Proxima.io.addOutputEntry(Proxima.io.output.error("Couldn't execute <b>" + fileName + "</b>. Remote file is not an executeable!")))
            end if
        end if
    else
        if output then print(Proxima.io.addOutputEntry(Proxima.io.output.error("No open shells found, please execute an exploit first.")))
    end if
end function

Proxima.exploit.getFile = function (remoteFilePath, downloadTo = null, output = true)
    targetShells = Proxima.sessions.getSessionValue("targetShells")
    if targetShells.len > 0 then
        targetShell = targetShells[0]
        getDownloadTo = Proxima.globals.myPC.File(home_dir + "/pr0xima/downloads")
        if downloadTo != null then getDownloadTo = Proxima.globals.myPC.File(downloadTo)
        if getDownloadTo != null and getDownloadTo.has_permission("w") then
            fileName = remoteFilePath.split("/")[-1].trim
            remoteFile = targetShell.shell_object.host_computer.File(remoteFilePath)
            if remoteFile != null then
                if output then print(Proxima.io.addOutputEntry(Proxima.io.output.progress("Attempting to download <b>" + fileName + "</b>...")))
                if remoteFile.has_permission("r") then
                    print(Proxima.io.addOutputEntry(Proxima.io.output.line))
                    getRemoteFile = targetShell.shell_object.scp(remoteFile.path, getDownloadTo.path, Proxima.globals.myShell)
                    Proxima.io.addTransferProcess(remoteFile.size)
                    print(Proxima.io.addOutputEntry(Proxima.io.output.line))
                    Proxima.io.clearScreen()
                    wait(0.5)
                    if typeof(getRemoteFile) == "string" or typeof(getRemoteFile) == null then
                        if output then print(Proxima.io.addOutputEntry(Proxima.io.output.error("Couldn't download <b>" + fileName + "</b>!")))
                        if output then print(Proxima.io.addOutputEntry(Proxima.io.output.error("Reason of failure: " + getRemoteFile)))
                    else
                        if output then print(Proxima.io.addOutputEntry(Proxima.io.output.success("Successfuly downloaded <b>" + fileName + "</b>!")))
                        Proxima.io.addTransferProcess(remoteFile.size)
                    end if
                else
                    if output then print(Proxima.io.addOutputEntry(Proxima.io.output.error("Couldn't download requested file due to insufficent user privilege!")))
                end if
            else
                if output then print(Proxima.io.addOutputEntry(Proxima.io.output.error("Couldn't download <b>" + fileName + "</b>. Remote file does not exist!")))
            end if
        else
            if output then print(Proxima.io.addOutputEntry(Proxima.io.output.error("Couldn't find downloads folder! You can change desired location via <b>settings.src</b>")))
        end if
    else
        if output then print(Proxima.io.addOutputEntry(Proxima.io.output.error("No open shells found, please execute an exploit first.")))
    end if
end function

Proxima.exploit.putFile = function (localFilePath, uploadTo = null, output = true)
    targetShells = Proxima.sessions.getSessionValue("targetShells")
    if targetShells.len > 0 then
        targetShell = targetShells[0]
        setUploadTo = "/root"
        if targetShell.owner != "root" then setUploadTo = "/home/" + targetShell.owner
        if uploadTo != null then setUploadTo = uploadTo
        setUploadFolder = targetShell.shell_object.host_computer.File(setUploadTo)
        if setUploadFolder != null and setUploadFolder.has_permission("w") then
            fileName = localFilePath.split("/")[-1].trim
            localFile = Proxima.globals.myPC.File(localFilePath)
            if localFile != null then
                if output then print(Proxima.io.addOutputEntry(Proxima.io.output.progress("Attempting to upload <b>" + fileName + "</b>...")))
                if localFile.has_permission("r") then
                    print(Proxima.io.addOutputEntry(Proxima.io.output.line))
                    uploadLocalFile = Proxima.globals.myShell.scp(localFile.path, setUploadFolder.path, targetShell.shell_object)
                    Proxima.io.addTransferProcess(localFile.size)
                    print(Proxima.io.addOutputEntry(Proxima.io.output.line))
                    Proxima.io.clearScreen()
                    wait(0.5)
                    if typeof(uploadLocalFile) == "string" or typeof(uploadLocalFile) == null then
                        if output then print(Proxima.io.addOutputEntry(Proxima.io.output.error("Couldn't upload <b>" + fileName + "</b>!")))
                        if output then print(Proxima.io.addOutputEntry(Proxima.io.output.error("Reason of failure: " + uploadLocalFile)))
                    else
                        if output then print(Proxima.io.addOutputEntry(Proxima.io.output.success("Successfuly uploaded <b>" + fileName + "</b>!")))
                    end if
                else
                    if output then print(Proxima.io.addOutputEntry(Proxima.io.output.error("Couldn't download requested file due to insufficent user privilege!")))
                end if
            else
                if output then print(Proxima.io.addOutputEntry(Proxima.io.output.error("Couldn't upload <b>" + fileName + "</b>. Remote upload path does not exist!")))
            end if
        else
            if output then print(Proxima.io.addOutputEntry(Proxima.io.output.error("No valid upload file found in given path!")))
        end if
    else
        if output then print(Proxima.io.addOutputEntry(Proxima.io.output.error("No open shells found, please execute an exploit first.")))
    end if
end function

Proxima.exploit.deleteFile = function (filePath, output = true)
    targetComputer = null
    if self.isLocal() then
        targetComputer = Proxima.globals.myPC
    else
        targetShells = Proxima.sessions.getSessionValue("targetShells")
        if targetShells.len > 0 then
            targetShell = targetShells[0]
            targetComputer = targetShell.shell_object.host_computer
        end if
    end if
    if typeof(targetComputer) == "computer" then
        fileName = filePath.split("/")[-1].trim
        
        remoteFile = targetComputer.File(filePath)
        if remoteFile != null then
            print(Proxima.io.addOutputEntry(Proxima.io.output.progress("Attempting to delete <b>" + fileName + "</b>...")))
            if remoteFile.has_permission("r") and remoteFile.has_permission("w") then
                deletionFileResult = remoteFile.delete
                if typeof(deletionFileResult) == "string" and deletionFileResult.len > 0 then
                    print(Proxima.io.addOutputEntry(Proxima.io.output.error("There was an error while deleting a file: " + deletionFileResult)))
                else
                    print(Proxima.io.addOutputEntry(Proxima.io.output.success("<b>" + fileName + "</b> file got deleted successfully.")))
                end if
            else
            end if
        else
            print(Proxima.io.addOutputEntry(Proxima.io.output.error("Couldn't delete <b>" + fileName + "</b>. Remote file does not exist!")))
        end if
    else
        if targetComputer == null then
            print(Proxima.io.addOutputEntry(Proxima.io.output.error("Couldn't delete file due to insufficient user privileges!")))
        else if targetComputer == false then
            print(Proxima.io.addOutputEntry(Proxima.io.output.error("No open shells found!")))
        end if
    end if
end function

// ------------------------------------------------------------------------------------------------------------

Proxima.exploit.isSSHAvailable = function ()
    isConnectableViaSSH = false
    targetPorts = Proxima.sessions.getSessionValue("targetPorts")
    for targetPort in targetPorts
        if targetPort.port_number == 22 and targetPort.state == "OPEN" then
            isConnectableViaSSH = true
            break
        end if
    end for
    return isConnectableViaSSH
end function

Proxima.exploit.isFTPAvailable = function ()
    isConnectableViaFTP = false
    targetPorts = Proxima.sessions.getSessionValue("targetPorts")
    for targetPort in targetPorts
        if targetPort.port_number == 21 and targetPort.state == "OPEN" then
            isConnectableViaFTP = true
            break
        end if
    end for
    return isConnectableViaFTP
end function

Proxima.exploit.getShellViaSSH = function (username, password)
    if self.isSSHAvailable() then
        targetIP = Proxima.sessions.getSessionValue("targetIP")
        connectionResult = Proxima.globals.myShell.connect_service(targetIP, 22, username, password, "ssh")
        Proxima.io.clearScreen()
        wait(0.5)
        if typeof(connectionResult) == "shell" then return connectionResult
    else
        return null
    end if
end function

Proxima.exploit.getShellViaFTP = function (username, password)
    if self.isFTPAvailable() then
        targetIP = Proxima.sessions.getSessionValue("targetIP")
        connectionResult = Proxima.globals.myShell.connect_service(targetIP, 21, username, password, "ftp")
        Proxima.io.clearScreen()
        wait(0.5)
        if typeof(connectionResult) == "shell" then return connectionResult
    else
        return null
    end if
end function

Proxima.exploit.tunnelConnection = function ()
    targetIP = Proxima.sessions.getSessionValue("targetIP")
    targetUsers = Proxima.sessions.getSessionValue("targetUsers")
    targetShell = null
    if targetUsers.len > 0 and Proxima.utils.indexesOf(targetUsers, "password", "UNKNOWN") == false then
        targetUser = targetUsers[0]

        if targetUser.password.len == 32 then
            print(Proxima.io.addOutputEntry(Proxima.io.output.error("User password is not deciphered yet! Deciphering password...")))
            self.decipherUserPassword(targetUser.id)
        end if
        
        print(Proxima.io.addOutputEntry(Proxima.io.output.progress("Trying to tunnel shell by SSH or FTP protocol via <b>" + targetUser.username + "</b> privilege. <b>[IP:" + targetIP + "]</b>")))
        sshShell = self.getShellViaSSH(targetUser.username, targetUser.password)
        ftpShell = self.getShellViaFTP(targetUser.username, targetUser.password)

        if sshShell != null then
            targetShell = sshShell
        else
            if ftpShell != null then
                targetShell = ftpShell
            end if
        end if

        if typeof(targetShell) == "shell" or typeof(targetShell) == "ftpshell" then
            additionResult = self.addShellConnection(targetShell, targetUser.username)
            if additionResult then
                print(Proxima.io.addOutputEntry(Proxima.io.output.success("Tunneled target via shell successfuly!")))
            else
                print(Proxima.io.addOutputEntry(Proxima.io.output.warning("This shell connection is already in the target shells list. Skipping...")))
            end if
        else
            print(Proxima.io.addOutputEntry(Proxima.io.output.error("Couldn't tunnel via SSH or FTP, ports are closed.")))
        end if
    else if targetUsers.len > 0 and Proxima.utils.indexesOf(targetUsers, "password", "UNKNOWN") == true then
        targetExploits = Proxima.sessions.getSessionValue("targetExploits")
        if Proxima.utils.indexesOf(targetExploits, "result", 3) then
            for targetUser in targetUsers
                print(Proxima.io.addOutputEntry(Proxima.io.output.progress("Trying to tunnel shell by SSH or FTP protocol via <b>" + targetUser.username + "</b> privilege. <b>[IP:" + targetIP + "]</b>")))
                sshShell = self.getShellViaSSH(targetUser.username, targetUser.password)
                ftpShell = self.getShellViaFTP(targetUser.username, targetUser.password)
        
                if sshShell != null then
                    targetShell = sshShell
                else
                    if ftpShell != null then
                        targetShell = ftpShell
                    end if
                end if
        
                if typeof(targetShell) == "shell" then
                    additionResult = self.addShellConnection(targetShell, targetUser.username)
                    if additionResult then
                        print(Proxima.io.addOutputEntry(Proxima.io.output.success("Tunneled target via shell successfuly!")))
                    else
                        print(Proxima.io.addOutputEntry(Proxima.io.output.warning("This shell connection is already in the target shells list. Skipping...")))
                    end if
                else
                    print(Proxima.io.addOutputEntry(Proxima.io.output.error("Couldn't tunnel via SSH or FTP, ports are closed.")))
                end if
            end for
        else
            print(Proxima.io.addOutputEntry(Proxima.io.output.error("No user information found to be used for tunnelling, please execute an exploit first...")))
        end if
    else
        print(Proxima.io.addOutputEntry(Proxima.io.output.error("No user information found to be used for tunnelling, please execute an exploit first...")))
    end if
end function

Proxima.exploit.createJumpFile = function (targetShell, userPassword)
    targetComputer = targetShell.host_computer
    shellCode = "rootShell = get_shell(" + char(34) + "root" + char(34) + ", " + char(34) + str(userPassword) + char(34) + ")" + char(10)
    shellCode = shellCode + "get_custom_object.acquiredShell = rootShell"
    createJumpFile = targetComputer.touch("/home/guest", "root_shell.src")
    setContent = targetComputer.File("/home/guest/root_shell.src").set_content(shellCode)
    if typeof(setContent) == "string" or setContent == 0 then
        // ERROR
    else
        if createJumpFile == 1 then
            // SUCCESS
        else
            // ERROR
        end if
    end if
    buildScript = targetShell.build("/home/guest/root_shell.src", "/home/guest")
    if buildScript != "" then
        return false
    else
        return true
    end if
end function

Proxima.exploit.jumpShell = function ()
    targetShells = Proxima.sessions.getSessionValue("targetShells")
    if targetShells.len > 0 then
        targetUsers = Proxima.sessions.getSessionValue("targetUsers")
        if Proxima.utils.indexesOf(targetUsers, "password", "UNKNOWN") == false then     
            targetShell = targetShells[0].shell_object
            createJumpFile = self.createJumpFile(targetShell, targetUsers[0].password)
            if createJumpFile then
                launchScript = targetShell.launch("/home/guest/root_shell")
                if launchScript == 0 or typeof(launchScript) == "string" then
                    print(Proxima.io.addOutputEntry(Proxima.io.output.error("Couldn't launch jump file!")))
                else
                    print(Proxima.io.addOutputEntry(Proxima.io.output.success("Successfuly launched root shell.")))    
                    acquiredShell = get_custom_object.acquiredShell
                    if acquiredShell != null then
                        additionResult = self.addShellConnection(acquiredShell, targetUsers[0].username)
                        print(Proxima.io.addOutputEntry(Proxima.io.output.success("Tunneled target via shell successfuly!")))
                        print(Proxima.io.addOutputEntry(Proxima.io.output.info("Updated the target shells list.")))
                    else
                        print(Proxima.io.addOutputEntry(Proxima.io.output.error("Couldn't acquire root privileges!")))
                    end if
                end if
            else
                print(Proxima.io.addOutputEntry(Proxima.io.output.error("Couldn't create jump file!")))
            end if
        else if Proxima.utils.indexesOf(targetUsers, "password", "UNKNOWN") == true then
            for targetUser in targetUsers
                targetShell = targetShells[0].shell_object
                createJumpFile = self.createJumpFile(targetShell, Proxima.engine.getSettings().injection_password)
                if createJumpFile then
                    launchScript = targetShell.launch("/home/guest/root_shell")
                    if launchScript == 0 or typeof(launchScript) == "string" then
                        acquiredShell = get_custom_object.acquiredShell
                        if typeof(acquiredShell) == "shell" then
                            additionResult = self.addShellConnection(acquiredShell, targetUser.username)
                            if additionResult then
                                print(Proxima.io.addOutputEntry(Proxima.io.output.success("Tunneled target via shell successfuly!")))
                                print(Proxima.io.addOutputEntry(Proxima.io.output.info("Updated the target shells list.")))
                            end if
                        end if
                    end if
                else
                    print(Proxima.io.addOutputEntry(Proxima.io.output.error("Couldn't create jump file!")))
                end if
            end for
        end if
    else
        print(Proxima.io.addOutputEntry(Proxima.io.output.error("No open shells found to perform a jump!")))
    end if
end function

// ------------------------------------------------------------------------------------------------------------

Proxima.exploit.cleanUpLogs = function ()
    targetShells = Proxima.sessions.getSessionValue("targetShells")
    if targetShells.len > 0 then
        targetShell = targetShells[0]
        if targetShell.owner == "root" then
            logFile = targetShell.shell_object.host_computer.File("/var/system.log")
            deletionResultLog = logFile.delete
            if typeof(deletionResultLog) == "string" and deletionResultLog.len > 0 then
                print(Proxima.io.addOutputEntry(Proxima.io.output.error("Couldn't delete system logs: " + deletionResultLog)))
            else
                print(Proxima.io.addOutputEntry(Proxima.io.output.success("Cleaned up system logs successfuly!")))
            end if
        else
            print(Proxima.io.addOutputEntry(Proxima.io.output.error("Couldn't delete system logs due to insufficent user privilege!")))
        end if
    else
        print(Proxima.io.addOutputEntry(Proxima.io.output.error("No open shells found, please execute an exploit first.")))
    end if
end function

Proxima.exploit.corruptComputer = function ()
    targetShells = Proxima.sessions.getSessionValue("targetShells")
    if targetShells.len > 0 then
        targetShell = targetShells[0]
        if targetShell.owner == "root" then
            targetComputer = targetShell.shell_object.host_computer
            imgFile = targetComputer.File("/boot/kernel.img")
            deletionResultImage = imgFile.delete
            if typeof(deletionResultImage) == "string" and deletionResultImage.len > 0 then
                print(Proxima.io.addOutputEntry(Proxima.io.output.error("There was an error while deleting <b>kernel.img</b> file: " + deletionResultImage)))
            else
                print(Proxima.io.addOutputEntry(Proxima.io.output.success("<b>kernel.img</b> file got deleted successfully!")))
            end if
            print(Proxima.io.addOutputEntry(Proxima.io.output.success("Deleting system logs to leave no trace...")))
            logFile = targetComputer.File("/var/system.log")
            deletionResultLog = logFile.delete
            if typeof(deletionResultLog) == "string" and deletionResultLog.len > 0 then
                print(Proxima.io.addOutputEntry(Proxima.io.output.error("There was an error while deleting <b>system.log</b> file: " + deletionResultLog)))
            else
                print(Proxima.io.addOutputEntry(Proxima.io.output.success("<b>system.log</b> file got deleted successfully.")))
            end if
            print(Proxima.io.addOutputEntry(Proxima.io.output.progress("Rebooting the remote computer to complete system corruption...")))
            launchBinary = targetShell.shell_object.launch("/bin/reboot")
            if launchBinary == null or launchBinary == 0 or typeof(launchBinary) == "string" then
                print(Proxima.io.addOutputEntry(Proxima.io.output.error("Couldn't reboot desired computer! You have to do it manually...")))
                if typeof(launchBinary) == "string" then print(Proxima.io.addOutputEntry(Proxima.io.output.error("Reason of failure: " + launchBinary)))
            else
                print(Proxima.io.addOutputEntry(Proxima.io.output.success("Successfuly rebooted! <b>[IP:" + targetShell.public_ip + "]</b>")))
            end if
        else
            print(Proxima.io.addOutputEntry(Proxima.io.output.error("Couldn't delete boot image due to insufficent user privilege!")))
        end if
    else
        print(Proxima.io.addOutputEntry(Proxima.io.output.error("No open shells found, please execute an exploit first.")))
    end if
end function

Proxima.exploit.putTools = function ()
    targetShells = Proxima.sessions.getSessionValue("targetShells")
    if targetShells.len > 0 then
        targetShell = targetShells[0]

        setUploadTo = "/root"
        if targetShell.owner != "root" then setUploadTo = "/home/" + targetShell.owner

        toolsFolder = Proxima.globals.myPC.File(Proxima.settings.toolsFolder)
    
        if setUploadTo != null and toolsFolder != null then
            fileList = Proxima.utils.collectFiles(toolsFolder)
            if fileList.len > 0 then
                for filePath in fileList
                    toolFile = Proxima.globals.myPC.File(filePath)
                    fileName = filePath.split("/")[-1].trim
                    print(Proxima.io.addOutputEntry(Proxima.io.output.progress("Attempting to upload <b>" + fileName + "</b>...")))
                    print(Proxima.io.addOutputEntry(Proxima.io.output.line))
                    uploadFile = Proxima.globals.myShell.scp(toolFile.path, setUploadTo, targetShell.shell_object)
                    Proxima.io.addTransferProcess(toolFile.size)
                    print(Proxima.io.addOutputEntry(Proxima.io.output.line))
                    Proxima.io.clearScreen()
                    wait(0.5)
                    if typeof(uploadFile) == "string" or typeof(uploadFile) == null then
                        print(Proxima.io.addOutputEntry(Proxima.io.output.error("Couldn't upload <b>" + fileName + "</b>!")))
                        print(Proxima.io.addOutputEntry(Proxima.io.output.error("Reason of failure: " + uploadFile)))
                    else
                        print(Proxima.io.addOutputEntry(Proxima.io.output.success("Successfuly uploaded <b>" + fileName + "</b>!")))
                    end if
                end for
            else
                print(Proxima.io.addOutputEntry(Proxima.io.output.error("No file or folder found in given local upload folder!")))
            end if
        else
            print(Proxima.io.addOutputEntry(Proxima.io.output.error("No valid upload folder found in given directory!")))
        end if
    else
        print(Proxima.io.addOutputEntry(Proxima.io.output.error("No open shells found, please execute an exploit first.")))
    end if
end function

Proxima.exploit.injectRshell = function (shellID)
    targetShells = Proxima.sessions.getSessionValue("targetShells")
    if targetShells.len > 0 then
        if shellID != null and targetShells.hasIndex(shellID - 1) then
            targetShell = targetShells[shellID - 1]

            userFolder = "/root"
            if targetShell.owner != "root" then userFolder = "/home/" + targetShell.owner

            foundedLocation = null
            for metaxploitLocation in Proxima.settings.metaxploitLocations
                checkIfExists = Proxima.globals.myPC.File(metaxploitLocation)
                if checkIfExists != null then
                    foundedLocation = Proxima.globals.myPC.File(metaxploitLocation)
                    break
                end if
            end for
            if foundedLocation != null then
                print(Proxima.io.addOutputEntry(Proxima.io.output.progress("Attempting to upload <b>metaxploit.so</b>...")))
                print(Proxima.io.addOutputEntry(Proxima.io.output.line))
                uploadMetaxploit = Proxima.globals.myShell.scp(foundedLocation.path, userFolder, targetShell.shell_object)
                Proxima.io.addTransferProcess(foundedLocation.size)
                print(Proxima.io.addOutputEntry(Proxima.io.output.line))
                Proxima.io.clearScreen()
                wait(0.5)
            end if

            rshellCode = null
            rshellCode = rshellCode + "metaxploit = null" + char(10)
            rshellCode = rshellCode + "include_meta = include_lib(" + char(34) + userFolder + "/metaxploit.so" + char(34) + ")" + char(10)
            rshellCode = rshellCode + "if include_meta != null then" + char(10)
            rshellCode = rshellCode + char(9) + "metaxploit = include_meta" + char(10)
            rshellCode = rshellCode + "end if" + char(10)
            rshellCode = rshellCode + "if metaxploit != null then" + char(10)
            rshellCode = rshellCode + char(9) + "metaxploit.rshell_client(" + char(34) + Proxima.engine.getSettings().rshell_ip + char(34) + ", " + Proxima.engine.getSettings().rshell_port + ", " + char(34) + Proxima.engine.getSettings().rshell_proc_name + char(34) + ")" + char(10)
            rshellCode = rshellCode + char(9) + "get_custom_object.result = 1" + char(10)
            rshellCode = rshellCode + "else" + char(10)
            rshellCode = rshellCode + char(9) + "get_custom_object.result = 0" + char(10)
            rshellCode = rshellCode + "end if" + char(10)

            createRshellFile = targetShell.shell_object.host_computer.touch(userFolder, "rshell.src")
            setRshellFileContent = targetShell.shell_object.host_computer.File(userFolder + "/rshell.src").set_content(rshellCode)
            buildRshellFile = targetShell.shell_object.build(userFolder + "/rshell.src", userFolder)
            
            get_custom_object.metaxploitLocations = Proxima.settings.metaxploitLocations
            launchRshellFile = targetShell.shell_object.launch(userFolder + "/rshell")
            rshellResult = get_custom_object.result

            if rshellResult == 1 then
                print(Proxima.io.addOutputEntry(Proxima.io.output.success("Successfuly injected reverse shell, you can connect it via reverse shell interface.")))
            else if rshellResult == 0 then
                print(Proxima.io.addOutputEntry(Proxima.io.output.error("Couldn't inject reverse shell...")))
            end if
        else
            print(Proxima.io.addOutputEntry(Proxima.io.output.error("No open shell found with specified ID. <b>[ID:" + shellID + "]</b>")))
        end if
    else
        print(Proxima.io.addOutputEntry(Proxima.io.output.error("No open shells found to inject reverse shell, please execute an exploit first.")))
    end if
end function

// ------------------------------------------------------------------------------------------------------------

Proxima.exploit.colorizePrivilegeLevel = function (shellPrivilege)
    if shellPrivilege == 0 then
        return "ROOT#9370DB"
    else if shellPrivilege == 1 then
        return "USER#08FF57"
    else if shellPrivilege == 2 then
        return "GUEST#FFDD00"
    end if
end function

Proxima.exploit.colorizeExploitResult = function (exploitResult)
    if exploitResult == 0 then
        return "SHELL#9370DB"
    else if exploitResult == 1 then
        return "COMPUTER#08FF57"
    else if exploitResult == 2 then
        return "FILE#00FFBB"
    else if exploitResult == 3 then
        return "PAYLOAD#FFDD00"
    else if exploitResult == 4 then
        return "FAILED#FF1548"
    else
        return "UNKNOWN#0091FF"
    end if
end function

Proxima.exploit.colorizePassword = function (userPassword)
    if userPassword == "UNKNOWN" then
        return userPassword + "#0091FF"
    else if userPassword.len == 32 then
        return userPassword + "#FFDD00"
    else if userPassword.len < 32 then
        return userPassword + "#08FF57"
    end if
end function

Proxima.exploit.displayPortInfo = function ()
    header_list = ["ID", "PORT", "STATE", "SERVICE", "VERSION", "LAN_IP"]
    content_list = []
    targetPorts = Proxima.sessions.getSessionValue("targetPorts")
    for targetPort in targetPorts
        p_id = str(targetPort.id)
        p_number = str(targetPort.port_number)
        p_state = null
        if targetPort.state == "OPEN" then p_state = "OPEN#08FF57"
        if targetPort.state == "CLOSED" then p_state = "CLOSED#FF1548"
        p_service = targetPort.service
        p_version = targetPort.version
        p_lan_ip = targetPort.lan_ip
        content_list.push([ p_id, p_number, p_state, p_service, p_version, p_lan_ip ])
    end for

    Proxima.utils.formatList(header_list, content_list)
end function

Proxima.exploit.displayLibraryInfo = function ()
    header_list = ["ID", "LIBRARY_NAME", "VERSION", "PATH"]
    content_list = []
    targetLibraries = Proxima.sessions.getSessionValue("targetLibraries")
    for targetLibrary in targetLibraries
        l_id = str(targetLibrary.id)
        l_name = targetLibrary.lib_name
        l_version = targetLibrary.version
        l_path = targetLibrary.path
        content_list.push([ l_id, l_name, l_version, l_path ])
    end for

    Proxima.utils.formatList(header_list, content_list)
end function

Proxima.exploit.displayExploitInfo = function ()
    header_list = []
    if self.isLocal() then
        header_list = ["ID", "LIBRARY_NAME", "MEM_ADDRESS", "UNSEC_ZONE", "RESULT"]
    else
        header_list = ["ID", "PORT", "MEM_ADDRESS", "UNSEC_ZONE", "RESULT"]
    end if

    content_list = []
    targetExploits = Proxima.sessions.getSessionValue("targetExploits")
    for targetExploit in targetExploits
        e_id = str(targetExploit.id)
        e_mem = targetExploit.memAddr
        e_uz = targetExploit.unsecZone
        e_result = self.colorizeExploitResult(targetExploit.result)
        if self.isLocal() then
            e_name = targetExploit.lib_name
            content_list.push([ e_id, e_name, e_mem, e_uz, e_result ])
        else
            e_port_number = str(targetExploit.port_number)
            content_list.push([ e_id, e_port_number, e_mem, e_uz, e_result ])
        end if
    end for

    Proxima.utils.formatList(header_list, content_list)
end function

Proxima.exploit.displayUserInfo = function ()
    header_list = ["ID", "USERNAME", "PASSWORD"]
    content_list = []
    targetUsers = Proxima.sessions.getSessionValue("targetUsers")
    for targetUser in targetUsers
        u_id = str(targetUser.id)
        u_username = targetUser.username
        u_password = self.colorizePassword(targetUser.password)
        content_list.push([ u_id, u_username, u_password ])
    end for

    Proxima.utils.formatList(header_list, content_list)
end function

Proxima.exploit.displayShellInfo = function ()
    header_list = ["ID", "OWNER", "PRIVILEGE", "PUBLIC_IP", "LOCAL_IP"]
    content_list = []
    targetShells = Proxima.sessions.getSessionValue("targetShells")
    for targetShell in targetShells
        s_id = str(targetShell.id)
        s_owner = targetShell.owner
        s_privilege_level = self.colorizePrivilegeLevel(targetShell.privilege_level)
        s_public_ip = targetShell.public_ip
        s_local_ip = targetShell.local_ip
        content_list.push([ s_id, s_owner, s_privilege_level, s_public_ip, s_local_ip ])
    end for

    Proxima.utils.formatList(header_list, content_list)
end function

Proxima.exploit.displayMailInfo = function ()
    header_list = ["ID", "OWNER", "MAIL", "PASSWORD"]
    content_list = []
    targetMails = Proxima.sessions.getSessionValue("targetMails")
    for targetMail in targetMails
        m_id = str(targetMail.id)
        m_owner = targetMail.owner
        m_mail_addr = targetMail.mail_addr
        m_password = self.colorizePassword(targetMail.password)
        content_list.push([ m_id, m_owner, m_mail_addr, m_password ])
    end for

    Proxima.utils.formatList(header_list, content_list)
end function

Proxima.exploit.displayBankInfo = function ()
    header_list = ["ID", "OWNER", "ACCOUNT", "PASSWORD"]
    content_list = []
    targetBanks = Proxima.sessions.getSessionValue("targetBanks")
    for targetBank in targetBanks
        b_id = str(targetBank.id)
        b_owner = targetBank.owner
        b_account = targetBank.account
        b_password = self.colorizePassword(targetBank.password)
        content_list.push([ b_id, b_owner, b_account, b_password ])
    end for

    Proxima.utils.formatList(header_list, content_list)
end function

Proxima.exploit.analyzeExploitResults = function ()
    analyzeResult = []

    targetSession = Proxima.sessions.getSession(Proxima.sessions.getSessionValue("id"))

    targetExploits = targetSession.targetExploits
    targetShells = targetSession.targetShells
    targetUsers = targetSession.targetUsers
    targetMails = targetSession.targetMails
    targetBanks = targetSession.targetBanks

    isRshellAvailable = false
    if targetShells.len > 0 then isRshellAvailable = true

    hasRootShell = false
    hasUserShell = false
    hasGuestShell = false
    if targetShells.len > 0 and Proxima.utils.indexesOf(targetShells, "owner", "root") then hasRootShell = true
    if targetShells.len > 0 and Proxima.utils.indexesOf(targetShells, "privilege_level", 1) then hasUserShell = true
    if targetShells.len > 0 and Proxima.utils.indexesOf(targetShells, "owner", "guest") then hasGuestShell = true

    hasUsernames = false
    if targetUsers.len > 0 then hasUsernames = true

    hasPasswords = false
    if targetUsers.len > 0 and Proxima.utils.indexesOf(targetUsers, "password", "UNKNOWN") == false then hasPasswords = true

    hasMails = false
    hasBanks = false
    if targetMails.len > 0 then hasMails = true
    if targetBanks.len > 0 then hasBanks = true

    isJumpAvailable = 0
    if targetShells.len > 0 and targetUsers.len > 0 and Proxima.utils.indexesOf(targetUsers, "password", "UNKNOWN") == false then isJumpAvailable = 1
    if targetShells.len > 0 and targetUsers.len > 0 and Proxima.utils.indexesOf(targetUsers, "password", "UNKNOWN") and Proxima.utils.indexesOf(targetExploits, "result", 3) then isJumpAvailable = 2

    isTunnelAvailable = 0
    if self.isSSHAvailable() and targetUsers.len > 0 and Proxima.utils.indexesOf(targetUsers, "password", "UNKNOWN") == false then isTunnelAvailable = 1
    if self.isSSHAvailable() and targetUsers.len > 0 and Proxima.utils.indexesOf(targetUsers, "password", "UNKNOWN") and Proxima.utils.indexesOf(targetExploits, "result", 3) then isTunnelAvailable = 2

    shellNum = 0
    compNum = 0
    fileNum = 0
    payloadNum = 0
    failedNum = 0
    unknownNum = 0

    if targetExploits.len > 0 then
        for targetExploit in targetExploits
            if targetExploit.result == 0 then
                shellNum = shellNum + 1
            else if targetExploit.result == 1 then
                compNum = compNum + 1
            else if targetExploit.result == 2 then
                fileNum = fileNum + 1
            else if targetExploit.result == 3 then
                payloadNum = payloadNum + 1
            else if targetExploit.result == 4 then
                failedNum = failedNum + 1
            else if targetExploit.result == 5 then
                unknownNum = unknownNum + 1
            end if
        end for
    end if

    analyzeResult.push(shellNum)
    analyzeResult.push(compNum)
    analyzeResult.push(fileNum)
    analyzeResult.push(payloadNum)
    analyzeResult.push(failedNum)
    analyzeResult.push(unknownNum)

    if hasRootShell == true then analyzeResult.push("<color=#00FF00>" + char(164) + "</color>")
    if hasRootShell == false then analyzeResult.push("<color=#FF0000>" + char(164) + "</color>")

    if hasUserShell == true then analyzeResult.push("<color=#00FF00>" + char(164) + "</color>")
    if hasUserShell == false then analyzeResult.push("<color=#FF0000>" + char(164) + "</color>")

    if hasGuestShell == true then analyzeResult.push("<color=#00FF00>" + char(164) + "</color>")
    if hasGuestShell == false then analyzeResult.push("<color=#FF0000>" + char(164) + "</color>")

    if hasUsernames == true then analyzeResult.push("<color=#00FF00>" + char(164) + "</color>")
    if hasUsernames == false then analyzeResult.push("<color=#FF0000>" + char(164) + "</color>")

    if hasPasswords == true then analyzeResult.push("<color=#00FF00>" + char(164) + "</color>")
    if hasPasswords == false then analyzeResult.push("<color=#FF0000>" + char(164) + "</color>")

    if hasMails == true then analyzeResult.push("<color=#00FF00>" + char(164) + "</color>")
    if hasMails == false then analyzeResult.push("<color=#FF0000>" + char(164) + "</color>")

    if hasBanks == true then analyzeResult.push("<color=#00FF00>" + char(164) + "</color>")
    if hasBanks == false then analyzeResult.push("<color=#FF0000>" + char(164) + "</color>")

    if isJumpAvailable == 0 then
        analyzeResult.push("<color=#FF0000>" + char(164) + "</color>")
        analyzeResult.push("<color=#FF0000>" + char(164) + "</color>")
    else if isJumpAvailable == 1 then
        analyzeResult.push("<color=#00FF00>" + char(164) + "</color>")
        analyzeResult.push("<color=#FF0000>" + char(164) + "</color>")
    else if isJumpAvailable == 2 then
        analyzeResult.push("<color=#FF0000>" + char(164) + "</color>")
        analyzeResult.push("<color=#00FF00>" + char(164) + "</color>")
    end if

    if isTunnelAvailable == 0 then
        analyzeResult.push("<color=#FF0000>" + char(164) + "</color>")
        analyzeResult.push("<color=#FF0000>" + char(164) + "</color>")
    else if isTunnelAvailable == 1 then
        analyzeResult.push("<color=#00FF00>" + char(164) + "</color>")
        analyzeResult.push("<color=#FF0000>" + char(164) + "</color>")
    else if isTunnelAvailable == 2 then
        analyzeResult.push("<color=#FF0000>" + char(164) + "</color>")
        analyzeResult.push("<color=#00FF00>" + char(164) + "</color>")
    end if

    if isRshellAvailable == true then analyzeResult.push("<color=#00FF00>" + char(164) + "</color>")
    if isRshellAvailable == false then analyzeResult.push("<color=#FF0000>" + char(164) + "</color>")

    return analyzeResult
end function

Proxima.exploit.generateAnalyzeReport = function (analyzeResult)
    asciiTemplate = []

    asciiTemplate = asciiTemplate + ["/ START_ANALYZE"]
    exploitResults = [
        "|-- AVAILABLE_EXPLOITS",
        "|  |-- SHELL: <val0>",
        "|  |-- COMPUTER: <val1>",
        "|  |-- FILE: <val2>",
        "|  |-- PAYLOAD: <val3>",
        "|  |-- FAILED: <val4>",
        "|  |-- UNKNOWN: <val5>",
        "|-- SHELL_ACCESS",
        "|  |-- ROOT <val6>",
        "|  |-- USER <val7>",
        "|  |-- GUEST <val8>",
        "|-- USER_INFO",
        "|  |-- USERNAMES <val9>",
        "|  |-- PASSWORDS <val10>",
        "|  |-- MAILS <val11>",
        "|  |-- BANKS <val12>",
    ]
    asciiTemplate = asciiTemplate + exploitResults

    remoteResults = [
        "|---- JUMP",
        "|     |-- DIRECT_ACCESS <val13>",
        "|     |-- BRUTE_FORCE <val14>",
        "|---- TUNNEL",
        "|     |-- DIRECT_ACCESS <val15>",
        "|     |-- BRUTE_FORCE <val16>",   
    ]
    localResults = [
        "|---- SUDO",
        "|     |-- DIRECT_ACCESS <val13>",
        "|     |-- BRUTE_FORCE <val14>"
    ]

    asciiTemplate = asciiTemplate + ["|---- RSHELL <val17>"]
    asciiTemplate = asciiTemplate + ["\ END_ANALYZE"]

    for line in asciiTemplate
        for i in range(0, analyzeResult.len - 1)
            placeholderTag = "<val" + str(i) + ">"
            valueTag = line.split(" ")[-1]
            if placeholderTag == valueTag then
                line.replace(placeholderTag, analyzeResult[i])
            end if
        end for
        print(line)
    end for
end function

// ------------------------------------------------------------------------------------------------------------

Proxima.exploit.treeDirectory = function(targetComputer, givenDirectory, entryIndent = "")
    treeLines = []
    fileHandler = targetComputer.File(givenDirectory)

    if fileHandler.is_folder() then
        getFolders = fileHandler.get_folders()
        getFiles = fileHandler.get_files()
        allEntries = getFolders + getFiles
        for entryItem in allEntries
            isLast = false
            if entryItem.name == allEntries[allEntries.len - 1].name then isLast = true

            entryPrefix = entryIndent
            if isLast then
                entryPrefix = entryPrefix + "`-- "
            else
                entryPrefix = entryPrefix + "|-- "
            end if

            treeLines.push(entryPrefix + entryItem.name)

            if entryItem.is_folder() then
                newIndent = entryIndent
                if isLast then
                    newIndent = newIndent + "    "
                else
                    newIndent = newIndent + "|   "
                end if
                subtreeLines = treeDirectory(targetComputer, entryItem.path, newIndent)
                treeLines = treeLines + subtreeLines
            end if
        end for
    end if

    return treeLines
end function

Proxima.exploit.getProcesses = function (targetComputer)
    showProcs = targetComputer.show_procs
    processesList = showProcs.split(char(10))[1:]

    activeProcesses = []
    for processItem in processesList
        parsedItem = processItem.split(" ")
        processMap = {}
        processMap.pid = parsedItem[1]
        processMap.name = parsedItem[4]
        processMap.owner = parsedItem[0]
        processMap.cpu_usage = parsedItem[2]
        processMap.mem_usage = parsedItem[3]
        activeProcesses.push(processMap)
    end for

    return activeProcesses
end function

// ------------------------------------------------------------------------------------------------------------

Proxima.exploit.createPortMap = function (portObject, targetRouter)
    portMap = {}
    portMap["status"] = "open"
    if is_closed(portObject) then portMap["status"] = "closed"
    lanIP = "unknown"
    if targetRouter.port_info(portObject).indexOf(" ") != null then
        portInfo = targetRouter.port_info(portObject)
        lanIP = portObject.get_lan_ip
    end if
    portInfo = targetRouter.port_info(portObject)
    parsedInfo = portInfo.split(" ")
    portMap["port_number"] = portObject.port_number
    portMap["service_name"] = parsedInfo[0]
    portMap["service_version"] = parsedInfo[1]
    portMap["lan_ip"] = lanIP
    return portMap
end function

Proxima.exploit.softNetworkScan = function (targetIP)
    scanData = { "ip": targetIP, "is_reachable": true, "ports": [], "devices": [], "main_router": true, "type": "router", "kernel_version": null, "has_firewall": false, "is_owner": false }
    targetRouter = get_router(targetIP)
    if targetRouter != null then
        scanData["ip"] = targetRouter.local_ip

        for port in targetRouter.device_ports(targetRouter.local_ip)
            portMap = self.createPortMap(port, targetRouter)
            scanData["ports"].push(portMap)
        end for

        routerFirewalls = targetRouter.firewall_rules()
        if typeof(routerFirewalls) == "list" and routerFirewalls.len > 0 then scanData["has_firewall"] = true
        scanData["kernel_version"] = targetRouter.kernel_version

        targetDevices = targetRouter.devices_lan_ip
        for deviceIP in targetDevices
            if deviceIP == targetRouter.local_ip then
                continue
            end if
            deviceMap = { "ip": deviceIP, "is_reachable": true, "ports": [], "devices": [], "main_router": false, "type": "device", "kernel_version": null, "has_firewall": false, "is_owner": false } 
            for port in targetRouter.device_ports(deviceIP)
                if port.port_number == 8080 then deviceMap["type"] = "router"
                devicePortMap = self.createPortMap(port, targetRouter)
                deviceMap["ports"].push(devicePortMap)
            end for
            scanData["devices"].push(deviceMap)
        end for
    else
        scanData["is_reachable"] = false
    end if

    return [scanData]
end function

Proxima.exploit.deepNetworkScan = function (targetIP, scannedIPs)
    scanResults = []

    if scannedIPs.indexOf(targetIP) != null then
        return scanResults
    end if

    isReachable = Proxima.globals.myShell.ping(targetIP)

    isOwner = false
    if targetIP == Proxima.globals.myPC.local_ip then isOwner = true

    scanData = { "ip": targetIP, "is_reachable": isReachable, "ports": [], "devices": [], "main_router": false, "type": "device", "kernel_version": null, "has_firewall": false, "is_owner": isOwner }

    if not isReachable then
        scanResults.push(scanData)
        return scanResults
    end if

    scannedIPs.push(targetIP)

    targetRouter = get_router(targetIP)
    if targetRouter == null then targetRouter = get_router(scannedIPs[0])

    for port in targetRouter.device_ports(targetIP)
        portMap = self.createPortMap(port, targetRouter)
        scanData["ports"].push(portMap)
    end for

    if targetRouter.local_ip == targetIP then
        routerFirewalls = targetRouter.firewall_rules()
        if typeof(routerFirewalls) == "list" and routerFirewalls.len > 0 then scanData["has_firewall"] = true
        if get_router(targetRouter.public_ip).local_ip == scanData["ip"] then scanData["main_router"] = true
        scanData["kernel_version"] = targetRouter.kernel_version
        scanData["type"] = "router"

        targetDevices = targetRouter.devices_lan_ip
        for device in targetDevices
            if scannedIPs.indexOf(device) != null or device == targetIP then
                continue
            end if
            deviceResults = deepNetworkScan(device, scannedIPs)
            for result in deviceResults
                scanData["devices"].push(result)
            end for
        end for
    end if

    scanResults.push(scanData)
    return scanResults
end function

Proxima.exploit.beautifyNetworkScan = function (networkData)
    for data in networkData
        deviceTypePrefix = null
        portIndent = "|     "

        if not data["is_reachable"] then
            deviceTypePrefix = "|---- DEVICE"
            print("<b>" + deviceTypePrefix + " [" + data["ip"] + "]</b>")
            print("<color=#FF1548>" + portIndent + "|- IP_NOT_REACHABLE</color>")
            continue
        end if

        isCCTV = false
        for port in data["ports"]
            if port["port_number"] == 37777 then
                isCCTV = true
                break
            end if
        end for

        if isCCTV then
            deviceTypePrefix = "|---- CCTV"
            portIndent = "|     "
        else if data["type"] == "router" then
            routerPrefix = null
            if data["main_router"] then
                deviceTypePrefix = "|-- MAIN ROUTER"
            else
                deviceTypePrefix = "|-- ROUTER/SWITCH"
            end if
            portIndent = "|   "
        else
            deviceTypePrefix = "|---- COMPUTER"
            portIndent = "|     "
        end if

        if data["has_firewall"] then
            if data["kernel_version"] != null then
                print("<color=#FFC466><b>" + deviceTypePrefix + " [" + data["ip"] + "|KERNEL_V:" + data["kernel_version"] + "]</b></color>")
            else
                print("<color=#FFC466><b>" + deviceTypePrefix + " [" + data["ip"] + "]</b></color>")
            end if
        else
            if data["kernel_version"] != null then
                print("<b>" + deviceTypePrefix + " [" + data["ip"] + "|KERNEL_V:" + data["kernel_version"] + "]</b>")
            else
                isOwner = null
                if data["is_owner"] then isOwner = "<b><color=#08FF57>[YOU]</color></b>"
                print("<b>" + deviceTypePrefix + " [" + data["ip"] + "]</b>" + isOwner)
            end if
        end if

        if data["ports"].len > 0 then
            for port in data["ports"]
                portInfo = "PORT:" + port["port_number"] + "|" + port["status"].upper() + "|" + port["service_name"].upper() + "/" + port["service_version"].upper

                if data["main_router"] and port["lan_ip"] != data["ip"] then
                    portInfo = portInfo + "|ROUTED_TO:" + port["lan_ip"]
                end if

                if port["status"].upper() == "OPEN" then
                    print("<color=#08FF57>" + portIndent + "|- " + portInfo + "</color>")
                else
                    print("<color=#FF1548>" + portIndent + "|- " + portInfo + "</color>")
                end if
            end for
        else
            print("<color=#FF1548>" + portIndent + "|- NO_OPEN_PORTS</color>")
        end if

        if data["devices"].len > 0 then
            self.beautifyNetworkScan(data["devices"])
        end if
    end for
end function

Proxima.exploit.scanLAN = function ()
    print("<b>/ START_SCANLAN >></b>")
    print("<b>| START_PROBE [PUBLIC_IP:" + get_router.public_ip + "]</b>")
    startingIP = get_router.local_ip
    scannedIPs = []
    networkData = deepNetworkScan(startingIP, scannedIPs)
    beautifyNetworkScan(networkData)
    print("<b>| END_PROBE</b>")
    print("<b>\ END_SCANLAN <<</b>")
end function