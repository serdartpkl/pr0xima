Proxima.ports = {}

Proxima.ports.isRouter = function (targetIP)
    if get_router(targetIP) != null then
        return true
    else
        return false
    end if
end function

Proxima.ports.createRouter = function (targetIP)
    targetRouter = get_router(targetIP)
    if is_lan_ip(targetIP) and self.isRouter(targetIP) != true then targetRouter = get_router()
    return targetRouter
end function

Proxima.ports.isPingable = function (targetIP)
    if Proxima.globals.myShell.ping(targetIP) then return true
end function

Proxima.ports.checkTargetIP = function (targetIP = null)
    if targetIP != null and is_valid_ip(targetIP) then
        if self.isPingable(targetIP) then
            return true
        else
            return false
        end if
    else
        return null
    end if
end function

Proxima.ports.dumpRouter = function ()
end function

Proxima.ports.scanRouter = function ()
end function

Proxima.ports.checkPorts = function (targetIP = null)
    foundedIndex = Proxima.helpers.indexesOf(Proxima.sessions.activeSessions, "targetIP", targetIP)
    sessionID = foundedIndex + 1
    if foundedIndex != null and targetIP == Proxima.sessions.getSessionValue(sessionID, "targetIP") then
        print(Proxima.io.addOutputEntry(Proxima.io.output.info("You've already created an active session with given IP. <b>[ID:" + (sessionID) + "]</b>")))
        setSession = Proxima.sessions.setSession(sessionID)
        if setSession then
            print(Proxima.io.addOutputEntry(Proxima.io.output.success("Switched to active session successfully! <b>[ID:" + (sessionID) + "]</b>")))
            Proxima.io.inputString = Proxima.io.output.colorize("<b>pr0xima</b>", "#FFC466") + Proxima.io.output.colorize("@", "#08FF57") + Proxima.io.output.colorize("[" + Proxima.sessions.getSessionValue(foundedIndex + 1, "targetIP") + "]", "#FF1548") + Proxima.io.output.colorize("> ", "#008DFF")
            return true
        end if
    else
        targetRouter = self.createRouter(targetIP)
        if targetRouter != null then
            publicIP = targetRouter.public_ip
            mainRouterIP = get_router(publicIP).local_ip
            candidateIP = mainRouterIP
            if is_lan_ip(targetIP) then candidateIP = targetIP

            scannedPorts = targetRouter.device_ports(mainIP)
            createRemoteSession = Proxima.sessions.addSession(1, targetIP, targetRouter)
            if createRemoteSession != null then
                setActiveSession = Proxima.sessions.setSession(createRemoteSession)
                if setActiveSession then
                else
                end if
            else
            end if
        end if
        mainIP = targetRouter.local_ip
        if is_lan_ip(targetIP) then mainIP = targetIP
        scannedPorts = targetRouter.device_ports(mainIP)
        createRemoteSession = Proxima.sessions.addSession(1, targetIP, targetRouter)
        if createRemoteSession != null then
            setActiveSession = Proxima.sessions.setSession(createRemoteSession)
            if setActiveSession then
                Proxima.io.inputString = Proxima.io.output.colorize("<b>pr0xima</b>", "#FFC466") + Proxima.io.output.colorize("@", "#08FF57") + Proxima.io.output.colorize("[" + targetIP + "]", "#FF1548") + Proxima.io.output.colorize("> ", "#008DFF")
                if scannedPorts.len == 1 or scannedPorts == null then
                    return false
                else
                    for scannedPort in scannedPorts
                        if scannedPort.port_number != 8080 then
                            portID = Proxima.sessions.getSessionValue(Proxima.sessions.targetSession, "targetPorts").len + 1
                            portNumber = scannedPort.port_number
                            portState = "OPEN"
                            if is_closed(scannedPort) then portState = "CLOSED"
                            portInfo = targetRouter.port_info(scannedPort).split(" ")
                            portService = portInfo[0]
                            portVersion = portInfo[1]
                            portLanIP = scannedPort.get_lan_ip
                            Proxima.sessions.addMapToSession(Proxima.sessions.targetSession, "targetPorts", { "id": portID, "port_number": portNumber, "state": portState, "service": portService, "version": portVersion, "lan_ip": portLanIP })
                        end if
                    end for
                    return true
                end if
            else
                print(Proxima.io.addOutputEntry(Proxima.io.output.error("Couldn't switch to created session due to unexpected error.")))
            end if
        else
            print(Proxima.io.addOutputEntry(Proxima.io.output.error("Couldn't create remote session due to unexpected error.")))
        end if
    end if
end function

Proxima.ports.dumpPort = function (targetPort)
    totalExploits = 0
    if targetPort.state == "OPEN" then
        targetIP = Proxima.sessions.getSessionValue(Proxima.sessions.targetSession, "targetIP")
        print(Proxima.io.addOutputEntry(Proxima.io.output.progress("Connecting to <b>" + targetIP + ":" + targetPort.port_number + "</b>...")))
        netSession = Proxima.globals.metaxploit.net_use(targetIP, targetPort.port_number)
        Proxima.io.clearScreen()
        wait(0.5)
        if netSession != null then
            libraryDump = netSession.dump_lib
            print(Proxima.io.addOutputEntry(Proxima.io.output.progress("Attempting to scan vulnerabilities... <b>[IP:" + targetIP + "|PORT:" + targetPort.port_number + "]</b>")))
            print(Proxima.io.addOutputEntry(Proxima.io.output.info("Library version found: <b>" + libraryDump.lib_name + " -> " + libraryDump.version + "</b>")))
            scanResult = Proxima.globals.metaxploit.scan(libraryDump)
            Proxima.io.addProgressBar()
            Proxima.io.clearScreen()
            wait(0.5)
            totalExploits = Proxima.exploit.parseScanEntries(scanResult, libraryDump, targetPort)
        else
            print(Proxima.io.addOutputEntry(Proxima.io.output.error("Unable to connect to port <b>" + targetPort.port_number + "</b>. It has firewall protection.")))
        end if 
    else
        print(Proxima.io.addOutputEntry(Proxima.io.output.error("Unable to connect to port <b>" + targetPort.port_number + "</b>. It is closed.")))
    end if
    return totalExploits
end function

Proxima.ports.scanPort = function (portID)
    targetIP = Proxima.sessions.getSessionValue(Proxima.sessions.targetSession, "targetIP")
    targetPorts = Proxima.sessions.getSessionValue(Proxima.sessions.targetSession, "targetPorts")
    if targetPorts.len > 0 then
        if portID != null and targetPorts.hasIndex(portID - 1) then
            totalExploits = 0
            targetPort = targetPorts[portID - 1]
            targetExploits = Proxima.sessions.getSessionValue(Proxima.sessions.targetSession, "targetExploits")
            if targetExploits.len > 0 and Proxima.helpers.indexesOf(targetExploits, "port_number", targetPort.port_number) then
                print(Proxima.io.addOutputEntry(Proxima.io.output.warning("This port is already scanned for exploits. Skipping... <b>[IP:" + targetIP + "|PORT:" + targetPort.port_number + "]</b>")))
                print(Proxima.io.addOutputEntry(Proxima.io.output.info("You can use 'exploits' command to view found exploits.")))
            else
                totalExploits = self.dumpPort(targetPort)
                if totalExploits == 0 then
                    print(Proxima.io.addOutputEntry(Proxima.io.output.error("No useful vulnerabilities found on port <b>" + targetPort.port_number + "</b>!")))
                else if totalExploits > 0 then
                    print(Proxima.io.addOutputEntry(Proxima.io.output.success("<b>" + totalExploits + "</b> exploits found. Use 'exploits' command to view available exploits.")))
                end if
            end if
        else
            print(Proxima.io.addOutputEntry(Proxima.io.output.error("No port found with the specified ID. <b>[ID:" + portID + "]</b>")))
        end if
    else
        if targetIP != null then
            print(Proxima.io.addOutputEntry(Proxima.io.output.error("No open ports found at the specified target IP address. <b>[IP:" + targetIP + "]</b>")))
        else
            print(Proxima.io.addOutputEntry(Proxima.io.output.error("There is no specified target IP address yet, please set a target IP address first.")))
        end if
    end if
end function

Proxima.ports.scanPorts = function ()
    targetIP = Proxima.sessions.getSessionValue(Proxima.sessions.targetSession, "targetIP")
    targetPorts = Proxima.sessions.getSessionValue(Proxima.sessions.targetSession, "targetPorts")
    if targetPorts.len > 0 then
        totalExploits = 0
        targetExploits = Proxima.sessions.getSessionValue(Proxima.sessions.targetSession, "targetExploits")
        for targetPort in targetPorts
            if targetExploits.len > 0 and Proxima.helpers.indexesOf(targetExploits, "port_number", targetPort.port_number) then
                print(Proxima.io.addOutputEntry(Proxima.io.output.info("This port is already scanned for exploits. Skipping... <b>[IP:" + targetIP + "|PORT:" + targetPort.port_number + "]</b>")))
                for targetExploit in targetExploits
                    if targetExploit.port_number == targetPort.port_number then
                        totalExploits = totalExploits + 1
                    end if
                end for
            else
                totalExploits = totalExploits + self.dumpPort(targetPort)
            end if
        end for
        if totalExploits == 0 then
            print(Proxima.io.addOutputEntry(Proxima.io.output.error("No useful vulnerabilities found on any port.")))
        else if totalExploits > 0 then
            print(Proxima.io.addOutputEntry(Proxima.io.output.success("<b>" + totalExploits + "</b> exploits found. Use 'exploits' command to view available exploits.")))
        end if
    else
        if targetIP != null then
            print(Proxima.io.addOutputEntry(Proxima.io.output.error("No open ports found at the specified target IP address. <b>[IP:" + targetIP + "]</b>")))
        else
            print(Proxima.io.addOutputEntry(Proxima.io.output.error("There is no specified target IP address yet, please set a target IP address first.")))
        end if
    end if
end function

Proxima.ports.detectTargetLANs = function ()
    targetPorts = Proxima.sessions.getSessionValue(Proxima.sessions.targetSession, "targetPorts")
    if targetPorts.len > 0 then
        ipAddresses = []
        for targetPort in targetPorts
            ipAddresses.push(targetPort.lan_ip)
        end for
        removeDuplicates = Proxima.helpers.removeDuplicates(ipAddresses)
        setLANs = Proxima.sessions.setSessionValue(Proxima.sessions.targetSession, "targetLANs", removeDuplicates)
        if setLANs then return true
    end if
    return null
end function

Proxima.ports.displayPorts = function (isEmpty = false)
    targetIP = Proxima.sessions.getSessionValue(Proxima.sessions.targetSession, "targetIP")
    targetRouter = Proxima.sessions.getSessionValue(Proxima.sessions.targetSession, "targetRouter")

    print(Proxima.io.addOutputEntry("<b>/ START_SCAN >></b>"))
    print(Proxima.io.addOutputEntry("<b>| START_PROBE [" + targetIP + "]"))
    print(Proxima.io.addOutputEntry("<b>|-- MAIN_ROUTER [" + targetRouter.local_ip + "|KERNEL_V:" + targetRouter.kernel_version + "]</b>"))
    print(Proxima.io.addOutputEntry("<b>|-- AVAILABLE_PORTS</b>"))
    if isEmpty then
        print(Proxima.io.addOutputEntry(Proxima.io.output.colorize("|   |-- NO_OPEN_PORTS_FOUND", "#FF1548")))
    else
        header_list = ["ID", "PORT", "STATE", "SERVICE", "VERSION", "ROUTED_TO"]
        content_list = []
        targetPorts = Proxima.sessions.getSessionValue(Proxima.sessions.targetSession, "targetPorts")
        for targetPort in targetPorts
            p_id = str(targetPort.id)
            p_number = str(targetPort.port_number)
            p_state = null
            if targetPort.state == "OPEN" then p_state = "OPEN#08FF57"
            if targetPort.state == "CLOSED" then p_state = "CLOSED#FF1548"
            p_service = targetPort.service
            p_version = targetPort.version
            p_lan_ip = targetPort.lan_ip
            content_list.push([ p_id, p_number, p_state, p_service, p_version, p_lan_ip ])
        end for
        Proxima.helpers.formatList(header_list, content_list)
    end if

    isAdminOnline = "<color=#008DFF>UNKNOWN</color>"
    isUserOnline = "<color=#008DFF>UNKNOWN</color>"

    self.detectTargetLANs()
    targetLANs = Proxima.sessions.getSessionValue(Proxima.sessions.targetSession, "targetLANs")
    if targetLANs.len > 0 then
        if targetLANs.len > 1 then
            print(Proxima.io.addOutputEntry("<b>|-- AVAILABLE_TARGETS</b>"))
            targetPorts = Proxima.sessions.getSessionValue(Proxima.sessions.targetSession, "targetPorts")
            for targetLAN in targetLANs
                if targetPorts.len > 0 then
                    for targetPort in targetPorts
                        if targetPort.state == "OPEN" then
                            hasOpenPorts = true
                            break
                        end if
                    end for
                end if
                if hasOpenPorts then
                    for targetPort in targetPorts
                        if targetPort.state == "OPEN" and targetLAN == targetPort.lan_ip then
                            netUseObj = Proxima.globals.metaxploit.net_use(targetIP, targetPort.port_number)
                            if netUseObj != null then
                                if netUseObj.is_root_active_user then
                                    isAdminOnline = "<color=#08FF57>ONLINE</color>"
                                else
                                    isAdminOnline = "<color=#FF1548>OFFLINE</color>"
                                end if
                                if netUseObj.is_any_active_user then
                                    isUserOnline = "<color=#08FF57>ONLINE</color>"
                                else
                                    isUserOnline = "<color=#FF1548>OFFLINE</color>"
                                end if
                            end if
                        end if
                    end for
                end if
                print(Proxima.io.addOutputEntry("|   |-- LAN_IP: " + targetLAN))
            end for
        else if targetLANs.len == 1 then
            print(Proxima.io.addOutputEntry("<b>|-- TARGET_LAN_IP [" + targetLANs[0] + "]</b>"))
            targetPorts = Proxima.sessions.getSessionValue(Proxima.sessions.targetSession, "targetPorts")
            hasOpenPorts = true
            if targetPorts.len > 0 then
                for targetPort in targetPorts
                    if targetPort.state == "OPEN" then
                        hasOpenPorts = true
                        break
                    end if
                end for
            end if
            if hasOpenPorts then
                for targetPort in targetPorts
                    if targetPort.state == "OPEN" and targetLANs[0] == targetPort.lan_ip then
                        netUseObj = Proxima.globals.metaxploit.net_use(targetIP, targetPort.port_number)
                        if netUseObj != null then
                            if netUseObj.is_root_active_user then
                                isAdminOnline = "<color=#08FF57>ONLINE</color>"
                            else
                                isAdminOnline = "<color=#FF1548>OFFLINE</color>"
                            end if
                            if netUseObj.is_any_active_user then
                                isUserOnline = "<color=#08FF57>ONLINE</color>"
                            else
                                isUserOnline = "<color=#FF1548>OFFLINE</color>"
                            end if
                        end if
                    end if
                end for
            end if
        end if
    end if

    smtpUserList = Proxima.globals.crypto.smtp_user_list(targetIP, 25)
    if typeof(smtpUserList) == "list" then
        print(Proxima.io.addOutputEntry(Proxima.io.output.colorize("<b>|-- SMTP_USER_LIST [AVAILABLE]</b>", "#08FF57")))
        if smtpUserList.len > 0 then
            for userAcc in smtpUserList
                splitAcc = userAcc.split(" ")
                userName = splitAcc[0]
                email = splitAcc[1:]
                if email.len == 3 then email = null
                print(Proxima.io.addOutputEntry("<b>|---- USER [" + userName + "]</b>"))
                if email == null then
                    print(Proxima.io.addOutputEntry(Proxima.io.output.colorize("|     |-- EMAIL_NOT_FOUND", "#FF1548")))
                else
                    print(Proxima.io.addOutputEntry("|     |-- EMAIL: " + email))
                end if
            end for
        else
            print(Proxima.io.addOutputEntry(Proxima.io.output.colorize("|   |-- NO_INFORMATION_FOUND", "#FF1548")))
        end if
    else
        print(Proxima.io.addOutputEntry(Proxima.io.output.colorize("<b>|-- SMTP_USER_LIST [NOT_AVAILABLE]</b>", "#FF1548")))
    end if

    adminInfo = whois(targetIP)
    if is_lan_ip(targetIP) then adminInfo = whois(targetRouter.public_ip)
    adminInfo = adminInfo.split(char(10))
    print(Proxima.io.addOutputEntry("<b>|-- ADMINISTRATIVE_CONTACT</b>"))
    print(Proxima.io.addOutputEntry("|   |-- NAME: " +adminInfo[1].split(":")[1].trim+""))
    print(Proxima.io.addOutputEntry("|   |-- EMAIL: "+adminInfo[2].split(":")[1].trim+""))
    print(Proxima.io.addOutputEntry("|   |-- PHONE: "+adminInfo[3].split(":")[1].trim+""))
    print(Proxima.io.addOutputEntry("<b>|-- ONLINE_USERS</b>"))
    print(Proxima.io.addOutputEntry("|   |-- ADMINISTRATOR: " + isAdminOnline))
    print(Proxima.io.addOutputEntry("|   |-- ANY_USER: " + isUserOnline))
    print(Proxima.io.addOutputEntry("<b>|-- COMPANY_NAME ["+((adminInfo[0].split(":")[1].trim).split("\.")[1].upper)[0]+(adminInfo[0].split(":")[1].trim).split("\.")[1][1:] + "]</b>"))
    print(Proxima.io.addOutputEntry("<b>|-- DOMAIN_NAME [" + (adminInfo[0].split(":")[1].trim + "]</b>")))
    print(Proxima.io.addOutputEntry("<b>| END_PROBE</b>"))
    print(Proxima.io.addOutputEntry("<b>\ END_SCAN <<</b>"))
end function