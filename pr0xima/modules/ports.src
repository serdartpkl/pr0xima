Proxima.ports = {}

Proxima.ports.isRouter = function (targetIP)
    if get_router(targetIP) != null then
        return true
    else
        return false
    end if
end function

Proxima.ports.createRouter = function (targetIP)
    targetRouter = get_router(targetIP)
    if is_lan_ip(targetIP) and self.isRouter(targetIP) != true then targetRouter = get_router()
    return targetRouter
end function

Proxima.ports.isPingable = function (targetIP)
    if Proxima.globals.myShell.ping(targetIP) then return true
end function

Proxima.ports.checkTargetIP = function (targetIP = null)
    if targetIP != null and is_valid_ip(targetIP) then
        if self.isPingable(targetIP) then
            return true
        else
            return false
        end if
    else
        return null
    end if
end function

Proxima.ports.dumpRouter = function ()
end function

Proxima.ports.scanRouter = function ()
end function

Proxima.ports.checkPorts = function (targetIP = null)
    hasScanned = Proxima.utils.indexesOf(Proxima.sessions.activeSessions, "targetIP", targetIP)
    sessionID = hasScanned + 1
    if hasScanned != null and targetIP == Proxima.sessions.getSessionValue(sessionID, "targetIP") then
        print(Proxima.io.addOutputEntry(Proxima.io.output.info("You've already created an active session with given IP. <b>[ID:" + (sessionID) + "]</b>")))
        Proxima.sessions.setSession(sessionID)
        print(Proxima.io.addOutputEntry(Proxima.io.output.success("Switched to active session successfully! <b>[ID:" + (sessionID) + "]</b>")))
        Proxima.io.inputString = Proxima.io.output.colorize("<b>pr0xima</b>", "#FFC466") + Proxima.io.output.colorize("@", "#08FF57") + Proxima.io.output.colorize("[" + Proxima.sessions.getSessionValue(sessionID, "targetIP") + "]", "#FF1548") + Proxima.io.output.colorize("> ", "#008DFF")
        return true
    else
        targetRouter = self.createRouter(targetIP)
        mainIP = targetRouter.local_ip
        if is_lan_ip(targetIP) then mainIP = targetIP
        scannedPorts = targetRouter.device_ports(mainIP)
        createRemoteSession = Proxima.sessions.addSession(1, targetIP, targetRouter)
        if createRemoteSession != null and typeof(createRemoteSession) == "number" then
            setActiveSession = Proxima.sessions.setSession(createRemoteSession)
            if setActiveSession then
                Proxima.io.inputString = Proxima.io.output.colorize("<b>pr0xima</b>", "#FFC466") + Proxima.io.output.colorize("@", "#08FF57") + Proxima.io.output.colorize("[" + targetIP + "]", "#FF1548") + Proxima.io.output.colorize("> ", "#008DFF")
                if scannedPorts.len == 1 or scannedPorts == null then
                    return false
                else
                    for scannedPort in scannedPorts
                        if scannedPort.port_number != 8080 then
                            portID = Proxima.sessions.getSessionValue(Proxima.sessions.targetSession, "targetPorts").len + 1
                            portNumber = scannedPort.port_number
                            portState = "OPEN"
                            if is_closed(scannedPort) then portState = "CLOSED"
                            portInfo = targetRouter.port_info(scannedPort).split(" ")
                            portService = portInfo[0]
                            portVersion = portInfo[1]
                            portLanIP = scannedPort.get_lan_ip
                            Proxima.sessions.addMapToSession(Proxima.sessions.targetSession, "targetPorts", { "id": portID, "port_number": portNumber, "state": portState, "service": portService, "version": portVersion, "lan_ip": portLanIP })
                        end if
                    end for
                    return true
                end if
            else
                print(Proxima.io.addOutputEntry(Proxima.io.output.error("Couldn't switch to created session due to unexpected error.")))
            end if
        else
            print(Proxima.io.addOutputEntry(Proxima.io.output.error("Couldn't create remote session due to unexpected error.")))
        end if
    end if
end function

Proxima.ports.dumpPort = function (targetPort)
    totalExploits = 0
    if targetPort.state == "OPEN" then
        targetIP = Proxima.sessions.getSessionValue(Proxima.sessions.targetSession, "targetIP")
        print(Proxima.io.addOutputEntry(Proxima.io.output.progress("Connecting to <b>" + targetIP + ":" + targetPort.port_number + "</b>...")))
        netSession = Proxima.globals.metaxploit.net_use(targetIP, targetPort.port_number)
        Proxima.io.clearScreen()
        wait(0.5)
        if netSession != null then
            libraryDump = netSession.dump_lib
            print(Proxima.io.addOutputEntry(Proxima.io.output.progress("Attempting to scan vulnerabilities... <b>[IP:" + targetIP + "|PORT:" + targetPort.port_number + "]</b>")))
            print(Proxima.io.addOutputEntry(Proxima.io.output.info("Library version found: <b>" + libraryDump.lib_name + " -> " + libraryDump.version + "</b>")))
            scanResult = Proxima.globals.metaxploit.scan(libraryDump)
            Proxima.io.addProgressBar()
            Proxima.io.clearScreen()
            wait(0.5)
            totalExploits = Proxima.exploit.parseScanEntries(scanResult, libraryDump, targetPort)
        else
            print(Proxima.io.addOutputEntry(Proxima.io.output.error("Unable to connect to port <b>" + targetPort.port_number + "</b>. It has firewall protection.")))
        end if 
    else
        print(Proxima.io.addOutputEntry(Proxima.io.output.error("Unable to connect to port <b>" + targetPort.port_number + "</b>. It is closed.")))
    end if
    return totalExploits
end function

Proxima.ports.scanPort = function (portID)
    targetIP = Proxima.sessions.getSessionValue(Proxima.sessions.targetSession, "targetIP")
    targetPorts = Proxima.sessions.getSessionValue(Proxima.sessions.targetSession, "targetPorts")
    if targetPorts.len > 0 then
        if portID != null and targetPorts.hasIndex(portID - 1) then
            totalExploits = 0
            targetPort = targetPorts[portID - 1]
            targetExploits = Proxima.sessions.getSessionValue(Proxima.sessions.targetSession, "targetExploits")
            if targetExploits.len > 0 and Proxima.utils.indexesOf(targetExploits, "port_number", targetPort.port_number) then
                print(Proxima.io.addOutputEntry(Proxima.io.output.warning("This port is already scanned for exploits. Skipping... <b>[IP:" + targetIP + "|PORT:" + targetPort.port_number + "]</b>")))
                print(Proxima.io.addOutputEntry(Proxima.io.output.info("You can use 'exploits' command to view found exploits.")))
            else
                totalExploits = self.dumpPort(targetPort)
                if totalExploits == 0 then
                    print(Proxima.io.addOutputEntry(Proxima.io.output.error("No useful vulnerabilities found on port <b>" + targetPort.port_number + "</b>!")))
                else if totalExploits > 0 then
                    print(Proxima.io.addOutputEntry(Proxima.io.output.success("<b>" + totalExploits + "</b> exploits found. Use 'exploits' command to view available exploits.")))
                end if
            end if
        else
            print(Proxima.io.addOutputEntry(Proxima.io.output.error("No port found with the specified ID. <b>[ID:" + portID + "]</b>")))
        end if
    else
        if targetIP != null then
            print(Proxima.io.addOutputEntry(Proxima.io.output.error("No open ports found at the specified target IP address. <b>[IP:" + targetIP + "]</b>")))
        else
            print(Proxima.io.addOutputEntry(Proxima.io.output.error("There is no specified target IP address yet, please set a target IP address first.")))
        end if
    end if
end function

Proxima.ports.scanPorts = function ()
    targetIP = Proxima.sessions.getSessionValue(Proxima.sessions.targetSession, "targetIP")
    targetPorts = Proxima.sessions.getSessionValue(Proxima.sessions.targetSession, "targetPorts")
    if targetPorts.len > 0 then
        totalExploits = 0
        targetExploits = Proxima.sessions.getSessionValue(Proxima.sessions.targetSession, "targetExploits")
        for targetPort in targetPorts
            if targetExploits.len > 0 and Proxima.utils.indexesOf(targetExploits, "port_number", targetPort.port_number) then
                print(Proxima.io.addOutputEntry(Proxima.io.output.info("This port is already scanned for exploits. Skipping... <b>[IP:" + targetIP + "|PORT:" + targetPort.port_number + "]</b>")))
                for targetExploit in targetExploits
                    if targetExploit.port_number == targetPort.port_number then
                        totalExploits = totalExploits + 1
                    end if
                end for
            else
                totalExploits = totalExploits + self.dumpPort(targetPort)
            end if
        end for
        if totalExploits == 0 then
            print(Proxima.io.addOutputEntry(Proxima.io.output.error("No useful vulnerabilities found on any port.")))
        else if totalExploits > 0 then
            print(Proxima.io.addOutputEntry(Proxima.io.output.success("<b>" + totalExploits + "</b> exploits found. Use 'exploits' command to view available exploits.")))
        end if
    else
        if targetIP != null then
            print(Proxima.io.addOutputEntry(Proxima.io.output.error("No open ports found at the specified target IP address. <b>[IP:" + targetIP + "]</b>")))
        else
            print(Proxima.io.addOutputEntry(Proxima.io.output.error("There is no specified target IP address yet, please set a target IP address first.")))
        end if
    end if
end function

Proxima.ports.detectTargetLANs = function ()
    targetPorts = Proxima.sessions.getSessionValue(Proxima.sessions.targetSession, "targetPorts")
    if targetPorts.len > 0 then
        ipAddresses = []
        for targetPort in targetPorts
            ipAddresses.push(targetPort.lan_ip)
        end for
        removeDuplicates = Proxima.utils.removeDuplicates(ipAddresses)
        setLANs = Proxima.sessions.setSessionValue(Proxima.sessions.targetSession, "targetLANs", removeDuplicates)
        if setLANs then
            if removeDuplicates.len == 1 then
                setTargetLAN = Proxima.sessions.setSessionValue(Proxima.sessions.targetSession, "targetLAN", removeDuplicates[0])
                if setTargetLAN then return true
            end if
            return true
        end if
    end if
    return null
end function

Proxima.ports.displayPorts = function (isEmpty = false)
    header_list = ["ID", "PORT", "STATE", "SERVICE", "VERSION", "LAN_IP"]
    content_list = []
    targetPorts = Proxima.sessions.getSessionValue(Proxima.sessions.targetSession, "targetPorts")
    for targetPort in targetPorts
        p_id = str(targetPort.id)
        p_number = str(targetPort.port_number)
        p_state = null
        if targetPort.state == "OPEN" then p_state = "OPEN#08FF57"
        if targetPort.state == "CLOSED" then p_state = "CLOSED#FF1548"
        p_service = targetPort.service
        p_version = targetPort.version
        p_lan_ip = targetPort.lan_ip
        content_list.push([ p_id, p_number, p_state, p_service, p_version, p_lan_ip ])
    end for

    targetIP = Proxima.sessions.getSessionValue(Proxima.sessions.targetSession, "targetIP")
    targetRouter = Proxima.sessions.getSessionValue(Proxima.sessions.targetSession, "targetRouter")

    print(Proxima.io.addOutputEntry("/ START_SCAN [" + targetIP + "]"))
    print(Proxima.io.addOutputEntry("|-- TARGET_ROUTER: " + targetRouter.local_ip))
    print(Proxima.io.addOutputEntry("|-- KERNEL_VERSION: v" + targetRouter.kernel_version))
    if isEmpty then
        print(Proxima.io.addOutputEntry("|-- NO_OPEN_PORTS_FOUND"))
    else
        Proxima.utils.formatList(header_list, content_list)
    end if
    print(Proxima.io.addOutputEntry("|-- SMTP_USER_LIST"))
    smtpUserList = Proxima.globals.crypto.smtp_user_list(targetIP, 25)
    if typeof(smtpUserList) == "list" then
        print(Proxima.io.addOutputEntry("|   |-- SERVICE_AVAILABLE"))
        if smtpUserList.len > 0 then
            for userAcc in smtpUserList
                splitAcc = userAcc.split(" ")
                userName = splitAcc[0]
                email = splitAcc[1:]
                if email.len == 3 then email = "UNKNOWN"
                print(Proxima.io.addOutputEntry("|   |-- "+userName+":"+email+""))
            end for
        else
            print(Proxima.io.addOutputEntry("|   |-- NO_INFORMATION_FOUND"))
        end if
    else
        print(Proxima.io.addOutputEntry("|   |-- SERVICE_NOT_AVAILABLE"))
    end if

    adminInfo = whois(targetIP)
    if is_lan_ip(targetIP) then adminInfo = whois(targetRouter.public_ip)
    adminInfo = adminInfo.split(char(10))
    print(Proxima.io.addOutputEntry("|-- ADMINISTRATIVE_CONTACT"))
    print(Proxima.io.addOutputEntry("|   |-- NAME: " +adminInfo[1].split(":")[1].trim+""))
    print(Proxima.io.addOutputEntry("|   |-- EMAIL: "+adminInfo[2].split(":")[1].trim+""))
    print(Proxima.io.addOutputEntry("|   |-- PHONE: "+adminInfo[3].split(":")[1].trim+""))
    print(Proxima.io.addOutputEntry("|-- COMPANY_NAME: "+((adminInfo[0].split(":")[1].trim).split("\.")[1].upper)[0]+(adminInfo[0].split(":")[1].trim).split("\.")[1][1:]+""))
    print(Proxima.io.addOutputEntry("|-- DOMAIN_NAME: " + (adminInfo[0].split(":")[1].trim)))
    
    self.detectTargetLANs()
    targetLANs = Proxima.sessions.getSessionValue(Proxima.sessions.targetSession, "targetLANs")
    if targetLANs.len > 0 then
        if targetLANs.len > 1 then
            print(Proxima.io.addOutputEntry("|-- TARGET_LAN_ADDRESSES"))
            for targetLAN in targetLANs
                print(Proxima.io.addOutputEntry("|   |-- " + targetLAN))
            end for
            print(Proxima.io.addOutputEntry("|-- TARGET_LAN_ADDRESS: NOT_SET"))
        else if targetLANs.len == 1 then
            targetLAN = Proxima.sessions.getSessionValue(Proxima.sessions.targetSession, "targetLAN")
            if targetLAN != null then
                print(Proxima.io.addOutputEntry("|-- TARGET_LAN_ADDRESS: " + targetLAN))
            else
                print(Proxima.io.addOutputEntry("|-- TARGET_LAN_ADDRESS: NOT_SET"))
            end if
        end if
    else
        print(Proxima.io.addOutputEntry("|-- NO_LAN_ADDRESS_FOUND"))
    end if
    
    print(Proxima.io.addOutputEntry("\ END_SCAN"))
end function