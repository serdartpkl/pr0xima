Proxima.credentials = {}

Proxima.credentials.reachFile = function(givenDirectory, desiredFile, reachToTop=true)
    if not givenDirectory then return null
    
    currentPath = givenDirectory
    if reachToTop then
        while currentPath.path != "/"
            currentPath = currentPath.parent
        end while
    end if
    
    searchInDirectory = function(targetDirectory, targetPath)
        if not targetDirectory then return null
        
        getFiles = targetDirectory.get_files
        for foundedFile in getFiles
            if foundedFile.path == targetPath then return foundedFile
        end for
        
        getFolders = targetDirectory.get_folders
        for foundedFolder in getFolders
            if foundedFolder.path == targetPath then return foundedFolder
            
            searchResult = searchInDirectory(foundedFolder, targetPath)
            if searchResult then return searchResult
        end for
        
        return null
    end function
    
    searchResult = searchInDirectory(currentPath, desiredFile)
    return searchResult
end function

Proxima.credentials.accessPasswdFile = function (passwdFile)
    Proxima.sessions.setSessionValue("targetUsers", [])
    if passwdFile.get_content != null and passwdFile.has_permission("r") then
        encryptedContent = passwdFile.get_content
        userList = encryptedContent.split(char(10))
        for userInfo in userList
            if userInfo.len > 1 then
                userID = Proxima.sessions.getSessionValue("targetUsers").len + 1
                parsedUser = userInfo.split(":")
                userName = parsedUser[0]
                userPassword = parsedUser[1]
                userMap = { "id": userID, "username": userName, "password": userPassword }
                Proxima.sessions.pushMap("targetUsers", userMap)
            end if
        end for
        return true
    else
        return false
    end if
end function

Proxima.credentials.reachPasswdFile = function (givenDirectory)
    while givenDirectory.path != "/"
        givenDirectory = givenDirectory.parent
    end while

    rootFolders = givenDirectory.get_folders
    for rootFolder in rootFolders
        if rootFolder.name == "etc" then
            for etcFile in rootFolder.get_files
                if etcFile.name == "passwd" then
                    return etcFile
                end if
            end for
        end if
    end for
end function

Proxima.credentials.reachHomeDirectory = function (givenDirectory)
    while givenDirectory.path != "/"
        givenDirectory = givenDirectory.parent
    end while

    rootFolders = givenDirectory.get_folders
    for rootFolder in rootFolders
        if rootFolder.name == "home" then
            return rootFolder
            break
        end if
    end for
end function

Proxima.credentials.reachFileOwner = function (givenDirectory)
    while givenDirectory.path != "/"
        givenDirectory = givenDirectory.parent
    end while

    acquiredUser = "guest"
    if givenDirectory != null and givenDirectory.has_permission("w") then
        acquiredUser = "root"
    else
        homeDirectory = self.reachHomeDirectory(givenDirectory)
        if homeDirectory != null then
            for userFolder in homeDirectory.get_folders
                if userFolder.name == "guest" then continue
                if userFolder.has_permission("w") then acquiredUser = userFolder.name
            end for
        end if
    end if
    return acquiredUser
end function

Proxima.credentials.getPrivilegeLevel = function (acquiredUser)
    acquiredUserNum = 2
    if acquiredUser == "guest" then
        acquiredUserNum = 2
    else if acquiredUser == "root" then
        acquiredUserNum = 0
    else 
        acquiredUserNum = 1
    end if
    return acquiredUserNum
end function

Proxima.credentials.acquireUser = function (targetComputer)
    rootDirectory = targetComputer.File("/")
    acquiredUser = "guest"
    if rootDirectory != null and rootDirectory.has_permission("w") then
        acquiredUser = "root"
    else
        homeDirectory = targetComputer.File("/home")
        if homeDirectory != null then
            for userFolder in homeDirectory.get_folders
                if userFolder.name == "guest" then continue
                if userFolder.has_permission("w") then acquiredUser = userFolder.name
            end for
        end if
    end if
    return acquiredUser
end function

Proxima.credentials.getMailInfo = function (homeFolder)
    Proxima.sessions.setSessionValue("targetMails", [])
    hasAccessedMails = false
    for userFolders in homeFolder.get_folders
        if userFolders.name != "guest" then
            infoMap = {}
            infoMap.id = Proxima.sessions.getSessionValue("targetMails").len + 1
            infoMap.owner = userFolders.name
            for userFolder in userFolders.get_folders
                if userFolder.name == "Config" then
                    for configFile in userFolder.get_files
                        if configFile.name == "Mail.txt" then
                            fileContent = configFile.get_content()
                            if fileContent != null and fileContent.len > 0 then
                                splitInfo = fileContent.split(":")
                                infoMap.mail_addr = splitInfo[0]
                                infoMap.password = splitInfo[1]
                                Proxima.sessions.pushMap("targetMails", infoMap)
                                hasAccessedMails = true
                            end if
                        end if
                    end for
                end if
            end for
        end if
    end for
    return hasAccessedMails
end function

Proxima.credentials.getBankInfo = function (homeFolder)
    Proxima.sessions.setSessionValue("targetBanks", [])
    hasAccessedBanks = false
    for userFolders in homeFolder.get_folders
        if userFolders.name != "guest" then
            infoMap = {}
            infoMap.id = Proxima.sessions.getSessionValue("targetBanks").len + 1
            infoMap.owner = userFolders.name
            for userFolder in userFolders.get_folders
                if userFolder.name == "Config" then
                    for configFile in userFolder.get_files
                        if configFile.name == "Bank.txt" then
                            fileContent = configFile.get_content()
                            if fileContent != null and fileContent.len > 0 then
                                splitInfo = fileContent.split(":")
                                infoMap.account = splitInfo[0]
                                infoMap.password = splitInfo[1]
                                Proxima.sessions.pushMap("targetBanks", infoMap)
                                hasAccessedBanks = true
                            end if
                        end if
                    end for
                end if
            end for
        end if
    end for
    return hasAccessedBanks
end function

Proxima.credentials.getUsers = function (homeFolder)
    Proxima.sessions.setSessionValue("targetUsers", [])
    Proxima.sessions.pushMap("targetUsers", { "id": 1, "username": "root", "password": "UNKNOWN" })
    for userFolders in homeFolder.get_folders
        if userFolders.name != "guest" then
            userID = Proxima.sessions.getSessionValue("targetUsers").len + 1
            userMap = { "id": userID, "username": userFolders.name, "password": "UNKNOWN" }
            Proxima.sessions.pushMap("targetUsers", userMap)
        end if
    end for
end function

Proxima.credentials.decipherHash = function (encryptedHash)
    decryptedHash = Proxima.globals.crypto.decipher(encryptedHash)
    Proxima.io.addProgressBar()
    return decryptedHash
end function

Proxima.credentials.decipherUserPassword = function (userID)
    targetUsers = Proxima.sessions.getSessionValue("targetUsers")
    if targetUsers.len > 0 then
        if userID != null and targetUsers.hasIndex(userID - 1) then
            targetUser = targetUsers[userID - 1]
            if targetUser.password.len < 32 then
                print(Proxima.io.addOutputEntry(Proxima.io.output.warning("This password is already deciphered. Skipping...")))
            else
                decryptedPassword = self.decipherHash(targetUser.password)
                if decryptedPassword != null then
                    targetUsers[userID - 1].password = decryptedPassword
                    Proxima.sessions.setSessionValue("targetUsers", targetUsers)
                    print(Proxima.io.addOutputEntry(Proxima.io.output.success("Password decrypted successfuly!. <b>[USER:" + targetUser.username + "|PASSWORD:" + targetUser.password + "]</b>")))
                    print(Proxima.io.addOutputEntry(Proxima.io.output.info("Updated user information, you can view it later by using command: <b>users</b>")))
                else
                    print(Proxima.io.addOutputEntry(Proxima.io.output.info("Couldn't decrypt password! Please try another one...")))
                end if
            end if
        else
            print(Proxima.io.addOutputEntry(Proxima.io.output.error("No user found with specified ID. <b>[ID:" + userID + "]</b>")))
        end if
    else
        print(Proxima.io.addOutputEntry(Proxima.io.output.error("No user information found to decipher, please execute an exploit first.")))
    end if
end function

Proxima.credentials.decipherMailPassword = function (mailID)
    targetMails = Proxima.sessions.getSessionValue("targetMails")
    if targetMails.len > 0 then
        if mailID != null and targetMails.hasIndex(mailID - 1) then
            targetMail = targetMails[mailID - 1]
            if targetMail.password.len < 32 then
                print(Proxima.io.addOutputEntry(Proxima.io.output.warning("This password is already deciphered. Skipping...")))
            else
                decryptedPassword = self.decipherHash(targetMail.password)
                if decryptedPassword != null then
                    targetMails[mailID - 1].password = decryptedPassword
                    Proxima.sessions.setSessionValue("targetMails", targetMails)
                    print(Proxima.io.addOutputEntry(Proxima.io.output.success("Password decrypted successfuly!. <b>[MAIL_ADDR:" + targetMail.mail_addr + "|PASSWORD:" + targetMail.password + "]</b>")))
                    print(Proxima.io.addOutputEntry(Proxima.io.output.info("Updated mail information, you can view it later by using command: <b>mails</b>")))
                else
                    print(Proxima.io.addOutputEntry(Proxima.io.output.info("Couldn't decrypt password! Please try another one...")))
                end if
            end if
        else
            print(Proxima.io.addOutputEntry(Proxima.io.output.error("No mail information found with specified ID. <b>[ID:" + mailID + "]</b>")))
        end if
    else
        print(Proxima.io.addOutputEntry(Proxima.io.output.error("No mail information found to decipher, please execute an exploit first.")))
    end if
end function

Proxima.credentials.decipherBankPassword = function (bankID)
    targetBanks = Proxima.sessions.getSessionValue("targetBanks")
    if targetBanks.len > 0 then
        if bankID != null and targetBanks.hasIndex(bankID - 1) then
            targetBank = targetBanks[bankID - 1]
            if targetBank.password.len < 32 then
                print(Proxima.io.addOutputEntry(Proxima.io.output.warning("This password is already deciphered. Skipping...")))
            else
                decryptedPassword = self.decipherHash(targetBank.password)
                if decryptedPassword != null then
                    targetBanks[bankID - 1].password = decryptedPassword
                    Proxima.sessions.setSessionValue("targetBanks", targetBanks)
                    print(Proxima.io.addOutputEntry(Proxima.io.output.success("Password decrypted successfuly!. <b>[ACCOUNT:" + targetBank.account + "|PASSWORD:" + targetBank.password + "]</b>")))
                    print(Proxima.io.addOutputEntry(Proxima.io.output.info("Updated bank information, you can view it later by using command: <b>banks</b>")))
                else
                    print(Proxima.io.addOutputEntry(Proxima.io.output.info("Couldn't decrypt password! Please try another one...")))
                end if
            end if
        else
            print(Proxima.io.addOutputEntry(Proxima.io.output.error("No bank information found with specified ID. <b>[ID:" + bankID + "]</b>")))
        end if
    else
        print(Proxima.io.addOutputEntry(Proxima.io.output.error("No bank information found to decipher, please execute an exploit first.")))
    end if
end function

Proxima.credentials.colorizePassword = function (userPassword)
    if userPassword == "UNKNOWN" then
        return userPassword + "#0091FF"
    else if userPassword.len == 32 then
        return userPassword + "#FFDD00"
    else if userPassword.len < 32 then
        return userPassword + "#08FF57"
    end if
end function

Proxima.credentials.colorizePrivilegeLevel = function (shellPrivilege)
    if shellPrivilege == 0 then
        return "ROOT#9370DB"
    else if shellPrivilege == 1 then
        return "USER#08FF57"
    else if shellPrivilege == 2 then
        return "GUEST#FFDD00"
    end if
end function

Proxima.credentials.displayUsers = function ()
    header_list = ["ID", "USERNAME", "PASSWORD"]
    content_list = []
    targetUsers = Proxima.sessions.getSessionValue("targetUsers")
    for targetUser in targetUsers
        u_id = str(targetUser.id)
        u_username = targetUser.username
        u_password = self.colorizePassword(targetUser.password)
        content_list.push([ u_id, u_username, u_password ])
    end for

    Proxima.helpers.formatList(header_list, content_list)
end function

Proxima.credentials.displayMails = function ()
    header_list = ["ID", "OWNER", "MAIL", "PASSWORD"]
    content_list = []
    targetMails = Proxima.sessions.getSessionValue("targetMails")
    for targetMail in targetMails
        m_id = str(targetMail.id)
        m_owner = targetMail.owner
        m_mail_addr = targetMail.mail_addr
        m_password = self.colorizePassword(targetMail.password)
        content_list.push([ m_id, m_owner, m_mail_addr, m_password ])
    end for

    Proxima.helpers.formatList(header_list, content_list)
end function

Proxima.credentials.displayBanks = function ()
    header_list = ["ID", "OWNER", "ACCOUNT", "PASSWORD"]
    content_list = []
    targetBanks = Proxima.sessions.getSessionValue("targetBanks")
    for targetBank in targetBanks
        b_id = str(targetBank.id)
        b_owner = targetBank.owner
        b_account = targetBank.account
        b_password = self.colorizePassword(targetBank.password)
        content_list.push([ b_id, b_owner, b_account, b_password ])
    end for

    Proxima.helpers.formatList(header_list, content_list)
end function