Proxima.actions = {}

Proxima.actions.launchShell = function (shellID)
    targetShells = Proxima.sessions.getSessionValue("targetShells")
    if targetShells.len > 0 then
        if shellID != null and targetShells.hasIndex(shellID - 1) then
            targetShell = targetShells[shellID - 1]
            print(Proxima.io.addOutputEntry(Proxima.io.output.progress("Launching shell on <b>" + targetShell.public_ip + "|" + targetShell.local_ip + "</b> via <b>" + targetShell.owner + "</b> privilege. <b>[ID:" + targetShell.id + "]</b>")))
            wait(0.5)
            targetShell.shell_object.start_terminal
        else
            print(Proxima.io.addOutputEntry(Proxima.io.output.error("No open shell found with specified ID. <b>[ID:" + shellID + "]</b>")))
        end if
    else
        print(Proxima.io.addOutputEntry(Proxima.io.output.error("No open shells found to connect, please execute an exploit first.")))
    end if
end function

Proxima.actions.executeBinary = function (binaryPath, launchParameters = null, output = true)
    targetShells = Proxima.sessions.getSessionValue("targetShells")
    if targetShells.len > 0 then
        targetShell = targetShells[0]
        fileName = binaryPath.split("/")[-1].trim
        getBinaryFile = targetShell.shell_object.host_computer.File(binaryPath)
        if getBinaryFile != null and is_binary(getBinaryFile) then
            if output then print(Proxima.io.addOutputEntry(Proxima.io.output.progress("Attempting to execute <b>" + fileName + "</b>...")))
            if getBinaryFile.has_permission("x") then
                launchBinary = null
                if launchParameters != null then
                    launchBinary = targetShell.shell_object.launch(binaryPath, launchParameters)
                else
                    launchBinary = targetShell.shell_object.launch(binaryPath)
                end if
                if launchBinary == null or launchBinary == 0 or typeof(launchBinary) == "string" then
                    if output then print(Proxima.io.addOutputEntry(Proxima.io.output.error("Couldn't launch desired binary file!")))
                    if output then print(Proxima.io.addOutputEntry(Proxima.io.output.error("Reason of failure: " + launchBinary)))
                else
                    if output then print(Proxima.io.addOutputEntry(Proxima.io.output.success("Successfuly launched <b>" + fileName + "</b>!")))
                end if
            else
                if output then print(Proxima.io.addOutputEntry(Proxima.io.output.error("Couldn't execute desired binary file due to insufficent user privilege!")))
            end if
        else
            if is_binary(getBinaryFile) then
                if output then print(Proxima.io.addOutputEntry(Proxima.io.output.error("Couldn't execute <b>" + fileName + "</b>. Remote binary file does not exist!")))
            else
                if output then print(Proxima.io.addOutputEntry(Proxima.io.output.error("Couldn't execute <b>" + fileName + "</b>. Remote file is not an executeable!")))
            end if
        end if
    else
        if output then print(Proxima.io.addOutputEntry(Proxima.io.output.error("No open shells found, please execute an exploit first.")))
    end if
end function

Proxima.actions.getFile = function (remoteFilePath, downloadTo = null, output = true)
    targetShells = Proxima.sessions.getSessionValue("targetShells")
    if targetShells.len > 0 then
        targetShell = targetShells[0]
        getDownloadTo = Proxima.globals.myPC.File(home_dir + "/pr0xima/downloads")
        if downloadTo != null then getDownloadTo = Proxima.globals.myPC.File(downloadTo)
        if getDownloadTo != null and getDownloadTo.has_permission("w") then
            fileName = remoteFilePath.split("/")[-1].trim
            remoteFile = targetShell.shell_object.host_computer.File(remoteFilePath)
            if remoteFile != null then
                if output then print(Proxima.io.addOutputEntry(Proxima.io.output.progress("Attempting to download <b>" + fileName + "</b>...")))
                if remoteFile.has_permission("r") then
                    print(Proxima.io.addOutputEntry(Proxima.io.output.line))
                    getRemoteFile = targetShell.shell_object.scp(remoteFile.path, getDownloadTo.path, Proxima.globals.myShell)
                    Proxima.io.addTransferProcess(remoteFile.size)
                    print(Proxima.io.addOutputEntry(Proxima.io.output.line))
                    Proxima.io.clearScreen()
                    wait(0.5)
                    if typeof(getRemoteFile) == "string" or typeof(getRemoteFile) == null then
                        if output then print(Proxima.io.addOutputEntry(Proxima.io.output.error("Couldn't download <b>" + fileName + "</b>!")))
                        if output then print(Proxima.io.addOutputEntry(Proxima.io.output.error("Reason of failure: " + getRemoteFile)))
                    else
                        if output then print(Proxima.io.addOutputEntry(Proxima.io.output.success("Successfuly downloaded <b>" + fileName + "</b>!")))
                        Proxima.io.addTransferProcess(remoteFile.size)
                    end if
                else
                    if output then print(Proxima.io.addOutputEntry(Proxima.io.output.error("Couldn't download requested file due to insufficent user privilege!")))
                end if
            else
                if output then print(Proxima.io.addOutputEntry(Proxima.io.output.error("Couldn't download <b>" + fileName + "</b>. Remote file does not exist!")))
            end if
        else
            if output then print(Proxima.io.addOutputEntry(Proxima.io.output.error("Couldn't find downloads folder! You can change desired location via <b>settings.src</b>")))
        end if
    else
        if output then print(Proxima.io.addOutputEntry(Proxima.io.output.error("No open shells found, please execute an exploit first.")))
    end if
end function

Proxima.actions.putFile = function (localFilePath, uploadTo = null, output = true)
    targetShells = Proxima.sessions.getSessionValue("targetShells")
    if targetShells.len > 0 then
        targetShell = targetShells[0]
        setUploadTo = "/root"
        if targetShell.owner != "root" then setUploadTo = "/home/" + targetShell.owner
        if uploadTo != null then setUploadTo = uploadTo
        setUploadFolder = targetShell.shell_object.host_computer.File(setUploadTo)
        if setUploadFolder != null and setUploadFolder.has_permission("w") then
            fileName = localFilePath.split("/")[-1].trim
            localFile = Proxima.globals.myPC.File(localFilePath)
            if localFile != null then
                if output then print(Proxima.io.addOutputEntry(Proxima.io.output.progress("Attempting to upload <b>" + fileName + "</b>...")))
                if localFile.has_permission("r") then
                    print(Proxima.io.addOutputEntry(Proxima.io.output.line))
                    uploadLocalFile = Proxima.globals.myShell.scp(localFile.path, setUploadFolder.path, targetShell.shell_object)
                    Proxima.io.addTransferProcess(localFile.size)
                    print(Proxima.io.addOutputEntry(Proxima.io.output.line))
                    Proxima.io.clearScreen()
                    wait(0.5)
                    if typeof(uploadLocalFile) == "string" or typeof(uploadLocalFile) == null then
                        if output then print(Proxima.io.addOutputEntry(Proxima.io.output.error("Couldn't upload <b>" + fileName + "</b>!")))
                        if output then print(Proxima.io.addOutputEntry(Proxima.io.output.error("Reason of failure: " + uploadLocalFile)))
                    else
                        if output then print(Proxima.io.addOutputEntry(Proxima.io.output.success("Successfuly uploaded <b>" + fileName + "</b>!")))
                    end if
                else
                    if output then print(Proxima.io.addOutputEntry(Proxima.io.output.error("Couldn't download requested file due to insufficent user privilege!")))
                end if
            else
                if output then print(Proxima.io.addOutputEntry(Proxima.io.output.error("Couldn't upload <b>" + fileName + "</b>. Remote upload path does not exist!")))
            end if
        else
            if output then print(Proxima.io.addOutputEntry(Proxima.io.output.error("No valid upload file found in given path!")))
        end if
    else
        if output then print(Proxima.io.addOutputEntry(Proxima.io.output.error("No open shells found, please execute an exploit first.")))
    end if
end function

Proxima.actions.deleteFile = function (filePath, output = true)
    targetComputer = null
    if Proxima.sessions.isSessionLocal(Proxima.sessions.targetSession) then
        targetComputer = Proxima.globals.myPC
    else
        targetShells = Proxima.sessions.getSessionValue("targetShells")
        if targetShells.len > 0 then
            targetShell = targetShells[0]
            targetComputer = targetShell.shell_object.host_computer
        end if
    end if
    if typeof(targetComputer) == "computer" then
        fileName = filePath.split("/")[-1].trim
        
        remoteFile = targetComputer.File(filePath)
        if remoteFile != null then
            print(Proxima.io.addOutputEntry(Proxima.io.output.progress("Attempting to delete <b>" + fileName + "</b>...")))
            if remoteFile.has_permission("r") and remoteFile.has_permission("w") then
                deletionFileResult = remoteFile.delete
                if typeof(deletionFileResult) == "string" and deletionFileResult.len > 0 then
                    print(Proxima.io.addOutputEntry(Proxima.io.output.error("There was an error while deleting a file: " + deletionFileResult)))
                else
                    print(Proxima.io.addOutputEntry(Proxima.io.output.success("<b>" + fileName + "</b> file got deleted successfully.")))
                end if
            else
            end if
        else
            print(Proxima.io.addOutputEntry(Proxima.io.output.error("Couldn't delete <b>" + fileName + "</b>. Remote file does not exist!")))
        end if
    else
        if targetComputer == null then
            print(Proxima.io.addOutputEntry(Proxima.io.output.error("Couldn't delete file due to insufficient user privileges!")))
        else if targetComputer == false then
            print(Proxima.io.addOutputEntry(Proxima.io.output.error("No open shells found!")))
        end if
    end if
end function

// ------------------------------------------------------------------------------------------------------------

Proxima.actions.isSSHAvailable = function ()
    isConnectableViaSSH = false
    targetPorts = Proxima.sessions.getSessionValue("targetPorts")
    for targetPort in targetPorts
        if targetPort.port_number == 22 and targetPort.state == "OPEN" then
            isConnectableViaSSH = true
            break
        end if
    end for
    return isConnectableViaSSH
end function

Proxima.actions.isFTPAvailable = function ()
    isConnectableViaFTP = false
    targetPorts = Proxima.sessions.getSessionValue("targetPorts")
    for targetPort in targetPorts
        if targetPort.port_number == 21 and targetPort.state == "OPEN" then
            isConnectableViaFTP = true
            break
        end if
    end for
    return isConnectableViaFTP
end function

Proxima.actions.getShellViaSSH = function (username, password)
    if self.isSSHAvailable() then
        targetIP = Proxima.sessions.getSessionValue("targetIP")
        connectionResult = Proxima.globals.myShell.connect_service(targetIP, 22, username, password, "ssh")
        Proxima.io.clearScreen()
        wait(0.5)
        if typeof(connectionResult) == "shell" then return connectionResult
    else
        return null
    end if
end function

Proxima.actions.getShellViaFTP = function (username, password)
    if self.isFTPAvailable() then
        targetIP = Proxima.sessions.getSessionValue("targetIP")
        connectionResult = Proxima.globals.myShell.connect_service(targetIP, 21, username, password, "ftp")
        Proxima.io.clearScreen()
        wait(0.5)
        if typeof(connectionResult) == "shell" then return connectionResult
    else
        return null
    end if
end function

Proxima.actions.tunnelConnection = function ()
    targetIP = Proxima.sessions.getSessionValue("targetIP")
    targetUsers = Proxima.sessions.getSessionValue("targetUsers")
    targetShell = null
    if targetUsers.len > 0 and Proxima.helpers.indexesOf(targetUsers, "password", "UNKNOWN") == false then
        targetUser = targetUsers[0]

        if targetUser.password.len == 32 then
            print(Proxima.io.addOutputEntry(Proxima.io.output.error("User password is not deciphered yet! Deciphering password...")))
            self.decipherUserPassword(targetUser.id)
        end if
        
        print(Proxima.io.addOutputEntry(Proxima.io.output.progress("Trying to tunnel shell by SSH or FTP protocol via <b>" + targetUser.username + "</b> privilege. <b>[IP:" + targetIP + "]</b>")))
        sshShell = self.getShellViaSSH(targetUser.username, targetUser.password)
        ftpShell = self.getShellViaFTP(targetUser.username, targetUser.password)

        if sshShell != null then
            targetShell = sshShell
        else
            if ftpShell != null then
                targetShell = ftpShell
            end if
        end if

        if typeof(targetShell) == "shell" or typeof(targetShell) == "ftpshell" then
            additionResult = self.addShellConnection(targetShell, targetUser.username)
            if additionResult then
                print(Proxima.io.addOutputEntry(Proxima.io.output.success("Tunneled target via shell successfuly!")))
            else
                print(Proxima.io.addOutputEntry(Proxima.io.output.warning("This shell connection is already in the target shells list. Skipping...")))
            end if
        else
            print(Proxima.io.addOutputEntry(Proxima.io.output.error("Couldn't tunnel via SSH or FTP, ports are closed.")))
        end if
    else if targetUsers.len > 0 and Proxima.helpers.indexesOf(targetUsers, "password", "UNKNOWN") == true then
        targetExploits = Proxima.sessions.getSessionValue("targetExploits")
        if Proxima.helpers.indexesOf(targetExploits, "result", 3) then
            for targetUser in targetUsers
                print(Proxima.io.addOutputEntry(Proxima.io.output.progress("Trying to tunnel shell by SSH or FTP protocol via <b>" + targetUser.username + "</b> privilege. <b>[IP:" + targetIP + "]</b>")))
                sshShell = self.getShellViaSSH(targetUser.username, targetUser.password)
                ftpShell = self.getShellViaFTP(targetUser.username, targetUser.password)
        
                if sshShell != null then
                    targetShell = sshShell
                else
                    if ftpShell != null then
                        targetShell = ftpShell
                    end if
                end if
        
                if typeof(targetShell) == "shell" then
                    additionResult = self.addShellConnection(targetShell, targetUser.username)
                    if additionResult then
                        print(Proxima.io.addOutputEntry(Proxima.io.output.success("Tunneled target via shell successfuly!")))
                    else
                        print(Proxima.io.addOutputEntry(Proxima.io.output.warning("This shell connection is already in the target shells list. Skipping...")))
                    end if
                else
                    print(Proxima.io.addOutputEntry(Proxima.io.output.error("Couldn't tunnel via SSH or FTP, ports are closed.")))
                end if
            end for
        else
            print(Proxima.io.addOutputEntry(Proxima.io.output.error("No user information found to be used for tunnelling, please execute an exploit first...")))
        end if
    else
        print(Proxima.io.addOutputEntry(Proxima.io.output.error("No user information found to be used for tunnelling, please execute an exploit first...")))
    end if
end function

Proxima.actions.createJumpFile = function (targetShell, userPassword)
    targetComputer = targetShell.host_computer
    shellCode = "rootShell = get_shell(" + char(34) + "root" + char(34) + ", " + char(34) + str(userPassword) + char(34) + ")" + char(10)
    shellCode = shellCode + "get_custom_object.acquiredShell = rootShell"
    createJumpFile = targetComputer.touch("/home/guest", "root_shell.src")
    setContent = targetComputer.File("/home/guest/root_shell.src").set_content(shellCode)
    if typeof(setContent) == "string" or setContent == 0 then
        // ERROR
    else
        if createJumpFile == 1 then
            // SUCCESS
        else
            // ERROR
        end if
    end if
    buildScript = targetShell.build("/home/guest/root_shell.src", "/home/guest")
    if buildScript != "" then
        return false
    else
        return true
    end if
end function

Proxima.actions.jumpShell = function ()
    targetShells = Proxima.sessions.getSessionValue("targetShells")
    if targetShells.len > 0 then
        targetUsers = Proxima.sessions.getSessionValue("targetUsers")
        if Proxima.helpers.indexesOf(targetUsers, "password", "UNKNOWN") == false then     
            targetShell = targetShells[0].shell_object
            createJumpFile = self.createJumpFile(targetShell, targetUsers[0].password)
            if createJumpFile then
                launchScript = targetShell.launch("/home/guest/root_shell")
                if launchScript == 0 or typeof(launchScript) == "string" then
                    print(Proxima.io.addOutputEntry(Proxima.io.output.error("Couldn't launch jump file!")))
                else
                    print(Proxima.io.addOutputEntry(Proxima.io.output.success("Successfuly launched root shell.")))    
                    acquiredShell = get_custom_object.acquiredShell
                    if acquiredShell != null then
                        additionResult = self.addShellConnection(acquiredShell, targetUsers[0].username)
                        print(Proxima.io.addOutputEntry(Proxima.io.output.success("Tunneled target via shell successfuly!")))
                        print(Proxima.io.addOutputEntry(Proxima.io.output.info("Updated the target shells list.")))
                    else
                        print(Proxima.io.addOutputEntry(Proxima.io.output.error("Couldn't acquire root privileges!")))
                    end if
                end if
            else
                print(Proxima.io.addOutputEntry(Proxima.io.output.error("Couldn't create jump file!")))
            end if
        else if Proxima.helpers.indexesOf(targetUsers, "password", "UNKNOWN") == true then
            for targetUser in targetUsers
                targetShell = targetShells[0].shell_object
                createJumpFile = self.createJumpFile(targetShell, Proxima.engine.getSettings().injection_password)
                if createJumpFile then
                    launchScript = targetShell.launch("/home/guest/root_shell")
                    if launchScript == 0 or typeof(launchScript) == "string" then
                        acquiredShell = get_custom_object.acquiredShell
                        if typeof(acquiredShell) == "shell" then
                            additionResult = self.addShellConnection(acquiredShell, targetUser.username)
                            if additionResult then
                                print(Proxima.io.addOutputEntry(Proxima.io.output.success("Tunneled target via shell successfuly!")))
                                print(Proxima.io.addOutputEntry(Proxima.io.output.info("Updated the target shells list.")))
                            end if
                        end if
                    end if
                else
                    print(Proxima.io.addOutputEntry(Proxima.io.output.error("Couldn't create jump file!")))
                end if
            end for
        end if
    else
        print(Proxima.io.addOutputEntry(Proxima.io.output.error("No open shells found to perform a jump!")))
    end if
end function

// ------------------------------------------------------------------------------------------------------------

Proxima.actions.cleanUpLogs = function ()
    targetShells = Proxima.sessions.getSessionValue("targetShells")
    if targetShells.len > 0 then
        targetShell = targetShells[0]
        if targetShell.owner == "root" then
            logFile = targetShell.shell_object.host_computer.File("/var/system.log")
            deletionResultLog = logFile.delete
            if typeof(deletionResultLog) == "string" and deletionResultLog.len > 0 then
                print(Proxima.io.addOutputEntry(Proxima.io.output.error("Couldn't delete system logs: " + deletionResultLog)))
            else
                print(Proxima.io.addOutputEntry(Proxima.io.output.success("Cleaned up system logs successfuly!")))
            end if
        else
            print(Proxima.io.addOutputEntry(Proxima.io.output.error("Couldn't delete system logs due to insufficent user privilege!")))
        end if
    else
        print(Proxima.io.addOutputEntry(Proxima.io.output.error("No open shells found, please execute an exploit first.")))
    end if
end function

Proxima.actions.corruptComputer = function ()
    targetShells = Proxima.sessions.getSessionValue("targetShells")
    if targetShells.len > 0 then
        targetShell = targetShells[0]
        if targetShell.owner == "root" then
            targetComputer = targetShell.shell_object.host_computer
            imgFile = targetComputer.File("/boot/kernel.img")
            deletionResultImage = imgFile.delete
            if typeof(deletionResultImage) == "string" and deletionResultImage.len > 0 then
                print(Proxima.io.addOutputEntry(Proxima.io.output.error("There was an error while deleting <b>kernel.img</b> file: " + deletionResultImage)))
            else
                print(Proxima.io.addOutputEntry(Proxima.io.output.success("<b>kernel.img</b> file got deleted successfully!")))
            end if
            print(Proxima.io.addOutputEntry(Proxima.io.output.success("Deleting system logs to leave no trace...")))
            logFile = targetComputer.File("/var/system.log")
            deletionResultLog = logFile.delete
            if typeof(deletionResultLog) == "string" and deletionResultLog.len > 0 then
                print(Proxima.io.addOutputEntry(Proxima.io.output.error("There was an error while deleting <b>system.log</b> file: " + deletionResultLog)))
            else
                print(Proxima.io.addOutputEntry(Proxima.io.output.success("<b>system.log</b> file got deleted successfully.")))
            end if
            print(Proxima.io.addOutputEntry(Proxima.io.output.progress("Rebooting the remote computer to complete system corruption...")))
            launchBinary = targetShell.shell_object.launch("/bin/reboot")
            if launchBinary == null or launchBinary == 0 or typeof(launchBinary) == "string" then
                print(Proxima.io.addOutputEntry(Proxima.io.output.error("Couldn't reboot desired computer! You have to do it manually...")))
                if typeof(launchBinary) == "string" then print(Proxima.io.addOutputEntry(Proxima.io.output.error("Reason of failure: " + launchBinary)))
            else
                print(Proxima.io.addOutputEntry(Proxima.io.output.success("Successfuly rebooted! <b>[IP:" + targetShell.public_ip + "]</b>")))
            end if
        else
            print(Proxima.io.addOutputEntry(Proxima.io.output.error("Couldn't delete boot image due to insufficent user privilege!")))
        end if
    else
        print(Proxima.io.addOutputEntry(Proxima.io.output.error("No open shells found, please execute an exploit first.")))
    end if
end function

Proxima.actions.putTools = function ()
    targetShells = Proxima.sessions.getSessionValue("targetShells")
    if targetShells.len > 0 then
        targetShell = targetShells[0]

        setUploadTo = "/root"
        if targetShell.owner != "root" then setUploadTo = "/home/" + targetShell.owner

        toolsFolder = Proxima.globals.myPC.File(Proxima.settings.toolsFolder)
    
        if setUploadTo != null and toolsFolder != null then
            fileList = Proxima.helpers.collectFiles(toolsFolder)
            if fileList.len > 0 then
                for filePath in fileList
                    toolFile = Proxima.globals.myPC.File(filePath)
                    fileName = filePath.split("/")[-1].trim
                    print(Proxima.io.addOutputEntry(Proxima.io.output.progress("Attempting to upload <b>" + fileName + "</b>...")))
                    print(Proxima.io.addOutputEntry(Proxima.io.output.line))
                    uploadFile = Proxima.globals.myShell.scp(toolFile.path, setUploadTo, targetShell.shell_object)
                    Proxima.io.addTransferProcess(toolFile.size)
                    print(Proxima.io.addOutputEntry(Proxima.io.output.line))
                    Proxima.io.clearScreen()
                    wait(0.5)
                    if typeof(uploadFile) == "string" or typeof(uploadFile) == null then
                        print(Proxima.io.addOutputEntry(Proxima.io.output.error("Couldn't upload <b>" + fileName + "</b>!")))
                        print(Proxima.io.addOutputEntry(Proxima.io.output.error("Reason of failure: " + uploadFile)))
                    else
                        print(Proxima.io.addOutputEntry(Proxima.io.output.success("Successfuly uploaded <b>" + fileName + "</b>!")))
                    end if
                end for
            else
                print(Proxima.io.addOutputEntry(Proxima.io.output.error("No file or folder found in given local upload folder!")))
            end if
        else
            print(Proxima.io.addOutputEntry(Proxima.io.output.error("No valid upload folder found in given directory!")))
        end if
    else
        print(Proxima.io.addOutputEntry(Proxima.io.output.error("No open shells found, please execute an exploit first.")))
    end if
end function

Proxima.actions.injectRshell = function (shellID)
    targetShells = Proxima.sessions.getSessionValue("targetShells")
    if targetShells.len > 0 then
        if shellID != null and targetShells.hasIndex(shellID - 1) then
            targetShell = targetShells[shellID - 1]

            userFolder = "/root"
            if targetShell.owner != "root" then userFolder = "/home/" + targetShell.owner

            foundedLocation = null
            for metaxploitLocation in Proxima.settings.metaxploitLocations
                checkIfExists = Proxima.globals.myPC.File(metaxploitLocation)
                if checkIfExists != null then
                    foundedLocation = Proxima.globals.myPC.File(metaxploitLocation)
                    break
                end if
            end for
            if foundedLocation != null then
                print(Proxima.io.addOutputEntry(Proxima.io.output.progress("Attempting to upload <b>metaxploit.so</b>...")))
                print(Proxima.io.addOutputEntry(Proxima.io.output.line))
                uploadMetaxploit = Proxima.globals.myShell.scp(foundedLocation.path, userFolder, targetShell.shell_object)
                Proxima.io.addTransferProcess(foundedLocation.size)
                print(Proxima.io.addOutputEntry(Proxima.io.output.line))
                Proxima.io.clearScreen()
                wait(0.5)
            end if

            rshellCode = null
            rshellCode = rshellCode + "metaxploit = null" + char(10)
            rshellCode = rshellCode + "include_meta = include_lib(" + char(34) + userFolder + "/metaxploit.so" + char(34) + ")" + char(10)
            rshellCode = rshellCode + "if include_meta != null then" + char(10)
            rshellCode = rshellCode + char(9) + "metaxploit = include_meta" + char(10)
            rshellCode = rshellCode + "end if" + char(10)
            rshellCode = rshellCode + "if metaxploit != null then" + char(10)
            rshellCode = rshellCode + char(9) + "metaxploit.rshell_client(" + char(34) + Proxima.engine.getSettings().rshell_ip + char(34) + ", " + Proxima.engine.getSettings().rshell_port + ", " + char(34) + Proxima.engine.getSettings().rshell_proc_name + char(34) + ")" + char(10)
            rshellCode = rshellCode + char(9) + "get_custom_object.result = 1" + char(10)
            rshellCode = rshellCode + "else" + char(10)
            rshellCode = rshellCode + char(9) + "get_custom_object.result = 0" + char(10)
            rshellCode = rshellCode + "end if" + char(10)

            createRshellFile = targetShell.shell_object.host_computer.touch(userFolder, "rshell.src")
            setRshellFileContent = targetShell.shell_object.host_computer.File(userFolder + "/rshell.src").set_content(rshellCode)
            buildRshellFile = targetShell.shell_object.build(userFolder + "/rshell.src", userFolder)
            
            get_custom_object.metaxploitLocations = Proxima.settings.metaxploitLocations
            launchRshellFile = targetShell.shell_object.launch(userFolder + "/rshell")
            rshellResult = get_custom_object.result

            if rshellResult == 1 then
                print(Proxima.io.addOutputEntry(Proxima.io.output.success("Successfuly injected reverse shell, you can connect it via reverse shell interface.")))
            else if rshellResult == 0 then
                print(Proxima.io.addOutputEntry(Proxima.io.output.error("Couldn't inject reverse shell...")))
            end if
        else
            print(Proxima.io.addOutputEntry(Proxima.io.output.error("No open shell found with specified ID. <b>[ID:" + shellID + "]</b>")))
        end if
    else
        print(Proxima.io.addOutputEntry(Proxima.io.output.error("No open shells found to inject reverse shell, please execute an exploit first.")))
    end if
end function

// ------------------------------------------------------------------------------------------------------------

Proxima.actions.treeDirectory = function(targetComputer, givenDirectory, entryIndent)
    treeLines = []
    fileHandler = targetComputer.File(givenDirectory)

    if fileHandler.is_folder() then
        getFolders = fileHandler.get_folders()
        getFiles = fileHandler.get_files()
        allEntries = getFolders + getFiles
        for entryItem in allEntries
            isLast = false
            if entryItem.name == allEntries[allEntries.len - 1].name then isLast = true

            entryPrefix = entryIndent
            if isLast then
                entryPrefix = entryPrefix + "`-- "
            else
                entryPrefix = entryPrefix + "|-- "
            end if

            treeLines.push(entryPrefix + entryItem.name)

            if entryItem.is_folder() then
                newIndent = entryIndent + "|   "
                subtreeLines = self.treeDirectory(targetComputer, entryItem.path, newIndent)
                treeLines = treeLines + subtreeLines
            end if
        end for
    end if

    return treeLines
end function

Proxima.actions.displayTree = function (targetComputer, givenDirectory = "/", entryIndent = "")
    treeLines = self.treeDirectory(targetComputer, givenDirectory, entryIndent)

    print(Proxima.io.addOutputEntry("<b>/ START_TREE >></b>"))
    print(Proxima.io.addOutputEntry("<b>| START_SCAN [DIRECTORY:" + givenDirectory + "]"))

    for directoryString in treeLines
        print(Proxima.io.addOutputEntry(directoryString))
    end for

    print(Proxima.io.addOutputEntry("<b>| END_SCAN</b>"))
    print(Proxima.io.addOutputEntry("<b>\ END_TREE <<</b>"))
end function

Proxima.actions.getProcesses = function (targetComputer)
    showProcs = targetComputer.show_procs
    processesList = showProcs.split(char(10))[1:]

    activeProcesses = []
    for processItem in processesList
        parsedItem = processItem.split(" ")
        processMap = {}
        processMap.pid = parsedItem[1]
        processMap.name = parsedItem[4]
        processMap.owner = parsedItem[0]
        processMap.cpu_usage = parsedItem[2]
        processMap.mem_usage = parsedItem[3]
        activeProcesses.push(processMap)
    end for

    return activeProcesses
end function

// ------------------------------------------------------------------------------------------------------------

Proxima.actions.createPortMap = function (portObject, targetRouter)
    portMap = {}
    portMap["status"] = "open"
    if is_closed(portObject) then portMap["status"] = "closed"
    lanIP = "unknown"
    if targetRouter.port_info(portObject).indexOf(" ") != null then
        portInfo = targetRouter.port_info(portObject)
        lanIP = portObject.get_lan_ip
    end if
    portInfo = targetRouter.port_info(portObject)
    parsedInfo = portInfo.split(" ")
    portMap["port_number"] = portObject.port_number
    portMap["service_name"] = parsedInfo[0]
    portMap["service_version"] = parsedInfo[1]
    portMap["lan_ip"] = lanIP
    return portMap
end function

Proxima.actions.softNetworkScan = function (targetIP)
    scanData = { "ip": targetIP, "is_reachable": true, "ports": [], "devices": [], "main_router": true, "type": "router", "kernel_version": null, "has_firewall": false, "is_owner": false }
    targetRouter = get_router(targetIP)
    if targetRouter != null then
        scanData.ip = targetRouter.local_ip

        for port in targetRouter.device_ports(scanData.ip)
            if port.port_number != 8080 then
                portMap = self.createPortMap(port, targetRouter)
                scanData.ports.push(portMap)
            end if
        end for

        routerFirewalls = targetRouter.firewall_rules()
        if typeof(routerFirewalls) == "list" and routerFirewalls.len > 0 then scanData.has_firewall = true
        scanData.kernel_version = targetRouter.kernel_version

        targetDevices = targetRouter.devices_lan_ip
        for deviceIP in targetDevices
            if deviceIP == targetRouter.local_ip then
                continue
            end if
            deviceMap = { "ip": deviceIP, "is_reachable": true, "ports": [], "devices": [], "main_router": false, "type": "device", "kernel_version": null, "has_firewall": false, "is_owner": false } 
            for port in targetRouter.device_ports(deviceIP)
                if port.port_number == 8080 then deviceMap.type = "router_or_switch"
                if port.port_number != 8080 then
                    devicePortMap = self.createPortMap(port, targetRouter)
                    deviceMap.ports.push(devicePortMap)
                end if
            end for
            scanData.devices.push(deviceMap)
        end for
    else
        scanData.is_reachable = false
    end if

    return [scanData]
end function

Proxima.actions.deepNetworkScan = function (targetIP, scannedIPs)
    scanResults = []

    if scannedIPs.indexOf(targetIP) != null then
        return scanResults
    end if

    isReachable = Proxima.globals.myShell.ping(targetIP)

    isOwner = false
    if targetIP == Proxima.globals.myPC.local_ip then isOwner = true

    scanData = { "ip": targetIP, "is_reachable": isReachable, "ports": [], "devices": [], "main_router": false, "type": "device", "kernel_version": null, "has_firewall": false, "is_owner": isOwner }

    if not isReachable then
        scanResults.push(scanData)
        return scanResults
    end if

    scannedIPs.push(targetIP)

    targetRouter = get_router(targetIP)
    if targetRouter == null then targetRouter = get_router(scannedIPs[0])

    for port in targetRouter.device_ports(targetIP)
        if port.port_number != 8080 then
            portMap = self.createPortMap(port, targetRouter)
            scanData.ports.push(portMap)
        end if
    end for

    if targetRouter.local_ip == targetIP then
        routerFirewalls = targetRouter.firewall_rules()
        if typeof(routerFirewalls) == "list" and routerFirewalls.len > 0 then scanData.has_firewall = true
        
        publicIP = targetRouter.public_ip
        mainRouterIP = get_router(publicIP).local_ip
        if scanData.ip == mainRouterIP then scanData.main_router = true
        
        scanData.kernel_version = targetRouter.kernel_version
        
        scanData.type = "router"
        if get_switch(targetIP) then scanData.type = "switch"

        targetDevices = targetRouter.devices_lan_ip
        for device in targetDevices
            if scannedIPs.indexOf(device) != null or device == targetIP then
                continue
            end if
            deviceResults = self.deepNetworkScan(device, scannedIPs)
            for result in deviceResults
                scanData.devices.push(result)
            end for
        end for
    end if

    scanResults.push(scanData)
    return scanResults
end function

Proxima.actions.beautifyNetworkScan = function (networkData)
    for data in networkData
        deviceTypePrefix = null
        portIndent = "|     "

        if not data["is_reachable"] then
            deviceTypePrefix = "|---- DEVICE"
            print(Proxima.io.addOutputEntry("<b>" + deviceTypePrefix + " [" + data["ip"] + "]</b>"))
            print(Proxima.io.addOutputEntry("<color=#FF1548>" + portIndent + "|-- IP_NOT_REACHABLE</color>"))
            continue
        end if

        isCCTV = false
        for port in data["ports"]
            if port["port_number"] == 37777 then
                isCCTV = true
                break
            end if
        end for

        if isCCTV then
            deviceTypePrefix = "|---- CCTV"
            portIndent = "|     "
        else if data["type"] == "router" then
            if data["main_router"] then
                deviceTypePrefix = "|-- MAIN ROUTER"
            else
                deviceTypePrefix = "|-- ROUTER"
            end if
            portIndent = "|   "
        else if data["type"] == "switch" then
            deviceTypePrefix = "|---- SWITCH"
            portIndent = "|     "
        else if data["type"] == "router_or_switch" then
            deviceTypePrefix = "|---- ROUTER/SWITCH"
            portIndent = "|     "
        else
            deviceTypePrefix = "|---- COMPUTER"
            portIndent = "|     "
        end if

        if data["has_firewall"] then
            if data["kernel_version"] != null then
                print(Proxima.io.addOutputEntry("<color=#FFC466><b>" + deviceTypePrefix + " [" + data["ip"] + "|KERNEL_V:" + data["kernel_version"] + "]</b></color>"))
            else
                print(Proxima.io.addOutputEntry("<color=#FFC466><b>" + deviceTypePrefix + " [" + data["ip"] + "]</b></color>"))
            end if
        else
            if data["kernel_version"] != null then
                print(Proxima.io.addOutputEntry("<b>" + deviceTypePrefix + " [" + data["ip"] + "|KERNEL_V:" + data["kernel_version"] + "]</b>"))
            else
                isOwner = null
                if data["is_owner"] then isOwner = "<b><color=#08FF57>[YOU]</color></b>"
                print(Proxima.io.addOutputEntry("<b>" + deviceTypePrefix + " [" + data["ip"] + "]</b>" + isOwner))
            end if
        end if

        if data["ports"].len > 0 then
            for port in data["ports"]
                portInfo = "PORT:" + port["port_number"] + "|" + port["status"].upper() + "|" + port["service_name"].upper() + "/" + port["service_version"].upper

                if data["main_router"] and port["lan_ip"] != data["ip"] then
                    portInfo = portInfo + "|ROUTED_TO:" + port["lan_ip"]
                end if

                if port["status"].upper() == "OPEN" then
                    print(Proxima.io.addOutputEntry("<color=#08FF57>" + portIndent + "|-- " + portInfo + "</color>"))
                else
                    print(Proxima.io.addOutputEntry("<color=#FF1548>" + portIndent + "|-- " + portInfo + "</color>"))
                end if
            end for
        else
            print(Proxima.io.addOutputEntry("<color=#FF1548>" + portIndent + "|-- NO_OPEN_PORTS</color>"))
        end if

        if data["devices"].len > 0 then
            self.beautifyNetworkScan(data["devices"])
        end if
    end for
end function

Proxima.actions.scanLAN = function ()
    targetSession = Proxima.sessions.getSession(Proxima.sessions.targetSession)
    networkScan = null
    scanMethod = null
    scannedIPs = []
    if is_lan_ip(targetSession.targetIP) then
        networkScan = self.deepNetworkScan(targetSession.targetRouter.local_ip, scannedIPs)
        scanMethod = "DEEP_SCAN"
    else
        networkScan = self.softNetworkScan(targetSession.targetIP)
        scanMethod = "SOFT_SCAN"
    end if
    print(Proxima.io.addOutputEntry("<b>/ START_SCANLAN [" + scanMethod + "]>></b>"))
    print(Proxima.io.addOutputEntry("<b>| START_PROBE [PUBLIC_IP:" + targetSession.targetRouter.public_ip + "]</b>"))
    self.beautifyNetworkScan(networkScan)
    print(Proxima.io.addOutputEntry("<b>| END_PROBE</b>"))
    print(Proxima.io.addOutputEntry("<b>\ END_SCANLAN <<</b>"))
end function